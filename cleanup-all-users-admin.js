import admin from 'firebase-admin';
import { readFileSync } from 'fs';

// Configuration Firebase Admin SDK
const serviceAccountPath = './firebase-service-account.json';

/**
 * Initialise Firebase Admin SDK
 */
function initializeFirebaseAdmin() {
    try {
        if (admin.apps.length === 0) {
            let serviceAccount;

            try {
                serviceAccount = JSON.parse(readFileSync(serviceAccountPath, 'utf8'));
            } catch (error) {
                console.warn('‚ö†Ô∏è  Fichier de service account non trouv√©, utilisation de la configuration par d√©faut...');
                serviceAccount = {
                    type: "service_account",
                    project_id: "chine-ton-usine"
                };
            }

            admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                projectId: 'chine-ton-usine'
            });

            console.log('‚úÖ Firebase Admin SDK initialis√©');
        }

        return {
            auth: admin.auth(),
            firestore: admin.firestore()
        };

    } catch (error) {
        console.error('‚ùå Erreur initialisation Firebase Admin:', error.message);
        throw error;
    }
}

/**
 * Supprime tous les utilisateurs de Firebase Authentication
 */
async function deleteAllAuthUsers(auth) {
    console.log('üîê Suppression des utilisateurs Firebase Authentication...');

    let deletedCount = 0;
    let nextPageToken;

    try {
        do {
            // R√©cup√©rer une page d'utilisateurs (max 1000)
            const listUsersResult = await auth.listUsers(1000, nextPageToken);

            if (listUsersResult.users.length === 0) {
                console.log('‚ÑπÔ∏è  Aucun utilisateur trouv√© dans Authentication');
                break;
            }

            // Extraire les UIDs
            const uids = listUsersResult.users.map(user => user.uid);

            console.log(`üóëÔ∏è  Suppression de ${uids.length} utilisateurs Authentication...`);

            // Supprimer par batch (Firebase Admin SDK permet jusqu'√† 1000 √† la fois)
            const deleteResult = await auth.deleteUsers(uids);

            deletedCount += deleteResult.successCount;

            if (deleteResult.failureCount > 0) {
                console.warn(`‚ö†Ô∏è  ${deleteResult.failureCount} suppressions √©chou√©es dans Authentication`);
                deleteResult.errors.forEach(error => {
                    console.error(`‚ùå Erreur suppression UID ${error.index}:`, error.error.message);
                });
            }

            nextPageToken = listUsersResult.pageToken;

            // Pause pour √©viter les rate limits
            if (nextPageToken) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

        } while (nextPageToken);

        console.log(`‚úÖ ${deletedCount} utilisateurs supprim√©s de Authentication`);
        return deletedCount;

    } catch (error) {
        console.error('‚ùå Erreur suppression utilisateurs Authentication:', error.message);
        throw error;
    }
}

/**
 * Supprime tous les documents de la collection users dans Firestore
 */
async function deleteAllFirestoreUsers(firestore) {
    console.log('üìÑ Suppression des documents Firestore users...');

    let deletedCount = 0;
    const batchSize = 500; // Taille de batch pour Firestore

    try {
        let hasMore = true;

        while (hasMore) {
            // R√©cup√©rer un batch de documents
            const snapshot = await firestore
                .collection('users')
                .limit(batchSize)
                .get();

            if (snapshot.empty) {
                console.log('‚ÑπÔ∏è  Aucun document trouv√© dans la collection users');
                hasMore = false;
                break;
            }

            // Cr√©er un batch pour supprimer les documents
            const batch = firestore.batch();

            snapshot.docs.forEach(doc => {
                batch.delete(doc.ref);
            });

            // Ex√©cuter le batch
            await batch.commit();

            deletedCount += snapshot.docs.length;
            console.log(`üóëÔ∏è  ${snapshot.docs.length} documents supprim√©s (total: ${deletedCount})`);

            // Si on a r√©cup√©r√© moins que la taille de batch, on a fini
            if (snapshot.docs.length < batchSize) {
                hasMore = false;
            }

            // Pause pour √©viter les rate limits
            await new Promise(resolve => setTimeout(resolve, 500));
        }

        console.log(`‚úÖ ${deletedCount} documents supprim√©s de Firestore`);
        return deletedCount;

    } catch (error) {
        console.error('‚ùå Erreur suppression documents Firestore:', error.message);
        throw error;
    }
}

/**
 * V√©rifie que toutes les suppressions sont bien effectives
 */
async function verifyDeletion(auth, firestore) {
    console.log('üîç V√©rification de la suppression...');

    try {
        // V√©rifier Authentication
        const authUsers = await auth.listUsers(10);
        const authCount = authUsers.users.length;

        // V√©rifier Firestore
        const firestoreSnapshot = await firestore.collection('users').limit(10).get();
        const firestoreCount = firestoreSnapshot.size;

        console.log(`üìä V√©rification termin√©e:`);
        console.log(`   - Authentication: ${authCount} utilisateurs restants`);
        console.log(`   - Firestore: ${firestoreCount} documents restants`);

        if (authCount === 0 && firestoreCount === 0) {
            console.log('‚úÖ Suppression compl√®te confirm√©e !');
            return true;
        } else {
            console.warn('‚ö†Ô∏è  Suppression incompl√®te d√©tect√©e');
            return false;
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error.message);
        return false;
    }
}

/**
 * Fonction principale de nettoyage complet
 */
async function cleanupAllUsers() {
    console.log('üßπ NETTOYAGE COMPLET DES UTILISATEURS');
    console.log('='.repeat(50));
    console.log('üè≠ Projet: chine-ton-usine');
    console.log('‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUS les utilisateurs');
    console.log('üìã Zones impact√©es: Firebase Auth + Firestore users');

    try {
        // Initialisation
        const { auth, firestore } = initializeFirebaseAdmin();

        console.log('\nüöÄ D√©but du nettoyage...');

        // 1. Supprimer tous les utilisateurs de Firebase Authentication
        console.log('\nüì± √âTAPE 1: Nettoyage Firebase Authentication');
        console.log('-'.repeat(40));
        const authDeleted = await deleteAllAuthUsers(auth);

        // 2. Supprimer tous les documents de la collection users
        console.log('\nüìÑ √âTAPE 2: Nettoyage Firestore');
        console.log('-'.repeat(40));
        const firestoreDeleted = await deleteAllFirestoreUsers(firestore);

        // 3. V√©rification finale
        console.log('\nüîç √âTAPE 3: V√©rification');
        console.log('-'.repeat(40));
        const isClean = await verifyDeletion(auth, firestore);

        // R√©sum√© final
        console.log('\nüìä R√âSUM√â DU NETTOYAGE');
        console.log('='.repeat(40));
        console.log(`üîê Authentication: ${authDeleted} utilisateurs supprim√©s`);
        console.log(`üìÑ Firestore: ${firestoreDeleted} documents supprim√©s`);
        console.log(`‚úÖ Nettoyage complet: ${isClean ? 'OUI' : 'NON'}`);

        if (isClean) {
            console.log('\nüéâ NETTOYAGE R√âUSSI !');
            console.log('üí° La base est maintenant vierge et pr√™te pour les utilisateurs de production');
            console.log('üîÑ Vous pouvez maintenant lancer le script de cr√©ation des utilisateurs');
        } else {
            console.log('\n‚ö†Ô∏è  NETTOYAGE PARTIEL');
            console.log('üîÑ Vous pouvez relancer ce script pour compl√©ter la suppression');
        }

        console.log('\nüéØ Prochaines √©tapes:');
        console.log('1. Ex√©cuter create-production-users-admin.js');
        console.log('2. Tester les connexions');
        console.log('3. Configurer les r√®gles de s√©curit√©');

    } catch (error) {
        console.error('\n‚ùå ERREUR CRITIQUE:', error.message);
        console.error('üìã Stack trace:', error.stack);

        console.log('\nüîß ACTIONS SUGG√âR√âES:');
        console.log('1. V√©rifier les permissions Firebase Admin');
        console.log('2. Contr√¥ler la connectivit√© internet');
        console.log('3. V√©rifier la configuration du service account');

        process.exit(1);
    }
}

// Fonction de confirmation interactive
function askConfirmation() {
    return new Promise((resolve) => {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        console.log('\n‚ö†Ô∏è  ATTENTION: SUPPRESSION D√âFINITIVE');
        console.log('Cette action va supprimer TOUS les utilisateurs existants.');
        console.log('Cette op√©ration est IRR√âVERSIBLE.');

        rl.question('\n‚ùì √ätes-vous s√ªr de vouloir continuer? (tapez "OUI" pour confirmer): ', (answer) => {
            rl.close();
            resolve(answer.trim().toUpperCase() === 'OUI');
        });
    });
}

// Ex√©cution du script avec confirmation
if (import.meta.url === `file://${process.argv[1]}`) {
    (async () => {
        try {
            // Demander confirmation avant suppression
            const confirmed = await askConfirmation();

            if (!confirmed) {
                console.log('\n‚ùå Op√©ration annul√©e par l\'utilisateur');
                console.log('üí° Aucune modification effectu√©e');
                process.exit(0);
            }

            console.log('\n‚úÖ Confirmation re√ßue, d√©but du nettoyage...');
            await cleanupAllUsers();

            console.log('\nüèÅ Script de nettoyage termin√©');
            process.exit(0);

        } catch (error) {
            console.error('\nüí• √âchec du nettoyage:', error.message);
            process.exit(1);
        }
    })();
}

export { cleanupAllUsers };
