class h{baseUrl="/api/upload";mockMode=!0;async uploadFile(r,e={},n){try{const t=this.validateFile(r,e);if(!t.valid)return{success:!1,error:t.error};if(this.mockMode)return this.simulateUpload(r,e,n);const s=new FormData;return s.append("file",r),e.folder&&s.append("folder",e.folder),e.fileName&&s.append("fileName",e.fileName),new Promise(l=>{const a=new XMLHttpRequest;a.upload.addEventListener("progress",o=>{if(o.lengthComputable){const i=Math.round(o.loaded/o.total*100);n?.(i)}}),a.addEventListener("load",()=>{if(a.status===200)try{const o=JSON.parse(a.responseText);l({success:!0,url:o.url,progress:100})}catch{l({success:!1,error:"Erreur lors du traitement de la réponse du serveur"})}else l({success:!1,error:`Erreur HTTP: ${a.status}`})}),a.addEventListener("error",()=>{l({success:!1,error:"Erreur réseau lors de l'upload"})}),a.open("POST",this.baseUrl),a.send(s)})}catch(t){return{success:!1,error:t instanceof Error?t.message:"Erreur inconnue"}}}async uploadFiles(r,e={},n){const t=[];for(let s=0;s<r.length;s++){const l=r[s],a=await this.uploadFile(l,e,o=>n?.(s,o));t.push(a)}return t}async uploadImages(r,e={},n){const t=[];for(const s of r)if(s.type.startsWith("image/")&&(e.maxWidth||e.maxHeight))try{const l=await this.resizeImage(s,{maxWidth:e.maxWidth||1920,maxHeight:e.maxHeight||1080,quality:e.quality||.9});t.push(l)}catch(l){console.error("Erreur lors du redimensionnement:",l),t.push(s)}else t.push(s);return this.uploadFiles(t,{...e,folder:e.folder||"images"},n)}async deleteFile(r){if(this.mockMode)return console.log("Simulation: suppression du fichier",r),!0;try{return(await fetch(`${this.baseUrl}/delete`,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:r})})).ok}catch(e){return console.error("Erreur lors de la suppression:",e),!1}}validateFile(r,e){const n=(e.maxSize||50)*1024*1024;if(r.size>n)return{valid:!1,error:`Le fichier ${r.name} dépasse la taille maximale de ${e.maxSize||50}MB`};if(e.allowedTypes&&e.allowedTypes.length>0){const t="."+r.name.split(".").pop()?.toLowerCase();if(!e.allowedTypes.includes(t)&&!e.allowedTypes.includes(r.type))return{valid:!1,error:`Le type de fichier ${t} n'est pas autorisé`}}return{valid:!0}}simulateUpload(r,e,n){return new Promise(t=>{let s=0;const l=setInterval(()=>{if(s+=Math.random()*25,s>=100)if(s=100,clearInterval(l),r.type.startsWith("image/")){const a=new FileReader;a.onload=o=>{const i=o.target?.result;t({success:!0,url:i,progress:100})},a.onerror=()=>{const o=Math.random().toString(36).substr(2,9);t({success:!0,url:`https://picsum.photos/400/300?random=${o}`,progress:100})},a.readAsDataURL(r)}else{const a=Date.now(),o=Math.random().toString(36).substr(2,9),i=r.name.split(".").pop(),c=e.folder||"uploads",u=e.fileName||`${a}-${o}.${i}`;t({success:!0,url:`https://example.com/${c}/${u}`,progress:100})}else n?.(s)},150+Math.random()*200)})}resizeImage(r,e){return new Promise((n,t)=>{const s=document.createElement("canvas"),l=s.getContext("2d"),a=new Image;a.onload=()=>{let{width:o,height:i}=a;const{maxWidth:c,maxHeight:u}=e;if(o>c||i>u){const d=Math.min(c/o,u/i);o=Math.round(o*d),i=Math.round(i*d)}s.width=o,s.height=i,l?.drawImage(a,0,0,o,i),s.toBlob(d=>{if(d){const m=new File([d],r.name,{type:r.type,lastModified:Date.now()});n(m)}else t(new Error("Erreur lors de la création du blob"))},r.type,e.quality)},a.onerror=()=>t(new Error("Erreur lors du chargement de l'image")),a.src=URL.createObjectURL(r)})}setMockMode(r){this.mockMode=r}setBaseUrl(r){this.baseUrl=r}}const f=new h;export{f as u};
