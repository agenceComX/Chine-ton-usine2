#!/usr/bin/env node

/**
 * üîß DIAGNOSTIC DES PROBL√àMES DE CONNEXION
 * 
 * Ce script diagnostique les probl√®mes ERR_BLOCKED_BY_CLIENT
 * et les erreurs de connexion Firestore
 */

import admin from 'firebase-admin';
import { readFileSync } from 'fs';

console.log('üîß DIAGNOSTIC DES PROBL√àMES DE CONNEXION');
console.log('='.repeat(50));

async function diagnosticProblems() {
    try {
        // Initialiser Firebase Admin
        if (admin.apps.length === 0) {
            const serviceAccount = JSON.parse(readFileSync('./firebase-service-account.json', 'utf8'));
            admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                projectId: serviceAccount.project_id
            });
        }

        const auth = admin.auth();
        const firestore = admin.firestore();

        console.log('üìã DIAGNOSTIC COMPLET...\n');

        // 1. V√©rifier les utilisateurs existants
        console.log('1Ô∏è‚É£ V√âRIFICATION DES UTILISATEURS');
        console.log('-'.repeat(35));

        const listResult = await auth.listUsers();
        console.log(`‚úÖ ${listResult.users.length} utilisateurs trouv√©s`);

        listResult.users.forEach(user => {
            console.log(`   üìß ${user.email} - UID: ${user.uid.substring(0, 8)}...`);
        });

        // 2. V√©rifier Firestore
        console.log('\n2Ô∏è‚É£ V√âRIFICATION FIRESTORE');
        console.log('-'.repeat(25));

        const usersCollection = await firestore.collection('users').get();
        console.log(`‚úÖ ${usersCollection.size} documents Firestore trouv√©s`);

        // 3. Tester la connexion sp√©cifique
        console.log('\n3Ô∏è‚É£ TEST DE CONNEXION SP√âCIFIQUE');
        console.log('-'.repeat(35));

        // Tester l'utilisateur supplier sp√©cifiquement
        try {
            const supplierUser = await auth.getUserByEmail('supplier@chine-ton-usine.com');
            console.log(`‚úÖ Utilisateur supplier trouv√©: ${supplierUser.uid}`);

            // V√©rifier son document Firestore
            const supplierDoc = await firestore.collection('users').doc(supplierUser.uid).get();
            if (supplierDoc.exists) {
                const data = supplierDoc.data();
                console.log(`‚úÖ Document Firestore supplier: r√¥le ${data.role}`);
            } else {
                console.log('‚ùå Document Firestore supplier manquant');
            }

        } catch (error) {
            console.error('‚ùå Probl√®me avec l\'utilisateur supplier:', error.message);
        }

        // 4. Analyser les probl√®mes potentiels
        console.log('\n4Ô∏è‚É£ ANALYSE DES PROBL√àMES POTENTIELS');
        console.log('-'.repeat(40));

        console.log('üîç Probl√®mes ERR_BLOCKED_BY_CLIENT possibles:');
        console.log('   ‚Ä¢ Bloqueur de publicit√© (AdBlock, uBlock Origin)');
        console.log('   ‚Ä¢ Extension de navigateur bloquant les scripts');
        console.log('   ‚Ä¢ Politique de s√©curit√© du r√©seau');
        console.log('   ‚Ä¢ Configuration CORS Firebase');

        console.log('\nüîç Probl√®mes de contexte utilisateur:');
        console.log('   ‚Ä¢ √âtat de session incoh√©rent');
        console.log('   ‚Ä¢ Probl√®me de persistence Firebase Auth');
        console.log('   ‚Ä¢ R√®gles Firestore trop restrictives');
        console.log('   ‚Ä¢ Probl√®me de synchronisation Auth/Firestore');

        // 5. Solutions recommand√©es
        console.log('\n5Ô∏è‚É£ SOLUTIONS RECOMMAND√âES');
        console.log('-'.repeat(25));

        console.log('üîß Pour ERR_BLOCKED_BY_CLIENT:');
        console.log('   1. D√©sactiver temporairement les bloqueurs de pub');
        console.log('   2. Tester en navigation priv√©e');
        console.log('   3. Tester avec un autre navigateur');
        console.log('   4. V√©rifier les extensions de navigateur');

        console.log('\nüîß Pour les probl√®mes de session:');
        console.log('   1. Vider le cache et les cookies');
        console.log('   2. Red√©marrer le serveur de d√©veloppement');
        console.log('   3. V√©rifier la persistence Firebase Auth');
        console.log('   4. Synchroniser l\'√©tat Auth avec Firestore');

        // 6. Tests recommand√©s
        console.log('\n6Ô∏è‚É£ TESTS √Ä EFFECTUER');
        console.log('-'.repeat(20));

        console.log('üß™ Test 1 - Navigation priv√©e:');
        console.log('   ‚Ä¢ Ouvrir localhost:5173 en navigation priv√©e');
        console.log('   ‚Ä¢ Tenter une connexion avec supplier@chine-ton-usine.com');

        console.log('\nüß™ Test 2 - Autre navigateur:');
        console.log('   ‚Ä¢ Tester avec Chrome/Edge si vous √™tes sur Firefox');
        console.log('   ‚Ä¢ Ou inversement');

        console.log('\nüß™ Test 3 - Red√©marrage serveur:');
        console.log('   ‚Ä¢ Arr√™ter le serveur de dev (Ctrl+C)');
        console.log('   ‚Ä¢ Relancer: npm run dev');
        console.log('   ‚Ä¢ Retester la connexion');

        // 7. Commandes utiles
        console.log('\n7Ô∏è‚É£ COMMANDES DE D√âPANNAGE');
        console.log('-'.repeat(30));

        console.log('üîÑ Red√©marrer le projet:');
        console.log('   npm run dev');

        console.log('\nüßπ Nettoyer et red√©marrer:');
        console.log('   npm run build && npm run dev');

        console.log('\nüîç V√©rifier les utilisateurs:');
        console.log('   node verify-final.mjs');

        console.log('\nüì± Tester la configuration Firebase:');
        console.log('   node test-firebase-config.mjs');

    } catch (error) {
        console.error('\n‚ùå ERREUR LORS DU DIAGNOSTIC:', error.message);
        console.error('Stack:', error.stack);
    }
}

diagnosticProblems();
