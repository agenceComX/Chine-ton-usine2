{
  "\n                    }`}>\n                      {category.icon}\n                    </div>\n                    <span className=\"mt-2 text-sm font-semibold text-center transition-colors duration-300 font-reading text-readable dark:text-gray-300 group-hover:text-blue-600 dark:group-hover:text-blue-400 max-w-20 leading-tight\">\n                      {category.name}\n                    </span>\n                  </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section des cartes produits - Déplacée en haut */}\n      <div className=\"bg-white dark:bg-gray-900 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Carte Électronique */}\n            <div className={`bg-gradient-to-br from-blue-200 via-blue-300 to-orange-300 rounded-xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-3 hover:rotate-1 cursor-pointer group relative ${\n              visibleCards >= 1 ? ": "forms.categoryicondivspanc",
  "\n                  label={t('confirmPassword')}\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                  placeholder={t('passwordPlaceholder')}\n                  minLength={6}\n                  disabled={isLoading}\n                />\n              </div>\n            )}\n\n            {/* Champs spécifiques pour les influenceurs/sourceurs */}\n            {role === 'influencer' && (\n              <div className=": "auth.labeltconfirmpasswor",
  "\n                  } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}\n                >\n                  Utilisateurs\n                <": "admin.whitespacenowrappy4p",
  "\n                  } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}\n                >\n                  Utilisateurs\n                </button>\n              </nav>\n            </div>\n            \n            {renderContent()}\n          </div>\n        </div>\n      </main>\n\n      {/* Add User Modal */}\n      {showAddUserModal && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md\">\n            <h2 className=\"text-xl font-bold text-gray-900 dark:text-gray-100 mb-4\">Ajouter un nouvel utilisateur</h2>\n            {error && <div className=\"mb-4 text-red-600 text-sm\">{error}</div>}\n            {success && <div className=\"mb-4 text-green-600 text-sm\">{success}</div>}\n            <form onSubmit={handleAddUser} className=\"space-y-4\">\n                    <Input\n                label=\"Email\"\n                      type=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      required\n                    />\n                    <Input\n                label=\"Mot de passe\"\n                      type=\"password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      required\n                minLength={6}\n                    />\n                    <Input\n                label=\"Nom\"\n                      type=\"text\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                required\n                    />\n                    <Select\n                      label=\"Rôle\"\n                      value={role}\n                      onChange={(e) => setRole(e.target.value as ": "auth.whitespacenowrappy4p",
  "\n                  }`}>\n                  {category.icon}\n                </div>\n                <span className=\"mt-2 text-sm font-semibold text-center transition-colors duration-300 font-reading text-readable dark:text-gray-300 group-hover:text-blue-600 dark:group-hover:text-blue-400 max-w-20 leading-tight\">\n                  {category.name}\n                </span>\n              </Link>\n            ))}\n          </div>          </div>        </div>\n      </div>\n\n      {/* Section Recommandations - Positionnée avant les cartes de catégories */}\n      <div className=\"bg-white dark:bg-gray-900 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <React.Suspense fallback={<div className=\"text-center py-8\">Chargement des recommandations...</div>}>\n            <ProductRecommendations />\n          </React.Suspense>\n        </div>\n      </div>\n\n      {/* Section des cartes produits */}\n      <div className=\"bg-white dark:bg-gray-900 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Carte Électronique */}\n            <div className={`bg-gradient-to-br from-blue-200 via-blue-300 to-orange-300 rounded-xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-3 hover:rotate-1 cursor-pointer group relative ${visibleCards >= 1 ? ": "navigation.categoryicondivspanc",
  "\n                >\n                  <MessageSquare className=": "forms.messagesquareclassna",
  "\n                className={`${isActive('/products')\n                  ? 'text-orange-200 font-semibold'\n                  : 'text-white hover:text-orange-200'} \n                  transition-colors text-sm font-medium font-reading`}\n              >\n                {t('discover')}\n              </Link>\n              {/* Onglet Conteneurs visible uniquement pour les fournisseurs connectés */}\n              {user && user.role === 'supplier' && (\n                <Link\n                  to=": "forms.classnameisactivepro",
  "\n              label={t('email')}\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              placeholder={t('emailPlaceholder')}\n              disabled={isLoading}\n            />\n\n            <Select\n              label={t('accountType')}\n              value={role}\n              onChange={(e) => setRole(e.target.value as UserRole)}\n              options={[\n                { value: 'customer', label: t('role.customer') },\n                { value: 'supplier', label: t('role.supplier') },\n                { value: 'influencer', label: t('role.influencer') } // Influenceur affiché mais pas sourceur\n              ]}\n              disabled={isLoading}\n            />\n\n            <div className=": "auth.labeltemailvalueemai",
  "\n            style={{\n              background: 'radial-gradient(circle, rgba(255, 154, 0, 0.9) 0%, rgba(255, 167, 38, 0.7) 40%, transparent 70%)',\n              filter: 'blur(1px)'\n            }}\n          ></div>\n\n          {/* Montagnes en couches (optionnel, peut être gardé pour l'effet artistique) */}\n          <svg className=": "navigation.stylebackgroundradia",
  "\n            }}\n          ></div>\n\n          {/* Montagnes en couches (optionnel, peut être gardé pour l": "common.divmontagnesencouche1",
  "\n      };\n    }\n  }\n\n  // Nouvelles méthodes CRUD pour la gestion des utilisateurs\n\n  /**\n   * Récupère tous les utilisateurs (admin uniquement)\n   *": "admin.nouvellesmethodescru1",
  "\n      };\n    }\n  }\n\n  // Nouvelles méthodes CRUD pour la gestion des utilisateurs\n\n  /**\n   * Récupère tous les utilisateurs (admin uniquement)\n   */\n  async getAllUsers(): Promise<User[]> {\n    try {\n      const usersRef = collection(db, ": "admin.nouvellesmethodescru2",
  "\n      };\n    }\n  }\n\n  async signInWithGoogle() {\n    try {\n      const provider = new GoogleAuthProvider();\n      const result = await signInWithPopup(auth, provider);\n      const firebaseUser = result.user;\n\n      // Vérifier si l": "admin.asyncsigninwithgoogl1",
  "\n  ];\n\n  // Détecter si l": "common.detectersil1",
  "\n}) => {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-700 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Vérification des permissions...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Navigate to={redirectTo} replace />;\n  }\n\n  if (!allowedRoles.includes(user.role)) {\n    // Redirection intelligente basée sur le rôle de l": "forms.constuserloadingusea",
  "\r\n                                                        >\r\n                                                            Définir par défaut\r\n                                                        <": "common.definirpardefaut",
  "\r\n                                                    }`}\r\n                                            >\r\n                                                <div className=\"text-sm font-medium mb-1\">{template.name}</div>\r\n                                                <div className=\"text-xs text-gray-500\">{template.description}</div>\r\n                                                <div className=\"flex space-x-1 mt-2\">\r\n                                                    <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: template.primaryColor }} />\r\n                                                    <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: template.secondaryColor }} />\r\n                                                    <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: template.accentColor }} />\r\n                                                </div>\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Couleurs prédéfinies */}\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n                                        Palettes de couleurs\r\n                                    </label>\r\n                                    <div className=\"grid grid-cols-3 gap-3\">\r\n                                        {colorPresets.map((preset, index) => (\r\n                                            <button\r\n                                                key={index}\r\n                                                onClick={() => updateCardData({\r\n                                                    primaryColor: preset.primary,\r\n                                                    secondaryColor: preset.secondary,\r\n                                                    accentColor: preset.accent\r\n                                                })}\r\n                                                className=\"p-3 rounded-lg border border-gray-200 dark:border-gray-600 hover:border-gray-300 transition-colors\"\r\n                                            >\r\n                                                <div className=\"text-xs font-medium mb-2\">{preset.name}</div>\r\n                                                <div className=\"flex space-x-1\">\r\n                                                    <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: preset.primary }} />\r\n                                                    <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: preset.secondary }} />\r\n                                                    <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: preset.accent }} />\r\n                                                </div>\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Couleurs personnalisées */}\r\n                                <div className=\"grid grid-cols-2 gap-4\">\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                            Couleur primaire\r\n                                        </label>\r\n                                        <div className=\"flex items-center space-x-2\">\r\n                                            <input\r\n                                                type=\"color\"\r\n                                                value={cardData.primaryColor}\r\n                                                onChange={(e) => updateCardData({ primaryColor: e.target.value })}\r\n                                                className=\"w-12 h-10 rounded border border-gray-300\"\r\n                                            />\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                value={cardData.primaryColor}\r\n                                                onChange={(e) => updateCardData({ primaryColor: e.target.value })}\r\n                                                className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                            Couleur secondaire\r\n                                        </label>\r\n                                        <div className=\"flex items-center space-x-2\">\r\n                                            <input\r\n                                                type=\"color\"\r\n                                                value={cardData.secondaryColor}\r\n                                                onChange={(e) => updateCardData({ secondaryColor: e.target.value })}\r\n                                                className=\"w-12 h-10 rounded border border-gray-300\"\r\n                                            />\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                value={cardData.secondaryColor}\r\n                                                onChange={(e) => updateCardData({ secondaryColor: e.target.value })}\r\n                                                className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"grid grid-cols-2 gap-4\">\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                            Couleur d": "navigation.divclassnametextsmfo",
  "\r\n                                                >\r\n                                                    Modifier\r\n                                                <": "forms.modifier",
  "\r\n                                                >\r\n                                                    {variant}\r\n                                                </span>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Détails du produit *": "ecommerce.variantspandivdivdiv",
  "\r\n                                                >\r\n                                                    {variant}\r\n                                                </span>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Détails du produit */}\r\n                                <div>\r\n                                    <h3 className=": "forms.variantspandivdivdiv",
  "\r\n                                                }`}\r\n                                        />\r\n                                    ))}\r\n                                    <span className=\"text-lg font-semibold text-gray-900 dark:text-white ml-2\">\r\n                                        {product.rating}\r\n                                    </span>\r\n                                </div>\r\n                                <span className=\"text-gray-500 dark:text-gray-400\">\r\n                                    ({product.reviews} avis)\r\n                                </span>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Prix */}\r\n                        <div className=\"flex items-center space-x-4\">\r\n                            <span className=\"text-4xl font-bold text-blue-600 dark:text-blue-400\">\r\n                                {product.price}€\r\n                            </span>\r\n                            {product.originalPrice && (\r\n                                <span className=\"text-2xl text-gray-500 line-through\">\r\n                                    {product.originalPrice}€\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* Description */}\r\n                        {product.description && (\r\n                            <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\r\n                                {product.description}\r\n                            </p>\r\n                        )}\r\n\r\n                        {/* Caractéristiques */}\r\n                        {product.features && (\r\n                            <div>\r\n                                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\r\n                                    Caractéristiques principales\r\n                                </h3>\r\n                                <div className=\"flex flex-wrap gap-2\">\r\n                                    {product.features.map((feature) => (\r\n                                        <span\r\n                                            key={feature}\r\n                                            className=\"bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 px-3 py-1.5 rounded-lg text-sm font-medium\"\r\n                                        >\r\n                                            {feature}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Quantité et Actions */}\r\n                        <div className=\"space-y-4\">\r\n                            {/* Sélecteur de quantité */}\r\n                            <div className=\"flex items-center space-x-4\">\r\n                                <span className=\"text-lg font-medium text-gray-900 dark:text-white\">Quantité:</span>\r\n                                <div className=\"flex items-center border border-gray-300 dark:border-gray-600 rounded-lg\">\r\n                                    <button\r\n                                        onClick={() => handleQuantityChange(-1)}\r\n                                        className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\r\n                                    >\r\n                                        <Minus className=\"h-4 w-4\" />\r\n                                    </button>\r\n                                    <span className=\"px-4 py-2 text-lg font-semibold\">{quantity}</span>\r\n                                    <button\r\n                                        onClick={() => handleQuantityChange(1)}\r\n                                        className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\r\n                                    >\r\n                                        <Plus className=\"h-4 w-4\" />\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Boutons d": "forms.spanclassnametextlgf",
  "\r\n                                            value={cardData.contactPerson}\r\n                                            onChange={(e) => updateCardData({ contactPerson: e.target.value })}\r\n                                            className=": "forms.valuecarddatacontact",
  "\r\n                                            }`}\r\n                                    >\r\n                                        <img src={img} alt={`${product.name} ${index + 1}`} className=\"w-full h-full object-cover\" />\r\n                                    </button>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Section Détails */}\r\n                    <div className=\"space-y-6\">\r\n                        {/* En-tête produit */}\r\n                        <div>\r\n                            {/* Badges */}\r\n                            <div className=\"flex space-x-2 mb-3\">\r\n                                {product.isNew && (\r\n                                    <span className=\"bg-green-100 text-green-800 text-sm px-3 py-1 rounded-full\">\r\n                                        ✨ Nouveau\r\n                                    </span>\r\n                                )}\r\n                                {product.isPopular && (\r\n                                    <span className=\"bg-orange-100 text-orange-800 text-sm px-3 py-1 rounded-full\">\r\n                                        🔥 Populaire\r\n                                    </span>\r\n                                )}\r\n                                {product.discount && (\r\n                                    <span className=\"bg-red-100 text-red-800 text-sm px-3 py-1 rounded-full\">\r\n                                        -{product.discount}% OFF\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n\r\n                            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n                                {product.name}\r\n                            </h1>\r\n                            <p className=\"text-xl text-gray-600 dark:text-gray-400 mb-1\">{product.brand}</p>\r\n                            <p className=\"text-blue-600 dark:text-blue-400 font-medium\">{product.category}</p>\r\n                        </div>\r\n\r\n                        {/* Rating */}\r\n                        {product.rating && (\r\n                            <div className=\"flex items-center space-x-3\">\r\n                                <div className=\"flex items-center space-x-1\">\r\n                                    {[...Array(5)].map((_, i) => (\r\n                                        <Star\r\n                                            key={i}\r\n                                            className={`h-5 w-5 ${i < Math.floor(product.rating!)\r\n                                                ? ": "forms.imgsrcimgaltproductn",
  "\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Grille de produits *": "ecommerce.divdivdivdivdivdivgr2",
  "\r\n                                        >\r\n                                            <Eye size={18} />\r\n                                        </button>\r\n                                    </div>\r\n\r\n                                    {/* Badge de réduction *": "common.eyesize18buttondivba2",
  "\r\n                                        >\r\n                                            <Eye size={18} />\r\n                                        </button>\r\n                                    </div>\r\n\r\n                                    {/* Badge de réduction */}\r\n                                    {hasDiscount && (\r\n                                        <div className=": "forms.eyesize18buttondivba2",
  "\r\n                                        >\r\n                                            {feature}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Quantité et Actions *": "common.featurespandivdivqua",
  "\r\n                                        >\r\n                                            {feature}\r\n                                        </span>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Quantité et Actions */}\r\n                        <div className=": "forms.featurespandivdivqua",
  "\r\n                                        }`}\r\n                                >\r\n                                    <img\r\n                                        src={image.url}\r\n                                        alt={image.alt}\r\n                                        className=\"w-full h-20 object-cover\"\r\n                                    />\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Informations produit */}\r\n                    <div className=\"space-y-6\">\r\n                        {/* En-tête produit */}\r\n                        <div>\r\n                            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\r\n                                {product.name}\r\n                            </h1>\r\n\r\n                            <div className=\"flex items-center gap-4 mb-4\">\r\n                                <div className=\"text-3xl font-bold text-blue-600 dark:text-blue-400\">\r\n                                    {product.price.toFixed(2)}€<span className=\"text-lg text-gray-500 dark:text-gray-400\">/unité</span>\r\n                                </div>\r\n                                {hasDiscount && (\r\n                                    <div className=\"px-3 py-1 bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300 rounded-full text-sm font-semibold\">\r\n                                        -{product.discount!.percentage}% dès {product.discount!.minQty} pcs\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                            <p className=\"text-gray-600 dark:text-gray-400 text-lg leading-relaxed\">\r\n                                {product.description}\r\n                            </p>\r\n                        </div>\r\n\r\n                        {/* Fournisseur */}\r\n                        <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 border border-gray-200 dark:border-gray-700\">\r\n                            <div className=\"flex items-center gap-4\">\r\n                                {product.supplier.avatar && (\r\n                                    <img\r\n                                        src={product.supplier.avatar}\r\n                                        alt={product.supplier.name}\r\n                                        className=\"w-12 h-12 rounded-full object-cover\"\r\n                                    />\r\n                                )}\r\n                                <div className=\"flex-1\">\r\n                                    <div className=\"flex items-center gap-2 mb-1\">\r\n                                        <h3 className=\"font-semibold text-gray-900 dark:text-white\">\r\n                                            {product.supplier.name}\r\n                                        </h3>\r\n                                        {product.supplier.verified && (\r\n                                            <div className=\"flex items-center gap-1 px-2 py-1 bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 rounded-full text-xs\">\r\n                                                <Shield size={12} />\r\n                                                Vérifié\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400\">\r\n                                        <div className=\"flex items-center gap-1\">\r\n                                            <MapPin size={14} />\r\n                                            {product.supplier.location}\r\n                                        </div>\r\n                                        <div className=\"flex items-center gap-1\">\r\n                                            <Star size={14} className=\"text-yellow-400 fill-current\" />\r\n                                            {product.supplier.rating}\r\n                                        </div>\r\n                                        <div className=\"flex items-center gap-1\">\r\n                                            <Clock size={14} />\r\n                                            Répond en {product.supplier.responseTime}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Variantes */}\r\n                        {Object.entries(variantsByType).map(([type, variants]) => (\r\n                            <div key={type} className=\"space-y-3\">\r\n                                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white capitalize\">\r\n                                    {type === ": "forms.imgsrcimageurlaltima",
  "\r\n                                    />\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Informations produit *": "ecommerce.buttondivdivinformat",
  "\r\n                                    />\r\n                                </svg>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Performances récentes *": "common.svgdivdivperformance1",
  "\r\n                                    />\r\n                                </svg>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Performances récentes */}\r\n                <div className=": "forms.svgdivdivperformance",
  "\r\n                                    onClick={() => setShowContactModal(false)}\r\n                                    className=": "forms.onclicksetshowcontac",
  "\r\n                                    onClick={closeQuickView}\r\n                                >\r\n                                    Voir détails\r\n                                <": "common.onclickclosequickvie1",
  "\r\n                                    onClick={closeQuickView}\r\n                                >\r\n                                    Voir détails\r\n                                </Link>\r\n                                <button\r\n                                    onClick={() => handleAddToQuote(selectedProduct)}\r\n                                    className=": "forms.onclickclosequickvie1",
  "\r\n                                    }`}\r\n                                style={{ transitionDelay: `${(index + 2) * 100}ms` }}\r\n                            >\r\n                                <div className={`inline-flex items-center justify-center w-16 h-16 rounded-full bg-gray-100 dark:bg-gray-700 mb-4 ${feature.color}`}>\r\n                                    <feature.icon className=\"w-8 h-8\" />\r\n                                </div>\r\n                                <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">{feature.title}</h3>\r\n                                <p className=\"text-gray-600 dark:text-gray-400\">{feature.description}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* CTA Section */}\r\n            <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\r\n                <div className=\"container mx-auto px-4 py-16 text-center\">\r\n                    <h2 className=\"text-3xl lg:text-4xl font-bold mb-4\">\r\n                        Prêt à Commencer ?\r\n                    </h2>\r\n                    <p className=\"text-xl mb-8 opacity-90\">\r\n                        Rejoignez des milliers d": "forms.styletransitiondelay",
  "\r\n                                    }`}\r\n                                style={{ transitionDelay: `${index * 100}ms` }}\r\n                            >\r\n                                <div className=\"text-4xl mb-2\">{stat.icon}</div>\r\n                                <div className=\"text-3xl font-bold text-gray-900 dark:text-white mb-1\">{stat.value}</div>\r\n                                <div className=\"text-gray-600 dark:text-gray-400\">{stat.label}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Categories Section */}\r\n            <div className=\"container mx-auto px-4 py-16\">\r\n                <div className=\"text-center mb-12\">\r\n                    <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 dark:text-white mb-4\">\r\n                        Catégories Populaires\r\n                    </h2>\r\n                    <p className=\"text-xl text-gray-600 dark:text-gray-300\">\r\n                        Découvrez nos catégories les plus demandées\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n                    {categories.map((category, index) => (\r\n                        <Link\r\n                            key={category.id}\r\n                            to={`/category/${category.id}`}\r\n                            className={`group relative overflow-hidden rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:scale-105 ${visibleCards > index ? ": "forms.styletransitiondelay1",
  "\r\n                                >\r\n                                    <LogOut size={16} />\r\n                                    Déconnexion\r\n                                <": "auth.logoutsize16deconnex1",
  "\r\n                                >\r\n                                    <MessageCircle size={16} />\r\n                                    Contacter\r\n                                <": "common.messagecirclesize16c",
  "\r\n                                >\r\n                                    <MessageCircle size={18} />\r\n                                    Contacter\r\n                                </button>\r\n\r\n                                <button\r\n                                    onClick={() => {\r\n                                        toggleFavorite(product.id!);\r\n                                        const isFav = isFavorite(product.id!);\r\n                                        showToast(\r\n                                            isFav ? `${product.name} retiré des favoris` : `${product.name} ajouté aux favoris`,\r\n                                            ": "forms.messagecirclesize18c1",
  "\r\n                                >\r\n                                    <MessageCircle size={18} />\r\n                                    Contacter\r\n                                </button>\r\n\r\n                                <button\r\n                                    onClick={() => {\r\n                                        toggleFavorite(product.id!);\r\n                                        const isFav = isFavorite(product.id!);\r\n                                        showToast(\r\n                                            isFav ? `${product.name} retiré des favoris` : `${product.name} ajouté aux favoris`,\r\n                                            'success',\r\n                                            'heart'\r\n                                        );\r\n                                    }}\r\n                                    className={`py-3 rounded-xl font-semibold border transition-all duration-300 flex items-center justify-center gap-2 ${isFavorite(product.id!)\r\n                                        ? 'bg-red-50 dark:bg-red-900/30 text-red-600 dark:text-red-400 border-red-300 dark:border-red-600'\r\n                                        : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600'\r\n                                        }`}\r\n                                >\r\n                                    <Heart size={18} fill={isFavorite(product.id!) ? 'currentColor' : 'none'} />\r\n                                    {isFavorite(product.id!) ? 'Ajouté' : 'Favoris'}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Description détaillée */}\r\n                <div className=": "forms.messagecirclesize18c2",
  "\r\n                                >\r\n                                    Ajouter au devis\r\n                                <": "forms.ajouteraudevis1",
  "\r\n                                >\r\n                                    Créer ma première carte\r\n                                <": "ecommerce.creermapremierecarte1",
  "\r\n                                >\r\n                                    Créer ma première carte\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <>\r\n                        {viewMode === 'grid' ? (\r\n                            <div className=": "forms.creermapremierecarte",
  "\r\n                                >\r\n                                    Réinitialiser\r\n                                <": "common.reinitialiser",
  "\r\n                                >\r\n                                    Réinitialiser\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div className=": "forms.reinitialiserbuttond",
  "\r\n                                >\r\n                                    Voir détail\r\n                                <": "common.voirdetail",
  "\r\n                                >\r\n                                    Voir détail\r\n                                </Link>\r\n                                <Link\r\n                                    to=": "common.voirdetaillinklinkto",
  "\r\n                                }`}\r\n                            style={{ transitionDelay: `${index * 100}ms` }}\r\n                        >\r\n                            <div className={`absolute inset-0 bg-gradient-to-br ${category.color} opacity-90`}></div>\r\n                            <div className=\"relative p-8 text-white\">\r\n                                <div className=\"text-6xl mb-4\">{category.icon}</div>\r\n                                <h3 className=\"text-2xl font-bold mb-2\">{category.name}</h3>\r\n                                <p className=\"opacity-90\">Découvrir les produits</p>\r\n                            </div>\r\n                        </Link>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Features Section */}\r\n            <div className=\"bg-white dark:bg-gray-800 shadow-xl\">\r\n                <div className=\"container mx-auto px-4 py-16\">\r\n                    <div className=\"text-center mb-12\">\r\n                        <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 dark:text-white mb-4\">\r\n                            Pourquoi Nous Choisir\r\n                        </h2>\r\n                        <p className=\"text-xl text-gray-600 dark:text-gray-300\">\r\n                            Les avantages qui font la différence\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\r\n                        {features.map((feature, index) => (\r\n                            <div\r\n                                key={index}\r\n                                className={`text-center transition-all duration-500 ${visibleCards > index + 2 ? ": "forms.styletransitiondelay2",
  "\r\n                            >\r\n                                Mot de passe oublié ?\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n                {/* Informations de sécurité *": "auth.motdepasseoubliebutt1",
  "\r\n                            >\r\n                                Mot de passe oublié ?\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n                {/* Informations de sécurité */}\r\n                <div className=": "auth.motdepasseoubliebutt2",
  "\r\n                            >\r\n                                {tag}\r\n                            </span>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Produits similaires *": "ecommerce.tagspandivdivproduit",
  "\r\n                          >\r\n                            <Trash2 size={16} />\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n        </div>        {/* Messages *": "common.trash2size16buttondi",
  "\r\n                          onClick={() => updateOrderStatus(order.id, 'shipped')}\r\n                        >\r\n                          Expédier\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal détails commande */}\r\n      {selectedOrder && (\r\n        <div className=": "forms.onclickupdateorderst",
  "\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      <div className=\"mt-2 text-center\">\r\n                        <div className=\"text-xs font-medium text-gray-900 dark:text-white\">\r\n                          {formatPrice(data.revenue)}\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n                          {data.month}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Orders Chart */}\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center justify-between mb-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                Évolution des Commandes\r\n              </h3>\r\n              <ShoppingBag className=\"h-5 w-5 text-gray-400\" />\r\n            </div>\r\n            {loading ? (\r\n              <div className=\"h-64 flex items-center justify-center\">\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600\"></div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"h-64\">\r\n                <div className=\"flex items-end justify-between h-full space-x-2\">\r\n                  {chartData.map((data, index) => (\r\n                    <div key={index} className=\"flex-1 flex flex-col items-center\">\r\n                      <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-t relative\">\r\n                        <div\r\n                          className=\"bg-gradient-to-t from-blue-500 to-blue-400 rounded-t transition-all duration-500\"\r\n                          style={{\r\n                            height: `${(data.orders / maxOrders) * 200}px`,\r\n                            minHeight: ": "forms.divdivclassnamemt2te",
  "\r\n                        >\r\n                            Effacer les filtres\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Modal aperçu rapide *": "common.effacerlesfiltresbut1",
  "\r\n                        >\r\n                            Effacer les filtres\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Modal aperçu rapide */}\r\n            {showQuickView && selectedProduct && (\r\n                <div\r\n                    className=": "forms.effacerlesfiltresbut1",
  "\r\n                        >\r\n                            Retour à l": "navigation.retoural1",
  "\r\n                        >\r\n                            Retour à l'accueil\r\n                        </Link>\r\n\r\n                        <p className=": "navigation.retouralaccueillinkp1",
  "\r\n                        >\r\n                            Réinitialiser\r\n                        <": "common.reinitialiser1",
  "\r\n                        >\r\n                            Réinitialiser\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=": "forms.reinitialiserbuttond1",
  "\r\n                        onClick={() => handleRemoveFile(url)}\r\n                      >\r\n                        Supprimer\r\n                      <": "forms.onclickhandleremovef",
  "\r\n                        onClick={() => {\r\n                          setCurrency(code as UserCurrency);\r\n                          setIsCurrencyMenuOpen(false);\r\n                        }}\r\n                        className={`${\r\n                          currency === code ? 'bg-gray-100 dark:bg-gray-600' : ''\r\n                        } block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 w-full text-left hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none`}\r\n                      >\r\n                        {name}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Notifications - séparé complètement */}\r\n              {user && (\r\n                <button\r\n                  type=": "navigation.onclicksetcurrencyco",
  "\r\n                        } block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 w-full text-left hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none`}\r\n                      >\r\n                        {name}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Notifications - séparé complètement *": "forms.blockpx4py2textsmtex1",
  "\r\n                        } block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 w-full text-left hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none`}\r\n                      >\r\n                        {name}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Notifications - séparé complètement */}\r\n              {user && (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleNotificationClick}\r\n                  className=\"flex items-center space-x-2 text-white hover:text-orange-200 transition-colors cursor-pointer relative p-2 rounded focus:outline-none focus:ring-2 focus:ring-orange-300\"\r\n                  title=\"Notifications\"\r\n                >\r\n                  <Bell className=\"h-5 w-5\" />\r\n                  {unreadCount > 0 && (\r\n                    <span className=\"bg-orange-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold animate-pulse absolute -top-1 -right-1\">\r\n                      {unreadCount > 99 ? ": "forms.blockpx4py2textsmtex2",
  "\r\n                        } block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 w-full text-left hover:bg-gray-100 dark:hover:bg-gray-600`}\r\n                    >\r\n                      {name}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Notifications - Affiché uniquement pour les utilisateurs connectés *": "forms.blockpx4py2textsmtex4",
  "\r\n                        } block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 w-full text-left hover:bg-gray-100 dark:hover:bg-gray-600`}\r\n                    >\r\n                      {name}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Notifications - Affiché uniquement pour les utilisateurs connectés */}\r\n            {user && (\r\n              <div\r\n                className=\"flex items-center space-x-2 text-white hover:text-orange-200 transition-colors cursor-pointer relative p-2\"\r\n                onClick={handleNotificationToggle}\r\n                title=\"Notifications\"\r\n              >\r\n                <Bell className=\"h-5 w-5\" />\r\n                {unreadCount > 0 && (\r\n                  <span className=\"bg-orange-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold animate-pulse absolute -top-2 -right-2\">\r\n                    {unreadCount > 99 ? ": "forms.blockpx4py2textsmtex5",
  "\r\n                        }`}>\r\n                          {t(`containers.status.${container.status}`)}\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\r\n                        {new Date(container.estimatedDepartureDate).toLocaleDateString()}\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                        <div className=\"flex space-x-2 justify-end\">\r\n                          <button\r\n                            onClick={() => handleEditContainer(container)}\r\n                            className=\"text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300\"\r\n                          >\r\n                            <Edit className=\"w-4 h-4\" />\r\n                          </button>\r\n                          <button\r\n                            onClick={() => handleDeleteContainer(container.id)}\r\n                            className=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300\"\r\n                          >\r\n                            <Trash2 className=\"w-4 h-4\" />\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal de création/édition */}\r\n      {showCreateModal && (\r\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-50\">\r\n          <div className=\"bg-white dark:bg-gray-800 p-8 rounded-lg shadow-xl w-full max-w-2xl mx-4\">\r\n            <h3 className=\"text-xl font-bold mb-6 text-gray-900 dark:text-white\">\r\n              {editingContainer ? ": "forms.tcontainersstatuscon",
  "\r\n                      >\r\n                        <Download size={14} />\r\n                        Télécharger\r\n                      <": "common.downloadsize14telech",
  "\r\n                      >\r\n                        <Download size={14} />\r\n                        Télécharger\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {error && (\r\n          <div className=": "forms.downloadsize14telech",
  "\r\n                      >\r\n                        <MessageSquare size={14} ": "common.messagesquaresize14",
  "\r\n                      >\r\n                        Demander la suppression\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Paramètres de confidentialité *": "admin.demanderlasuppressio1",
  "\r\n                      >\r\n                        Demander la suppression\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Paramètres de confidentialité */}\r\n                  <div className=": "forms.demanderlasuppressio",
  "\r\n                      >\r\n                        Voir les détails\r\n                      <": "common.voirlesdetails",
  "\r\n                      >\r\n                        Voir les détails\r\n                      </button>\r\n                    </div>\r\n\r\n                    <div className=": "forms.voirlesdetailsbutton",
  "\r\n                    />\r\n                  ) : (\r\n                    getFileIcon(uploadFile.file)\r\n                  )}\r\n                </div>\r\n\r\n                {/* Informations du fichier *": "common.getfileiconuploadfil",
  "\r\n                    >\r\n                        <ArrowLeft size={20} />\r\n                        Retour aux produits\r\n                    <": "navigation.arrowleftsize20retou",
  "\r\n                    >\r\n                        Gérer mes cartes →\r\n                    <": "ecommerce.gerermescartes",
  "\r\n                    >\r\n                        Gérer mes cartes →\r\n                    </button>\r\n                )}\r\n            </div>\r\n\r\n            {!isOwner && (\r\n                <div className=": "forms.gerermescartesbutton",
  "\r\n                    >\r\n                        Retour aux produits\r\n                    <": "navigation.retourauxproduits",
  "\r\n                    >\r\n                        Réessayer\r\n                    <": "common.reessayer2",
  "\r\n                    >\r\n                        Réessayer\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=": "forms.reessayerbuttondivdi2",
  "\r\n                    >\r\n                        Réinitialiser la recherche\r\n                    <": "common.reinitialiserlareche1",
  "\r\n                    >\r\n                        {/* Image et badge vérifié *": "common.imageetbadgeverifie",
  "\r\n                    >\r\n                        {/* Image et badge vérifié */}\r\n                        <div className=": "forms.imageetbadgeverified",
  "\r\n                    >\r\n                        ← Retour à l": "navigation.retoural2",
  "\r\n                    >\r\n                      <KeyRound size={16} />\r\n                      Mettre à jour le mot de passe\r\n                    <": "auth.keyroundsize16mettre",
  "\r\n                    >\r\n                      <KeyRound size={16} />\r\n                      Mettre à jour le mot de passe\r\n                    </button>\r\n                    <button className=": "auth.keyroundsize16mettre1",
  "\r\n                    >\r\n                      <MessageSquare size={14} ": "common.messagesquaresize141",
  "\r\n                    >\r\n                      <MessageSquare size={14} />\r\n                      Répondre\r\n                    <": "common.messagesquaresize14r",
  "\r\n                    >\r\n                      <MessageSquare size={14} />\r\n                      Répondre\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n\r\n        {error && (\r\n          <div className=": "forms.messagesquaresize14r",
  "\r\n                    >\r\n                      <X size={16} />\r\n                      Désactiver 2FA\r\n                    <": "common.xsize16desactiver2fa",
  "\r\n                    >\r\n                      <X size={16} />\r\n                      Désactiver 2FA\r\n                    </button>\r\n                    <button className=": "forms.xsize16desactiver2fa",
  "\r\n                    onClick={(e) => e.target === e.currentTarget && setShowContactForm(false)}\r\n                >\r\n                    <div className=": "forms.onclickeetargetecurr",
  "\r\n                    style={{ height: itemHeight - 8 }}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n});\r\n\r\nListSkeleton.displayName = 'ListSkeleton';\r\n\r\nfunction VirtualizedList<T extends Record<string, any>>({\r\n    items,\r\n    height,\r\n    itemHeight,\r\n    renderItem,\r\n    searchFields = [],\r\n    onSearch,\r\n    filterComponent,\r\n    emptyMessage = 'Aucun élément trouvé',\r\n    loading = false\r\n}: VirtualizedListProps<T>) {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 300);\r\n\r\n    // Filtrage des items basé sur la recherche\r\n    const filteredItems = useMemo(() => {\r\n        if (!debouncedSearchTerm || searchFields.length === 0) {\r\n            return items;\r\n        }\r\n\r\n        return items.filter(item =>\r\n            searchFields.some(field => {\r\n                const fieldValue = item[field];\r\n                return fieldValue &&\r\n                    String(fieldValue).toLowerCase().includes(debouncedSearchTerm.toLowerCase());\r\n            })\r\n        );\r\n    }, [items, debouncedSearchTerm, searchFields]);\r\n\r\n    // Handler pour la recherche\r\n    const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setSearchTerm(value);\r\n        if (onSearch) {\r\n            onSearch(value);\r\n        }\r\n    }, [onSearch]);\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=": "navigation.styleheightitemheigh",
  "\r\n                    });\r\n                    console.log(`❌ ${userData.email}: ${result.error}`);\r\n                }\r\n\r\n                // Pause entre les créations pour éviter la surcharge\r\n                await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n            } catch (error: any) {\r\n                failed.push({\r\n                    email: userData.email,\r\n                    error: error.message || ": "auth.consoleloguserdataem1",
  "\r\n                    }`} />\r\n                </div>\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n              <div>\r\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">Alertes de sécurité</h4>\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Notifications en temps réel</p>\r\n              </div>\r\n              <label className=\"flex items-center cursor-pointer\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={settings.securityAlertsEnabled}\r\n                  onChange={(e) => updateSetting(": "forms.divlabeldivdivclassn",
  "\r\n                    }`} />\r\n                </div>\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Sessions administrateur */}\r\n      <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl border border-purple-200 dark:border-purple-800 p-6\">\r\n        <div className=\"flex items-center gap-3 mb-6\">\r\n          <div className=\"p-2 bg-purple-100 dark:bg-purple-900 rounded-lg\">\r\n            <Users className=\"w-5 h-5 text-purple-600 dark:text-purple-400\" />\r\n          </div>\r\n          <h3 className=\"text-lg font-semibold text-purple-900 dark:text-purple-200\">Sessions administrateur</h3>\r\n        </div>\r\n\r\n        <div className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n              Délai d": "forms.divlabeldivdivdivdiv",
  "\r\n                    }}\r\n                  />\r\n                </div>\r\n                <span className=\"text-sm text-gray-600 dark:text-gray-400 w-12 text-right\">\r\n                  {distribution[rating - 1]}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filters */}        <div className=\"bg-white dark:bg-gray-700 rounded-lg shadow p-6\">\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-300\" size={16} />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Rechercher dans les avis...\"\r\n                  value={searchTerm}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-500 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-600 dark:placeholder-gray-400\"\r\n                />\r\n              </div>\r\n            </div>            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={ratingFilter}\r\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setRatingFilter(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-500 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n              >\r\n                <option value=\"\">Toutes les notes</option>\r\n                <option value=\"5\">5 étoiles</option>\r\n                <option value=\"4\">4 étoiles</option>\r\n                <option value=\"3\">3 étoiles</option>\r\n                <option value=\"2\">2 étoiles</option>\r\n                <option value=\"1\">1 étoile</option>\r\n              </select>\r\n            </div>            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={verifiedFilter}\r\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setVerifiedFilter(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-500 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n              >\r\n                <option value=\"\">Tous les avis</option>\r\n                <option value=\"verified\">Vérifiés</option>\r\n                <option value=\"unverified\">Non vérifiés</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Reviews List */}\r\n        <div className=\"space-y-6\">\r\n          {loading ? (\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-8 text-center\">\r\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\r\n              <p className=\"mt-2 text-gray-500 dark:text-gray-400\">Chargement...</p>\r\n            </div>\r\n          ) : (\r\n            filteredReviews.map((review) => (\r\n              <div key={review.id} className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n                {/* Review Header */}\r\n                <div className=\"flex items-start justify-between mb-4\">\r\n                  <div className=\"flex items-start\">\r\n                    <div className=\"h-10 w-10 rounded-full bg-gradient-to-r from-blue-400 to-blue-600 flex items-center justify-center mr-3\">\r\n                      <span className=\"text-white font-medium text-sm\">\r\n                        {review.customerName.charAt(0).toUpperCase()}\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <h3 className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                          {review.customerName}\r\n                        </h3>\r\n                        {review.isVerified && (\r\n                          <span className=\"bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100 text-xs px-2 py-1 rounded-full\">\r\n                            Vérifié\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <div className=\"flex\">{renderStars(review.rating, 14)}</div>\r\n                        <span className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                          {review.rating}/5\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400\">\r\n                        <Package size={12} />\r\n                        {review.productName}\r\n                        <span>•</span>\r\n                        <Calendar size={12} />\r\n                        {formatDate(review.createdAt)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Review Content */}\r\n                <div className=\"mb-4\">\r\n                  <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n                    {review.title}\r\n                  </h4>\r\n                  <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\r\n                    {review.comment}\r\n                  </p>\r\n                </div>\r\n\r\n                {/* Helpful Votes */}\r\n                <div className=\"flex items-center gap-4 mb-4\">\r\n                  <div className=\"flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400\">\r\n                    <ThumbsUp size={14} />\r\n                    <span>{review.helpfulVotes} sur {review.totalVotes} trouvent cet avis utile</span>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Supplier Response */}\r\n                {review.hasResponse && review.response ? (\r\n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 mb-4\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <User size={16} className=\"text-blue-600\" />\r\n                      <span className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">\r\n                        Réponse du fournisseur\r\n                      </span>\r\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                        {formatDate(review.response.createdAt)}\r\n                      </span>\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                      {review.response.content}\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex justify-end\">\r\n                    <Button\r\n                      onClick={() => console.log(": "forms.divspanclassnametext",
  "\r\n                    }}\r\n                  >\r\n                    {pageProducts.map((product, index) => (\r\n                      <div key={product.id} className=\"px-3\">\r\n                        <ProductRecommendationCard product={product} index={startIndex + index} />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Boutons de navigation */}\r\n          {maxIndex > 0 && (\r\n            <>\r\n              <button\r\n                onClick={prevSlide}\r\n                className=\"absolute left-4 top-1/2 -translate-y-1/2 w-12 h-12 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center group hover:scale-110 border border-gray-200 dark:border-gray-600\"\r\n                aria-label=\"Produit précédent\"\r\n              >\r\n                <ChevronLeft className=\"w-6 h-6 text-gray-700 dark:text-gray-300 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors\" />\r\n              </button>\r\n              \r\n              <button\r\n                onClick={nextSlide}\r\n                className=\"absolute right-4 top-1/2 -translate-y-1/2 w-12 h-12 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center group hover:scale-110 border border-gray-200 dark:border-gray-600\"\r\n                aria-label=\"Produit suivant\"\r\n              >\r\n                <ChevronRight className=\"w-6 h-6 text-gray-700 dark:text-gray-300 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors\" />\r\n              </button>\r\n            </>\r\n          )}\r\n\r\n          {/* Indicateurs de pagination */}\r\n          {maxIndex > 0 && (\r\n            <div className=\"flex justify-center mt-8 space-x-2\">\r\n              {Array.from({ length: maxIndex + 1 }, (_, index) => (\r\n                <button\r\n                  key={index}\r\n                  onClick={() => goToSlide(index)}\r\n                  className={`w-3 h-3 rounded-full transition-all duration-300 ${\r\n                    index === currentIndex\r\n                      ? ": "navigation.pageproductsmapprodu",
  "\r\n                  />\r\n                </div>\r\n\r\n                {/* Case à cocher pour accepter la vérification *": "common.divcaseacocherpourac",
  "\r\n                  />\r\n                </div>\r\n\r\n                {/* Case à cocher pour accepter la vérification */}\r\n                <div className=": "forms.divcaseacocherpourac",
  "\r\n                  />\r\n                </div>\r\n\r\n                {/* Vidéo de présentation *": "common.divvideodepresentati",
  "\r\n                  />\r\n                </div>\r\n\r\n                {/* Vidéo de présentation */}\r\n                <div className=": "forms.divvideodepresentati",
  "\r\n                  checked={settings.notifications[item.key as keyof typeof settings.notifications] as boolean}\r\n                  onChange={(e) => handleInputChange(": "admin.checkedsettingsnotif1",
  "\r\n                  onChange={handleProfilePicChange}\r\n                />\r\n              </div>\r\n\r\n              {/* Informations utilisateur *": "admin.onchangehandleprofil",
  "\r\n                  }`}\r\n                  aria-label={`Aller à la page ${index + 1}`}\r\n                ": "common.arialabelalleralapag",
  "\r\n                  }`}\r\n                  aria-label={`Aller à la page ${index + 1}`}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Call to action */}\r\n        <div className=\"text-center mt-12 animate-fade-in-up\" style={{ animationDelay: ": "forms.arialabelalleralapag",
  "\r\n                  }`}\r\n                >\r\n                  {category.name}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Section des cartes produits *": "forms.categorynamebuttondi1",
  "\r\n                  }`} />\r\n              </div>\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n            <div>\r\n              <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">2FA obligatoire</h4>\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">Authentification à deux facteurs</p>\r\n            </div>\r\n            <label className=\"flex items-center cursor-pointer\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.twoFactorRequired}\r\n                onChange={(e) => updateSetting(": "forms.divlabeldivdivclassn1",
  "\r\n                  }`} />\r\n              </div>\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n            <div>\r\n              <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">CAPTCHA activé</h4>\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">Après échecs de connexion</p>\r\n            </div>\r\n            <label className=\"flex items-center cursor-pointer\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.captchaEnabled}\r\n                onChange={(e) => updateSetting(": "auth.divlabeldivdivclassn",
  "\r\n                  }`} />\r\n              </div>\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n            <div>\r\n              <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">Symboles requis</h4>\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">Au moins un caractère spécial</p>\r\n            </div>\r\n            <label className=\"flex items-center cursor-pointer\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.passwordRequireSymbols}\r\n                onChange={(e) => updateSetting(": "auth.divlabeldivdivclassn1",
  "\r\n                  }`} />\r\n              </div>\r\n            </label>\r\n          </div>\r\n\r\n          {settings.ipWhitelistEnabled && (\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                Adresses IP autorisées (une par ligne)\r\n              </label>\r\n              <textarea\r\n                value={settings.allowedIPs.join(": "forms.divlabeldivsettingsi",
  "\r\n                  }`} />\r\n              </div>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Contrôle d": "common.divlabeldivdivdivcon1",
  "\r\n                >\r\n                    <RefreshCw className={`h-4 w-4 ${isResetting ? 'animate-spin' : ''}`} />\r\n                    Réinitialisation Complète\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={handleCreateEssentials}\r\n                    disabled={isResetting || isDeleting || isCreating}\r\n                    className=": "forms.refreshcwclassnameh4",
  "\r\n                >\r\n                    <Sparkles className={`h-5 w-5 ${isRunning ? 'animate-spin' : ''}`} />\r\n                    Système Complet\r\n                    <span className=": "forms.sparklesclassnameh5w",
  "\r\n                >\r\n                    Aller à la page produits B2B\r\n                <": "ecommerce.alleralapageproduits1",
  "\r\n                >\r\n                    Se connecter comme Admin\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={createTestUser}\r\n                    disabled={loading || !auth.currentUser}\r\n                >\r\n                    Créer utilisateur test\r\n                <": "admin.seconnectercommeadmi1",
  "\r\n                >\r\n                    Se connecter comme Admin\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={createTestUser}\r\n                    disabled={loading || !auth.currentUser}\r\n                >\r\n                    Créer utilisateur test\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={logoutAdmin}\r\n                    disabled={loading}\r\n                    variant=": "auth.seconnectercommeadmi",
  "\r\n                >\r\n                    Se déconnecter\r\n                <": "common.sedeconnecter",
  "\r\n                >\r\n                    Se déconnecter\r\n                </Button>\r\n            </div>\r\n\r\n            {result && (\r\n                <div className=": "forms.sedeconnecterbuttond",
  "\r\n                >\r\n                    {isCreating ? 'Création...' : 'Créer Admin Par Défaut'}\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={createTestAdmins}\r\n                    disabled={isCreating}\r\n                    variant=": "admin.iscreatingcreationcr",
  "\r\n                >\r\n                    {isCreating ? 'Création...' : 'Créer Plusieurs Admins Test'}\r\n                </Button>\r\n            </div>\r\n\r\n            {/* Résultats */}\r\n            {results && (\r\n                <div className=": "forms.iscreatingcreationcr",
  "\r\n                >\r\n                    {isCreating ? 'Création...' : 'Créer ce Compte Admin'}\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={createDefaultAdmin}\r\n                    disabled={isCreating}\r\n                    variant=": "admin.iscreatingcreationcr1",
  "\r\n                >\r\n                    {loading ? 'Création...' : 'Créer Utilisateur (Test Direct)'}\r\n                </Button>\r\n            </div>\r\n\r\n            <p className=": "forms.loadingcreationcreer",
  "\r\n                >\r\n                    {loading ? 'Test...' : 'Test Connexion'}\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={testCreateUser}\r\n                    disabled={loading}\r\n                >\r\n                    {loading ? 'Création...' : 'Test Création'}\r\n                </Button>\r\n            </div>\r\n\r\n            {result && (\r\n                <div className=": "auth.loadingtesttestconne",
  "\r\n                >\r\n                    → Aller au profil\r\n                <": "common.allerauprofil",
  "\r\n                disabled={loading}\r\n              >\r\n                <Users size={16} />\r\n                Créer des utilisateurs de test\r\n              <": "admin.disabledloadingusers1",
  "\r\n                disabled={loading}\r\n              >\r\n                <Users size={16} />\r\n                Créer des utilisateurs de test\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=": "forms.disabledloadingusers",
  "\r\n                style={{ background: 'none', border: 'none', cursor: 'pointer' }}\r\n              >\r\n                {t('registerNow', 'Créer un compte')}\r\n              </button>\r\n            ) : (\r\n              <button \r\n                type=": "auth.stylebackgroundnoneb",
  "\r\n                }\r\n            }\r\n        ];\r\n\r\n        const result = await this.createProductionUsersBatch(essentialUsers);\r\n\r\n        // Créer la liste des identifiants pour affichage\r\n        const credentials = essentialUsers.map(user => ({\r\n            email: user.email,\r\n            password: user.password,\r\n            role: user.role,\r\n            name: user.name\r\n        }));\r\n\r\n        return {\r\n            ...result,\r\n            credentials\r\n        };\r\n    }\r\n\r\n    ": "auth.constresultawaitthis1",
  "\r\n                }\r\n            }\r\n        ];\r\n\r\n        const result = await this.createProductionUsersBatch(essentialUsers);\r\n\r\n        // Créer la liste des identifiants pour affichage\r\n        const credentials = essentialUsers.map(user => ({\r\n            email: user.email,\r\n            password: user.password,\r\n            role: user.role,\r\n            name: user.name\r\n        }));\r\n\r\n        return {\r\n            ...result,\r\n            credentials\r\n        };\r\n    }\r\n\r\n    /**\r\n     * S": "auth.constresultawaitthis2",
  "\r\n                });\r\n                console.error(`💥 Erreur critique ${userData.email}:`, error);\r\n            }\r\n        }\r\n\r\n        // Générer le résumé\r\n        const summary = await this.getUsersSummary();\r\n\r\n        console.log(`\\n📊 === RÉSUMÉ CRÉATION BATCH ===`);\r\n        console.log(`✅ Créés: ${created.length}`);\r\n        console.log(`❌ Échecs: ${failed.length}`);\r\n        console.log(`📈 Total système: ${summary.total} utilisateurs`);\r\n\r\n        return {\r\n            success: failed.length === 0,\r\n            created,\r\n            failed,\r\n            summary\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Créer les utilisateurs essentiels pour la production\r\n     *": "auth.consoleerrorerreurcr1",
  "\r\n                });\r\n                console.error(`💥 Erreur critique ${userData.email}:`, error);\r\n            }\r\n        }\r\n\r\n        // Générer le résumé\r\n        const summary = await this.getUsersSummary();\r\n\r\n        console.log(`\\n📊 === RÉSUMÉ CRÉATION BATCH ===`);\r\n        console.log(`✅ Créés: ${created.length}`);\r\n        console.log(`❌ Échecs: ${failed.length}`);\r\n        console.log(`📈 Total système: ${summary.total} utilisateurs`);\r\n\r\n        return {\r\n            success: failed.length === 0,\r\n            created,\r\n            failed,\r\n            summary\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Créer les utilisateurs essentiels pour la production\r\n     */\r\n    public async createEssentialProductionUsers(): Promise<{\r\n        success: boolean;\r\n        created: User[];\r\n        failed: Array<{ email: string; error: string }>;\r\n        credentials: Array<{ email: string; password: string; role: string; name: string }>;\r\n    }> {\r\n        console.log(": "auth.consoleerrorerreurcr2",
  "\r\n                };\r\n                return newProgress;\r\n              });\r\n            }\r\n          );\r\n          break;\r\n      }\r\n\r\n      // Recharger les médias\r\n      await loadMedia();\r\n      \r\n      alert(`${uploadedFiles.length} fichier(s) uploadé(s) avec succès !`);\r\n\r\n    } catch (error) {\r\n      console.error(": "common.returnnewprogressbre1",
  "\r\n                };\r\n            }\r\n\r\n            // 4. Générer un UID unique pour le nouvel utilisateur\r\n            const uid = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n            // 5. Créer le document utilisateur dans Firestore SEULEMENT\r\n            const userDoc: any = {\r\n                id: uid,\r\n                email: userData.email,\r\n                name: userData.name,\r\n                role: userData.role,\r\n                isActive: userData.isActive ?? true,\r\n                language: ": "auth.4genererunuiduniquep2",
  "\r\n                };\r\n            }\r\n\r\n            // 4. Vérifier si l": "common.4verifiersil1",
  "\r\n                };\r\n            }\r\n\r\n            // 5. Créer l": "common.5creerl2",
  "\r\n                };\r\n            }\r\n\r\n            // 5. Mettre à jour la dernière connexion\r\n            await this.updateLastLogin(user.id);\r\n\r\n            // 6. Déterminer la redirection selon le rôle\r\n            const redirectTo = this.determineRedirection(user.role);\r\n\r\n            this.currentUser = user;\r\n            this.startSessionMonitoring();\r\n\r\n            console.log(`🎉 Connexion réussie: ${user.name} → ${redirectTo}`);\r\n\r\n            return {\r\n                success: true,\r\n                user,\r\n                redirectTo\r\n            };\r\n\r\n        } catch (error: any) {\r\n            console.error(": "auth.5mettreajourladernie2",
  "\r\n                };\r\n            }\r\n\r\n            // Appeler la Cloud Function pour créer l": "common.appelerlacloudfuncti2",
  "\r\n                };\r\n            }\r\n\r\n            // Générer un UID simulé (en production, utiliseriez l": "ecommerce.genererunuidsimuleen1",
  "\r\n                };\r\n            }\r\n\r\n            // Générer un UID unique\r\n            const uid = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n            // Créer le document utilisateur dans Firestore\r\n            const userDoc: Omit<AdminUser, ": "admin.genererunuiduniqueco",
  "\r\n                };\r\n            }\r\n\r\n            // Vérification du mot de passe\r\n            if (!userData.password || userData.password.length < 6) {\r\n                return {\r\n                    success: false,\r\n                    error: ": "auth.verificationdumotdep1",
  "\r\n                };\r\n            }\r\n\r\n            // Vérifier si l": "common.verifiersil1",
  "\r\n                }`}\r\n              >\r\n                <List className=\"h-5 w-5\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Products */}\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        <div className=\"mb-6\">\r\n          <p className=\"text-gray-600\">\r\n            {category.products.length} produits trouvés dans {category.name}\r\n          </p>\r\n        </div>\r\n\r\n        {viewMode === ": "forms.listclassnameh5w5but",
  "\r\n                }`}\r\n              >\r\n                <option value=\"\">Sélectionner une catégorie</option>\r\n                {categories.map(cat => (\r\n                  <option key={cat} value={cat}>{cat}</option>\r\n                ))}\r\n              </select>\r\n              {errors.category && (\r\n                <p className=\"text-red-500 text-sm mt-1\">{errors.category}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Stock et commande minimum */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Stock disponible\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                min=\"0\"\r\n                value={formData.stock}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, stock: parseInt(e.target.value) || 0 }))}\r\n                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${\r\n                  errors.stock ? ": "forms.optionvalueselection",
  "\r\n              />\r\n              <div className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${settings.captchaEnabled ? 'bg-orange-600' : 'bg-gray-200 dark:bg-gray-600'\r\n                }`}>\r\n                <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${settings.captchaEnabled ? 'translate-x-6' : 'translate-x-1'\r\n                  }`} />\r\n              </div>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Contrôle d'accès et surveillance */}\r\n      <div className=": "forms.divclassnamerelative",
  "\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Catégories *": "common.divdivcategories",
  "\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Catégories */}\r\n          <div>\r\n            <label className=": "forms.divdivcategoriesdivl",
  "\r\n              >\r\n                Marquer lu\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <p className={`\r\n            text-sm mt-1 line-clamp-2\r\n            ${notification.isRead \r\n              ? 'text-gray-600 dark:text-gray-400' \r\n              : 'text-gray-700 dark:text-gray-300'\r\n            }\r\n          `}>\r\n            {notification.message}\r\n          </p>\r\n\r\n          {/* Métadonnées */}\r\n          <div className=": "forms.marquerlubuttondivpc",
  "\r\n              >\r\n                Votre navigateur ne supporte pas la lecture vidéo.\r\n              <": "common.votrenavigateurnesup1",
  "\r\n              >\r\n                Votre navigateur ne supporte pas la lecture vidéo.\r\n              </video>\r\n            ) : (\r\n              <div className=": "forms.votrenavigateurnesup",
  "\r\n              >\r\n                {/* Prévisualisation *": "common.previsualisation",
  "\r\n              >\r\n                {/* Prévisualisation */}\r\n                <div className=": "forms.previsualisationdivc",
  "\r\n              >\r\n                {/* Prévisualisation ou icône *": "common.previsualisationouic",
  "\r\n              >\r\n                {/* Prévisualisation ou icône */}\r\n                <div className=": "forms.previsualisationouic",
  "\r\n              >\r\n                {isUploading ? 'Upload en cours...' : 'Télécharger'}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=": "forms.isuploadinguploadenc",
  "\r\n              >\r\n                {isUploading ? 'Upload en cours...' : `Télécharger (${images.filter(img => img.status === 'pending').length})`}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=": "forms.isuploadinguploadenc1",
  "\r\n              className={`auth-submit-btn ${isLoading ? 'auth-loading' : ''}`}\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading \r\n                ? (isLoginMode ? t('loggingIn', 'Connexion...') : t('creatingAccount', 'Création...'))\r\n                : (isLoginMode ? t('loginButton', 'Se connecter') : t('createMyAccount', 'Créer mon compte'))\r\n              }\r\n            </button>\r\n          </form>\r\n\r\n          <div className=": "auth.classnameauthsubmitb",
  "\r\n              onClick={() => {\r\n                if (confirm('Supprimer tous les fichiers de cette catégorie ?')) {\r\n                  // Implémenter la suppression en masse si nécessaire\r\n                }\r\n              }}\r\n            >\r\n              <Trash2 className=": "forms.onclickifconfirmsupp",
  "\r\n              style={{\r\n                left: `${usedPercentage}%`,\r\n                width: `${selectedPercentage}%`\r\n              }}\r\n            />\r\n            {/* Capacité disponible *": "common.styleleftusedpercent",
  "\r\n              style={{\r\n                left: `${usedPercentage}%`,\r\n                width: `${selectedPercentage}%`\r\n              }}\r\n            />\r\n            {/* Capacité disponible */}\r\n            <div\r\n              className=": "forms.styleleftusedpercent",
  "\r\n              style={{ width: `${availablePercentage}%` }}\r\n            />\r\n          </div>\r\n\r\n          {/* Légende *": "common.stylewidthavailablep",
  "\r\n              style={{ width: `${availablePercentage}%` }}\r\n            />\r\n          </div>\r\n\r\n          {/* Légende */}\r\n          <div className=": "forms.stylewidthavailablep",
  "\r\n              style={{ width: `${usedPercentage}%` }}\r\n            />\r\n            {/* Capacité sélectionnée *": "common.stylewidthusedpercen",
  "\r\n              style={{ width: `${usedPercentage}%` }}\r\n            />\r\n            {/* Capacité sélectionnée */}\r\n            <div\r\n              className=": "forms.stylewidthusedpercen",
  "\r\n              }`} />\r\n          </div>\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderLocalizationSettings = () => (\r\n    <div className=\"space-y-6\">\r\n      <div>\r\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n          Langue par défaut\r\n        </label>\r\n        <select\r\n          value={settings.defaultLanguage}\r\n          onChange={(e) => updateSetting(": "forms.divlabeldivdivconstr",
  "\r\n              }`} />\r\n          </div>\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderNotificationSettings = () => (\r\n    <div className=": "forms.divlabeldivdivconstr1",
  "\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderNotificationSettings = () => (\r\n    <div className=": "forms.divdivdivdivconstren",
  "\r\n            >\r\n              <Filter className={styles.icon} />\r\n            </button>\r\n          )}\r\n          \r\n          {/* Bouton de recherche *": "forms.filterclassnamestyle",
  "\r\n            checked={settings.emailNotifications}\r\n            onChange={(e) => updateSetting(": "auth.checkedsettingsemail",
  "\r\n            checked={settings.smsNotifications}\r\n            onChange={(e) => updateSetting(": "admin.checkedsettingssmsno",
  "\r\n            {...props}\r\n        >\r\n            {options.map((option: any) => (\r\n                <option key={option.value} value={option.value}>{option.label}</option>\r\n            ))}\r\n        </select>\r\n    </div>\r\n);\r\n\r\ninterface EditProspectModalProps {\r\n    prospect: Company;\r\n    onClose: () => void;\r\n    onUpdate: (prospect: Company) => void;\r\n}\r\n\r\nconst EditProspectModal: React.FC<EditProspectModalProps> = memo(({\r\n    prospect,\r\n    onClose,\r\n    onUpdate\r\n}) => {\r\n    const companyMutation = useOptimizedMutation('companies');\r\n    const profileMutation = useOptimizedMutation('company_profiles');\r\n\r\n    const { data: profiles } = useOptimizedQuery<CompanyProfile>('company_profiles', {\r\n        filter: { company_id: prospect.id },\r\n        limit: 1,\r\n        select: '*',\r\n        cacheKey: `profile-${prospect.id}`\r\n    });\r\n\r\n    const profile = useMemo(() => profiles?.[0], [profiles]);\r\n\r\n    const [formData, setFormData] = React.useState(() => ({\r\n        // Informations de base\r\n        name: prospect.name || '',\r\n        country: prospect.country || '',\r\n        email: prospect.email || '',\r\n        phone: prospect.phone || '',\r\n        contactPerson: prospect.contact_person || '',\r\n\r\n        // Informations détaillées du profil\r\n        monthlySalesVolume: profile?.monthly_sales_volume || '',\r\n        hasMerchandising: profile?.has_merchandising || false,\r\n        isTopImporter: profile?.is_top_importer || false,\r\n        hasWarehouses: profile?.has_warehouses || false,\r\n        warehouseCount: profile?.warehouse_count?.toString() || '',\r\n        hasLogisticsVehicles: profile?.has_logistics_vehicles || false,\r\n        vehicleCount: profile?.vehicle_count?.toString() || '',\r\n        preferredCurrency: prospect.preferred_currency || 'EUR',\r\n        interestedProducts: prospect.interested_products || [],\r\n        businessType: profile?.business_type || '',\r\n        website: prospect.website || '',\r\n        notes: profile?.notes || ''\r\n    }));\r\n\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [error, setError] = React.useState<string | null>(null);\r\n\r\n    // Mémorisation des handlers\r\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        const { name, value, type } = e.target;\r\n        const checked = (e.target as HTMLInputElement).checked;\r\n\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [name]: type === 'checkbox' ? checked : value\r\n        }));\r\n    }, []);\r\n\r\n    const handleProductSelect = useCallback((product: string) => {\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            interestedProducts: prev.interestedProducts.includes(product)\r\n                ? prev.interestedProducts.filter(p => p !== product)\r\n                : [...prev.interestedProducts, product]\r\n        }));\r\n    }, []);\r\n\r\n    // Optimistic update pour les mutations\r\n    const optimisticUpdateCompany = useCallback((data: Partial<Company>) => {\r\n        onUpdate({ ...prospect, ...data });\r\n    }, [prospect, onUpdate]);\r\n\r\n    const handleSubmit = useCallback(async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // Données de l'entreprise\r\n            const companyData = {\r\n                name: formData.name,\r\n                country: formData.country,\r\n                email: formData.email,\r\n                phone: formData.phone,\r\n                contact_person: formData.contactPerson,\r\n                preferred_currency: formData.preferredCurrency,\r\n                interested_products: formData.interestedProducts,\r\n                website: formData.website,\r\n                updated_at: new Date().toISOString()\r\n            };\r\n\r\n            // Données du profil\r\n            const profileData = {\r\n                monthly_sales_volume: formData.monthlySalesVolume,\r\n                has_merchandising: formData.hasMerchandising,\r\n                is_top_importer: formData.isTopImporter,\r\n                has_warehouses: formData.hasWarehouses,\r\n                warehouse_count: formData.hasWarehouses ? parseInt(formData.warehouseCount) || 0 : null,\r\n                has_logistics_vehicles: formData.hasLogisticsVehicles,\r\n                vehicle_count: formData.hasLogisticsVehicles ? parseInt(formData.vehicleCount) || 0 : null,\r\n                business_type: formData.businessType,\r\n                notes: formData.notes,\r\n                updated_at: new Date().toISOString()\r\n            };\r\n\r\n            // Mise à jour de l'entreprise avec optimistic update\r\n            await companyMutation.update(\r\n                prospect.id,\r\n                companyData,\r\n                optimisticUpdateCompany\r\n            );\r\n\r\n            // Mise à jour du profil\r\n            if (profile) {\r\n                await profileMutation.update(profile.id, profileData);\r\n            } else {\r\n                await profileMutation.insert({\r\n                    ...profileData,\r\n                    company_id: prospect.id,\r\n                    created_at: new Date().toISOString()\r\n                });\r\n            }\r\n\r\n            onClose();\r\n        } catch (err) {\r\n            console.error('Erreur lors de la mise à jour:', err);\r\n            setError('Erreur lors de la mise à jour du prospect');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [\r\n        formData,\r\n        prospect.id,\r\n        profile,\r\n        companyMutation,\r\n        profileMutation,\r\n        optimisticUpdateCompany,\r\n        onClose\r\n    ]);\r\n\r\n    // Mémorisation des options\r\n    const currencyOptions = useMemo(() => [\r\n        { value: 'EUR', label: 'Euro (€)' },\r\n        { value: 'USD', label: 'Dollar ($)' },\r\n        { value: 'GBP', label: 'Livre Sterling (£)' },\r\n        { value: 'DZD', label: 'Dinar Algérien (DA)' }\r\n    ], []);\r\n\r\n    const businessTypeOptions = useMemo(() => [\r\n        { value: 'importer', label: 'Importateur' },\r\n        { value: 'distributor', label: 'Distributeur' },\r\n        { value: 'retailer', label: 'Détaillant' },\r\n        { value: 'wholesaler', label: 'Grossiste' }\r\n    ], []);\r\n\r\n    const productCategories = useMemo(() => [\r\n        'Épices et condiments',\r\n        'Huiles et vinaigres',\r\n        'Conserves',\r\n        'Produits secs',\r\n        'Boissons',\r\n        'Confiserie',\r\n        'Produits bio',\r\n        'Équipements culinaires'\r\n    ], []);\r\n\r\n    return (\r\n        <div className=": "auth.propsoptionsmapoptio",
  "\r\n            }\r\n          `}\r\n          onClick={() => document.getElementById(`file-input-${activeTab}`)?.click()}\r\n        >\r\n          <div className=\"flex flex-col items-center\">\r\n            <Upload className=\"w-12 h-12 text-gray-400 mb-4\" />\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n              Ajouter des {activeTab}\r\n            </h3>\r\n            <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-4\">\r\n              Glissez-déposez vos fichiers ici ou cliquez pour sélectionner\r\n            </p>\r\n            <p className=\"text-xs text-gray-400\">\r\n              {activeTab === ": "forms.onclickdocumentgetel",
  "\r\n            }\r\n          `}>\r\n            {notification.message}\r\n          </p>\r\n\r\n          {/* Métadonnées *": "common.notificationmessagep",
  "\r\n            }\r\n          `}>\r\n            {notification.message}\r\n          </p>\r\n\r\n          {/* Métadonnées */}\r\n          <div className=\"flex items-center justify-between mt-2\">\r\n            <div className=\"flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400\">\r\n              <Clock className=\"h-3 w-3\" />\r\n              <span>{formatTimeAgo(notification.createdAt)}</span>\r\n              \r\n              {notification.metadata?.amount && (\r\n                <>\r\n                  <span>•</span>\r\n                  <span className=\"font-medium\">\r\n                    {notification.metadata.amount.toLocaleString(": "forms.notificationmessagep",
  "\r\n            }\r\n        ];\r\n\r\n        const createdAccounts: Array<{ email: string; password: string; uid: string }> = [];\r\n        const errors: string[] = [];\r\n\r\n        for (const adminData of testAdmins) {\r\n            try {\r\n                const result = await this.createNewAdminAccount(adminData);\r\n\r\n                if (result.success && result.uid) {\r\n                    createdAccounts.push({\r\n                        email: adminData.email,\r\n                        password: adminData.password,\r\n                        uid: result.uid\r\n                    });\r\n                    console.log(`✅ Compte créé: ${adminData.email}`);\r\n                } else {\r\n                    errors.push(`${adminData.email}: ${result.message}`);\r\n                    console.log(`❌ Échec: ${adminData.email} - ${result.message}`);\r\n                }\r\n            } catch (error: any) {\r\n                errors.push(`${adminData.email}: ${error.message}`);\r\n                console.log(`💥 Erreur: ${adminData.email} - ${error.message}`);\r\n            }\r\n        }\r\n\r\n        if (createdAccounts.length > 0) {\r\n            return {\r\n                success: true,\r\n                message: `${createdAccounts.length} compte(s) admin créé(s) avec succès${errors.length > 0 ? ` (${errors.length} erreur(s))` : ": "auth.constcreatedaccounts1",
  "\r\n            }\r\n        },\r\n        // ... autres produits similaires\r\n    ];\r\n\r\n    return products.find(p => p.id === id) || null;\r\n};\r\n\r\nconst ProductDetailPage: React.FC = () => {\r\n    const { id } = useParams<{ id: string }>();\r\n    const navigate = useNavigate();\r\n    const [product, setProduct] = useState<SimpleProduct | null>(null);\r\n    const [selectedImage, setSelectedImage] = useState(0);\r\n    const [quantity, setQuantity] = useState(1);\r\n    const [isFavorite, setIsFavorite] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            const foundProduct = getProductById(id);\r\n            setProduct(foundProduct);\r\n            setIsLoading(false);\r\n        }\r\n    }, [id]);\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=": "forms.autresproduitssimila",
  "\r\n            }\r\n        },\r\n        // ... autres produits similaires\r\n    ];\r\n\r\n    return products.find(p => p.id === id) || null;\r\n};\r\n\r\nconst ProductDetailPage: React.FC = () => {\r\n    const { id } = useParams<{ id: string }>();\r\n    const navigate = useNavigate();\r\n    const [product, setProduct] = useState<SimpleProduct | null>(null);\r\n    const [selectedImage, setSelectedImage] = useState(0);\r\n    const [quantity, setQuantity] = useState(1);\r\n    const [isFavorite, setIsFavorite] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            const foundProduct = getProductById(id);\r\n            setProduct(foundProduct);\r\n            setIsLoading(false);\r\n        }\r\n    }, [id]);\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n                <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!product) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                    <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">Produit non trouvé</h1>\r\n                    <button\r\n                        onClick={() => navigate(": "forms.autresproduitssimila1",
  "\r\n            });\r\n\r\n            if (result.success) {\r\n                setResult(`✅ Utilisateur test créé: ${testUserEmail}\r\nUID: ${result.user?.uid}`);\r\n            } else {\r\n                setResult(`❌ Erreur création: ${result.error}`);\r\n            }\r\n        } catch (error: any) {\r\n            console.error(": "auth.ifresultsuccesssetre1",
  "\r\n            },\r\n            pricing: {\r\n                postPrice: 1500,\r\n                storyPrice: 500,\r\n                reelPrice: 1200\r\n            },\r\n            engagement: 4.2,\r\n            verified: true,\r\n            stats: {\r\n                totalViews: 285600,\r\n                totalEngagement: 4.2,\r\n                totalClicks: 12480,\r\n                totalEarnings: 18750\r\n            },\r\n            createdAt: new Date(),\r\n            updatedAt: new Date()\r\n        };\r\n\r\n        const profileRef = await addDoc(collection(db, ": "forms.pricingpostprice1500",
  "\r\n            };\r\n\r\n            console.log(`✅ Profil chargé: ${user.name} (${user.role})`);\r\n            return user;\r\n\r\n        } catch (error: any) {\r\n            console.error(": "forms.consolelogprofilchar2",
  "\r\n            };\r\n\r\n            setBackups(prev => [newBackup, ...prev]);\r\n\r\n            // Mettre à jour les stats\r\n            setStats(prev => ({\r\n                ...prev,\r\n                lastBackup: new Date()\r\n            }));\r\n\r\n        } catch (error) {\r\n            console.error(": "navigation.setbackupsprevnewbac1",
  "\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer des utilisateurs de test pour le développement\r\n     *": "admin.creerdesutilisateurs1",
  "\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer des utilisateurs de test pour le développement\r\n     */\r\n    async createTestUsers(): Promise<{ success: boolean; count: number; error?: string }> {\r\n        try {\r\n            console.log(": "admin.creerdesutilisateurs2",
  "\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mettre à jour un utilisateur\r\n     *": "admin.mettreajourunutilisa",
  "\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mettre à jour un utilisateur\r\n     */\r\n    async updateUser(userId: string, updateData: Partial<CreateUserData>): Promise<{ success: boolean; user?: AdminUser; error?: string }> {\r\n        try {\r\n            console.log(": "admin.mettreajourunutilisa1",
  "\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Supprimer un utilisateur\r\n     *": "forms.supprimerunutilisate",
  "\r\n            };\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Obtenir les statistiques des utilisateurs\r\n     *": "admin.obtenirlesstatistiqu",
  "\r\n            }`}>\r\n            <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${settings.emailNotifications ? ": "auth.spanclassnameinlineb",
  "\r\n            }`}>\r\n            <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${settings.smsNotifications ? ": "forms.spanclassnameinlineb",
  "\r\n            }`}>\r\n            {quantity} CBM\r\n          </div>\r\n        </div>\r\n          <div className=\"relative\">\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max={availableCapacity}\r\n              value={quantity}\r\n              onChange={handleSliderChange}\r\n              className=\"w-full container-reservation-slider smooth-transition\"\r\n              style={{\r\n                background: `linear-gradient(to right, #3B82F6 0%, #3B82F6 ${(quantity / availableCapacity) * 100}%, var(--modal-slider-track) ${(quantity / availableCapacity) * 100}%, var(--modal-slider-track) 100%)`\r\n              }}\r\n            />\r\n            <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n              <span>0</span>\r\n              <span>{availableCapacity} CBM</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Barre de progression des capacités */}\r\n        <div className=\"space-y-3\">\r\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\r\n            Répartition de la capacité\r\n          </h3>            <div className=\"relative w-full h-6 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\r\n            {/* Capacité utilisée */}\r\n            <div\r\n              className=\"absolute top-0 left-0 h-full bg-red-500 progress-bar-segment\"\r\n              style={{ width: `${usedPercentage}%` }}\r\n            />\r\n            {/* Capacité sélectionnée */}\r\n            <div\r\n              className=\"absolute top-0 h-full bg-blue-500 progress-bar-segment\"\r\n              style={{\r\n                left: `${usedPercentage}%`,\r\n                width: `${selectedPercentage}%`\r\n              }}\r\n            />\r\n            {/* Capacité disponible */}\r\n            <div\r\n              className=\"absolute top-0 right-0 h-full bg-green-500 progress-bar-segment\"\r\n              style={{ width: `${availablePercentage}%` }}\r\n            />\r\n          </div>\r\n\r\n          {/* Légende */}\r\n          <div className=\"flex flex-wrap gap-4 text-sm\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\r\n              <span className=\"text-gray-600 dark:text-gray-400\">\r\n                Utilisé ({container.usedCapacity} CBM)\r\n              </span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\r\n              <span className=\"text-gray-600 dark:text-gray-400\">\r\n                Sélectionné ({quantity} CBM)\r\n              </span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\r\n              <span className=\"text-gray-600 dark:text-gray-400\">\r\n                Disponible ({availableCapacity - quantity} CBM)\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>          {/* Informations dynamiques */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <div className=\"flex items-center space-x-3 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg info-card smooth-transition hover:shadow-lg\">\r\n            <div className=\"icon-animate\">\r\n              <Euro className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\r\n            </div>\r\n            <div>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Prix estimé</p>\r\n              <p className={`text-xl font-bold text-blue-600 dark:text-blue-400 ${priceAnimating ? ": "navigation.quantitycbmdivdivdiv",
  "\r\n          />\r\n          <div className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${settings.emailNotifications ? ": "auth.divclassnamerelative",
  "\r\n          />\r\n          <div className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${settings.smsNotifications ? ": "forms.divclassnamerelative1",
  "\r\n          >\r\n            Retour à l": "navigation.retoural3",
  "\r\n          >\r\n            Retour à l'accueil\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=": "navigation.retouralaccueillinkd",
  "\r\n          }\r\n        `}\r\n      >\r\n        <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\r\n        <p className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n          Déposez vos fichiers ici\r\n        </p>\r\n        <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-4\">\r\n          ou cliquez pour sélectionner des fichiers\r\n        </p>\r\n        <p className=\"text-xs text-gray-400 dark:text-gray-500\">\r\n          Formats acceptés: {acceptedTypes.join(": "forms.uploadclassnamemxaut",
  "\r\n          }\r\n        `}\r\n      >\r\n        <div className=\"flex flex-col items-center\">\r\n          <Camera className=\"h-12 w-12 text-gray-400 mb-4\" />\r\n          <p className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n            Déposez vos images ici\r\n          </p>\r\n          <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-4\">\r\n            ou cliquez pour sélectionner des images\r\n          </p>\r\n          <p className=\"text-xs text-gray-400 dark:text-gray-500\">\r\n            Formats: JPG, JPEG, PNG, GIF | Taille max: {maxSizePerImage}MB par image | Max {maxImages} images\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <input\r\n        ref={fileInputRef}\r\n        type=\"file\"\r\n        multiple\r\n        accept=\"image/*\"\r\n        onChange={handleInputChange}\r\n        className=\"hidden\"\r\n      />\r\n\r\n      {/* Grille des images */}\r\n      {images.length > 0 && (\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\r\n              Images ({images.length}/{maxImages})\r\n            </h3>\r\n            <div className=\"flex gap-2\">\r\n              <Button\r\n                onClick={clearCompleted}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                disabled={!images.some(img => img.status === ": "forms.divclassnameflexflex",
  "\r\n          }\r\n        };\r\n        \r\n        setProductsList(prev => [newProduct, ...prev]);\r\n        success(`Nouveau produit ": "ecommerce.setproductslistprevn",
  "\r\n          }\r\n        };\r\n        \r\n        setProductsList(prev => [newProduct, ...prev]);\r\n        success(`Nouveau produit \"${productData.name}\" ajouté avec succès !`);\r\n      }\r\n      \r\n      setShowAddModal(false);\r\n    } catch (err) {\r\n      console.error(": "forms.setproductslistprevn",
  "\r\n        >\r\n          Voir toutes les catégories &gt;\r\n        <": "common.voirtouteslescategor",
  "\r\n        >\r\n          Voir toutes les catégories &gt;\r\n        </button>\r\n      </div>\r\n      {/* Animation d’ouverture des produits *": "ecommerce.voirtouteslescategor",
  "\r\n        >\r\n          Voir toutes les catégories &gt;\r\n        </button>\r\n      </div>\r\n      {/* Animation d’ouverture des produits */}\r\n      <div className={`transition-all duration-500 ${showProducts ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>\r\n        <div className=": "forms.voirtouteslescategor",
  "\r\n        ];\r\n\r\n        keysToRemove.forEach(key => {\r\n            localStorage.removeItem(key);\r\n        });\r\n\r\n        // Nettoyer sessionStorage\r\n        sessionStorage.clear();\r\n\r\n        // Nettoyer les cookies liés à l": "common.keystoremoveforeachk2",
  "\r\n        }\r\n        hover:bg-gray-50 dark:hover:bg-gray-700\r\n        transition-all duration-200 cursor-pointer\r\n        border-b border-gray-200 dark:border-gray-600\r\n      `}\r\n      onClick={handleClick}\r\n    >\r\n      {/* Indicateur de notification non lue */}\r\n      {!notification.isRead && (\r\n        <div className=\"absolute top-2 right-2 w-3 h-3 bg-blue-500 rounded-full animate-pulse\"></div>\r\n      )}\r\n\r\n      <div className=\"flex items-start space-x-3\">\r\n        {/* Icône */}\r\n        <div className=\"flex-shrink-0 mt-1\">\r\n          {getNotificationIcon(notification.type)}\r\n        </div>\r\n\r\n        {/* Contenu */}\r\n        <div className=\"flex-1 min-w-0\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h4 className={`\r\n              text-sm font-semibold truncate\r\n              ${notification.isRead \r\n                ? ": "forms.hoverbggray50darkhov",
  "\r\n        }\r\n    ]);\r\n\r\n    const createBackup = async () => {\r\n        setBackupLoading(true);\r\n        try {\r\n            // Simuler la création d": "navigation.constcreatebackupasy1",
  "\r\n        }\r\n    }\r\n];\r\n\r\n// Fonction pour migrer les données vers Firebase\r\nexport const migrateProductsToFirebase = async (): Promise<void> => {\r\n    console.log(": "ecommerce.fonctionpourmigrerle1",
  "\r\n        });\r\n      }\r\n    }\r\n    \r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Vérifie si l": "common.returnresultsverifie1",
  "\r\n        });\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(deletePromises);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Supprimer tous les fichiers média d": "forms.awaitpromiseallsettl2",
  "\r\n        };\r\n\r\n        return <Navigate to={roleRedirects[user.role]} replace />;\r\n    }\r\n\r\n    return <>{children}</>;\r\n}\r\n\r\nfunction AppRoutes() {\r\n    return (\r\n        <Routes>\r\n            <Route path=\"/\" element={<HomePage />} />\r\n            <Route path=\"/products\" element={<ProductsPageB2B />} />\r\n            <Route path=\"/products-test\" element={<ProductsList />} />\r\n            <Route path=\"/product/:id\" element={<ProductDetailPageB2B />} />\r\n            <Route path=\"/product-detail/:id\" element={<ProductDetailPage />} />\r\n            <Route path=\"/supplier/:supplierId\" element={<SupplierProfilePage />} />\r\n            <Route path=\"/product-old/:id\" element={<ProductPage />} />\r\n            <Route path=\"/category/:categoryId\" element={<CategoryPage />} />\r\n\r\n            <Route path=\"/login\" element={<LoginRoute><UniversalLoginPage /></LoginRoute>} />\r\n            <Route path=\"/register\" element={<LoginRoute><UniversalRegisterPage /></LoginRoute>} />\r\n\r\n            {/* Redirection pour /auth vers /login pour éviter la confusion */}\r\n            <Route path=\"/auth\" element={<Navigate to=\"/login\" replace />} />\r\n\r\n            {/* Routes d": "auth.returnnavigatetorole",
  "\r\n        };\r\n\r\n        return errorMessages[error.code] || error.message || ": "common.returnerrormessagese",
  "\r\n        };\r\n\r\n        try {\r\n            const result = await this.createNewAdminAccount(defaultAdmin);\r\n\r\n            if (result.success) {\r\n                return {\r\n                    success: true,\r\n                    message: result.message,\r\n                    credentials: {\r\n                        email: defaultAdmin.email,\r\n                        password: defaultAdmin.password\r\n                    },\r\n                    uid: result.uid\r\n                };\r\n            } else {\r\n                return {\r\n                    success: false,\r\n                    message: result.message\r\n                };\r\n            }\r\n        } catch (error: any) {\r\n            return {\r\n                success: false,\r\n                message: `Erreur lors de la création du compte par défaut: ${error.message}`\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer plusieurs comptes admin de test\r\n     *": "auth.tryconstresultawaitt1",
  "\r\n        };\r\n\r\n        try {\r\n            const result = await this.createNewAdminAccount(defaultAdmin);\r\n\r\n            if (result.success) {\r\n                return {\r\n                    success: true,\r\n                    message: result.message,\r\n                    credentials: {\r\n                        email: defaultAdmin.email,\r\n                        password: defaultAdmin.password\r\n                    },\r\n                    uid: result.uid\r\n                };\r\n            } else {\r\n                return {\r\n                    success: false,\r\n                    message: result.message\r\n                };\r\n            }\r\n        } catch (error: any) {\r\n            return {\r\n                success: false,\r\n                message: `Erreur lors de la création du compte par défaut: ${error.message}`\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer plusieurs comptes admin de test\r\n     */\r\n    static async createTestAdminAccounts(): Promise<{\r\n        success: boolean;\r\n        message: string;\r\n        createdAccounts?: Array<{ email: string; password: string; uid: string }>;\r\n    }> {\r\n        const testAdmins: CreateAdminUserData[] = [\r\n            {\r\n                email: ": "auth.tryconstresultawaitt2",
  "\r\n        };\r\n      });\r\n      setLinks(initialLinks);\r\n      setErrors({} as Record<SocialNetwork, string>);\r\n      \r\n      // Focus sur le premier champ après l": "common.setlinksinitiallinks1",
  "\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Créer un compte admin par défaut\r\n     *": "admin.creeruncompteadminpa",
  "\r\n        }`}\r\n      onClick={(e) => e.stopPropagation()}\r\n    >\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\r\n            <Package className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\r\n          </div>\r\n          <div>\r\n            <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\r\n              Réserver de l": "forms.onclickeestoppropaga",
  "\r\n    ],\r\n    verified: true,\r\n    goldSupplier: true\r\n};\r\n\r\nconst SupplierProfilePage: React.FC = () => {\r\n    const { supplierId } = useParams();\r\n    const navigate = useNavigate();\r\n    const [supplier, setSupplier] = useState<SupplierProfile | null>(null);\r\n    const [activeTab, setActiveTab] = useState(": "ecommerce.verifiedtruegoldsupp",
  "\r\n    }\r\n  };\r\n\r\n  const originalName = product.name as string;\r\n  const translations = productNameTranslations[originalName];\r\n  \r\n  if (translations) {\r\n    return translations[language] || translations.fr || translations.en || originalName;\r\n  }\r\n  \r\n  // Fallback : retourner le nom original\r\n  return originalName;\r\n};\r\n\r\n/**\r\n * Obtient la description du produit dans la langue spécifiée\r\n * @param product Le produit\r\n * @param language La langue souhaitée\r\n * @returns La description du produit dans la langue demandée ou un fallback\r\n *": "navigation.constoriginalnamepro",
  "\r\n    }\r\n];\r\n\r\n// Données par défaut\r\nexport const defaultBusinessCardData: BusinessCardData = {\r\n    companyName: ": "forms.donneespardefautexpo1",
  "\r\n    }));\r\n\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [error, setError] = React.useState<string | null>(null);\r\n\r\n    // Mémorisation des handlers\r\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        const { name, value, type } = e.target;\r\n        const checked = (e.target as HTMLInputElement).checked;\r\n\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [name]: type === ": "navigation.constloadingsetloadi1",
  "\r\n    }).format(date);\r\n  };\r\n\r\n  const getAverageRating = () => {\r\n    if (reviews.length === 0) return 0;\r\n    const sum = reviews.reduce((acc, review) => acc + review.rating, 0);\r\n    return (sum / reviews.length).toFixed(1);\r\n  };\r\n\r\n  const getRatingDistribution = () => {\r\n    const distribution = [0, 0, 0, 0, 0];\r\n    reviews.forEach(review => {\r\n      distribution[review.rating - 1]++;\r\n    });\r\n    return distribution;\r\n  };\r\n\r\n  const distribution = getRatingDistribution();\r\n  const totalReviews = reviews.length;\r\n\r\n  return (    <SupplierLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Bouton retour */}\r\n        <BackButton to=\"/supplier/dashboard\" label=\"Retour au tableau de bord\" variant=\"ghost\" />\r\n\r\n        {/* Header */}\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n            Avis Clients\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Consultez et répondez aux avis de vos clients\r\n          </p>\r\n        </div>\r\n\r\n        {/* Overview Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Star className=\"h-8 w-8 text-yellow-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Note moyenne</p>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                    {getAverageRating()}\r\n                  </p>\r\n                  <div className=\"flex\">{renderStars(Math.round(parseFloat(getAverageRating())))}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <MessageSquare className=\"h-8 w-8 text-blue-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total avis</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{totalReviews}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <ThumbsUp className=\"h-8 w-8 text-green-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Avis positifs</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {reviews.filter(r => r.rating >= 4).length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <MessageSquare className=\"h-8 w-8 text-purple-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Sans réponse</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {reviews.filter(r => !r.hasResponse).length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Rating Distribution */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\r\n            Répartition des notes\r\n          </h3>\r\n          <div className=\"space-y-3\">\r\n            {[5, 4, 3, 2, 1].map((rating) => (\r\n              <div key={rating} className=\"flex items-center gap-4\">\r\n                <div className=\"flex items-center gap-1 w-20\">\r\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">{rating}</span>\r\n                  <Star size={14} className=\"text-yellow-400 fill-current\" />\r\n                </div>\r\n                <div className=\"flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\r\n                  <div\r\n                    className=\"bg-yellow-400 h-2 rounded-full transition-all duration-300\"\r\n                    style={{\r\n                      width: totalReviews > 0 ? `${(distribution[rating - 1] / totalReviews) * 100}%` : ": "navigation.formatdateconstgetav",
  "\r\n    }).format(date);\r\n  };\r\n\r\n  return (\r\n    <AdminLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n              Gestion des Documents\r\n            </h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Gérez tous les documents de la plateforme\r\n            </p>\r\n          </div>\r\n          <Button onClick={() => console.log(": "forms.formatdatereturnadmi",
  "\r\n    }).format(price);\r\n  };\r\n  return (\r\n    <SupplierLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Bouton retour */}\r\n        <BackButton to=\"/supplier/dashboard\" label=\"Retour au tableau de bord\" variant=\"ghost\" />\r\n\r\n        {/* Header */}\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n            Mes Expéditions\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Suivez et gérez toutes vos expéditions\r\n          </p>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Package className=\"h-8 w-8 text-yellow-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Préparation</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {shipments.filter(s => s.status === ": "navigation.formatpricereturnsup",
  "\r\n    });\r\n\r\n    // Vérifier les permissions\r\n    if (!user || user.role !== ": "admin.verifierlespermissio1",
  "\r\n    },\r\n    contact: {\r\n        phone: ": "forms.contactphone",
  "\r\n    };\r\n\r\n    setMessages(prev => [...prev, message]);\r\n    setNewMessage(": "common.setmessagesprevprevm",
  "\r\n  ]\r\n};\r\n\r\n// Mots-clés pour l": "common.motsclespourl1",
  "\r\n  ];\r\n\r\n  /**\r\n   * Détermine le rôle d": "common.determineleroled1",
  "\r\n  ];\r\n  const isAdminEmail = (emailToCheck: string) => {\r\n    return adminEmails.includes(emailToCheck.toLowerCase().trim());\r\n  };\r\n\r\n  // Gestion des réseaux sociaux\r\n  const handleNetworkSelection = (networks: SocialNetwork[]) => {\r\n    setSelectedNetworks(networks);\r\n    if (networks.length > 0) {\r\n      setIsModalOpen(true);\r\n    } else {\r\n      setSocialMediaLinksList([]);\r\n      setSocialMediaLinks(": "auth.constisadminemailema1",
  "\r\n  }\r\n];\r\n\r\nclass InitializationService {\r\n  private isInitialized = false;\r\n  /**\r\n   * Initialise la base de données avec les utilisateurs de test\r\n   *": "admin.classinitializations1",
  "\r\n  }\r\n];\r\n\r\nclass InitializationService {\r\n  private isInitialized = false;\r\n  /**\r\n   * Initialise la base de données avec les utilisateurs de test\r\n   */\r\n  async initializeDatabase(): Promise<void> {\r\n    if (this.isInitialized) {\r\n      console.log(": "admin.classinitializations2",
  "\r\n  }\r\n];\r\n\r\nconst MessagesPage: React.FC = () => {\r\n  const [conversations, setConversations] = useState<Conversation[]>([]);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState(": "common.constmessagespagerea",
  "\r\n  },\r\n  notifications: {\r\n    emailOrders: true,\r\n    emailMessages: true,\r\n    emailReviews: true,\r\n    emailMarketing: false,\r\n    pushOrders: true,\r\n    pushMessages: true,\r\n    pushReviews: false\r\n  },\r\n  security: {\r\n    twoFactorAuth: true,\r\n    passwordExpiry: 90,\r\n    sessionTimeout: 30\r\n  },\r\n  billing: {\r\n    companyName: ": "auth.notificationsemailor",
  "\r\n  },\r\n  profile: {\r\n    contactName: ": "forms.profilecontactname",
  "\r\n};\r\n\r\nexport interface CreateUserData {\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    role: UserRole;\r\n    isActive?: boolean;\r\n}\r\n\r\nexport interface AdminUser extends User {\r\n    uid: string;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    isActive: boolean;\r\n    lastLogin?: string;\r\n}\r\n\r\n/**\r\n * Service de création d": "auth.exportinterfacecreat",
  " \n                  onClick={() => setShowContactForm(true)} \n                  className=": "forms.onclicksetshowcontac1",
  "          >\n            {/* Votre vidéo personnalisée pour le site e-commerce *": "common.votrevideopersonnali",
  "          >\n            {/* Votre vidéo personnalisée pour le site e-commerce */}\n            <source src=": "common.votrevideopersonnali1",
  " && (\r\n                                                <span>{variant.name}</span>\r\n                                            )}\r\n                                            {variant.price && (\r\n                                                <span className=\"ml-1 text-xs text-gray-500\">\r\n                                                    +{variant.price.toFixed(2)}€\r\n                                                </span>\r\n                                            )}\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n\r\n                        {/* Sélecteur de quantité */}\r\n                        <div className=\"space-y-3\">\r\n                            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                                Quantité (MOQ: {product.moq})\r\n                            </h3>\r\n                            <div className=\"flex items-center gap-4\">\r\n                                <div className=\"flex items-center gap-2\">\r\n                                    <button\r\n                                        onClick={() => updateQuantity(quantity - 10)}\r\n                                        className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300\"\r\n                                    >\r\n                                        <Minus size={16} />\r\n                                    </button>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={quantity}\r\n                                        onChange={(e) => updateQuantity(Number(e.target.value))}\r\n                                        min={product.moq}\r\n                                        className=\"w-24 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-center focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white font-medium\"\r\n                                    />\r\n                                    <button\r\n                                        onClick={() => updateQuantity(quantity + 10)}\r\n                                        className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300\"\r\n                                    >\r\n                                        <Plus size={16} />\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                                    Stock: {product.stock.toLocaleString()} disponibles\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Prix total */}\r\n                        <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-xl p-6\">\r\n                            <div className=\"flex justify-between items-center mb-2\">\r\n                                <span className=\"text-gray-600 dark:text-gray-400\">Prix total</span>\r\n                                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n                                    {totalPrice.toFixed(2)}€\r\n                                </div>\r\n                            </div>\r\n                            {hasDiscount && (\r\n                                <div className=\"text-sm text-green-600 dark:text-green-400\">\r\n                                    Réduction de {product.discount!.percentage}% appliquée\r\n                                </div>\r\n                            )}\r\n                            <div className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\r\n                                {(totalPrice / quantity).toFixed(2)}€ par unité\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Délai de livraison */}\r\n                        <div className=\"flex items-center gap-2 text-gray-600 dark:text-gray-400\">\r\n                            <Truck size={20} />\r\n                            <span>\r\n                                Livraison estimée: {product.deliveryTime.min}-{product.deliveryTime.max} {product.deliveryTime.unit === ": "forms.spanvariantnamespanv",
  " && (\r\n                            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\r\n                                <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-6\">\r\n                                    Avis clients\r\n                                </h2>\r\n                                <div className=\"space-y-6\">\r\n                                    {/* Sample review */}\r\n                                    <div className=\"border-b border-gray-200 dark:border-gray-700 pb-6\">\r\n                                        <div className=\"flex items-start space-x-4\">\r\n                                            <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-semibold\">\r\n                                                JD\r\n                                            </div>\r\n                                            <div className=\"flex-1\">\r\n                                                <div className=\"flex items-center space-x-2 mb-2\">\r\n                                                    <div className=\"font-semibold text-gray-900 dark:text-white\">\r\n                                                        Jean Dupont\r\n                                                    </div>\r\n                                                    <div className=\"flex items-center\">\r\n                                                        {[...Array(5)].map((_, i) => (\r\n                                                            <Star key={i} className=\"h-4 w-4 fill-current text-yellow-400\" />\r\n                                                        ))}\r\n                                                    </div>\r\n                                                    <div className=\"text-sm text-gray-500\">\r\n                                                        il y a 2 semaines\r\n                                                    </div>\r\n                                                </div>\r\n                                                <p className=\"text-gray-600 dark:text-gray-400\">\r\n                                                    Excellent fournisseur ! Qualité des produits irréprochable et livraison très rapide. Je recommande vivement.\r\n                                                </p>\r\n                                                <div className=\"flex items-center space-x-4 mt-3\">\r\n                                                    <button className=\"flex items-center space-x-1 text-sm text-gray-500 hover:text-blue-600\">\r\n                                                        <ThumbsUp className=\"h-4 w-4\" />\r\n                                                        <span>Utile (12)</span>\r\n                                                    </button>\r\n                                                    <button className=\"text-sm text-gray-500 hover:text-blue-600\">\r\n                                                        Répondre\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Sidebar */}\r\n                    <div className=\"lg:col-span-1\">\r\n                        <div className=\"space-y-6\">\r\n                            {/* Carte de visite du fournisseur */}\r\n                            <SupplierBusinessCard\r\n                                supplierData={{\r\n                                    name: supplier.name,\r\n                                    logo: supplier.logo,\r\n                                    contact: supplier.contact,\r\n                                    location: supplier.location\r\n                                }}\r\n                                isOwner={isOwner}\r\n                                onManageCards={() => setActiveTab(": "forms.divclassnamebgwhited",
  " && (\r\n                            <div className=\"space-y-6\">\r\n                                {/* Description */}\r\n                                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\r\n                                    <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\r\n                                        À propos de l": "forms.divclassnamespacey6d",
  " && (\r\n                <div className=\"mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200\">\r\n                    <h3 className=\"text-sm font-medium text-blue-900 mb-2\">\r\n                        📊 Métriques de Performance\r\n                    </h3>\r\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n                        <div>\r\n                            <span className=\"text-blue-700\">Items rendus:</span>\r\n                            <span className=\"ml-1 font-medium\">{Math.min(filteredCompanies.length, 10)}</span>\r\n                        </div>\r\n                        <div>\r\n                            <span className=\"text-blue-700\">Total items:</span>\r\n                            <span className=\"ml-1 font-medium\">{filteredCompanies.length}</span>\r\n                        </div>\r\n                        <div>\r\n                            <span className=\"text-blue-700\">Cache:</span>\r\n                            <span className=\"ml-1 font-medium\">{isStale ? ": "forms.divclassnamemt4p4bgb",
  " && (\r\n              <div className=\"auth-influencer-fields\">                {/* Sélecteur de réseaux sociaux */}\r\n                <div className=\"auth-form-group\">\r\n                  <SocialNetworkSelector\r\n                    selectedNetworks={selectedNetworks}\r\n                    onChange={handleNetworkSelection}\r\n                    disabled={isLoading}\r\n                  />\r\n                </div>\r\n\r\n                {/* Nombre d": "forms.divclassnameauthinfl",
  " && (\r\n            <div className=\"animate-fade-in\">\r\n              {/* Informations personnelles avec édition inline */}\r\n              <Section icon={<User className=\"w-5 h-5\" />} title=\"Informations personnelles\">\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\r\n                  {[\r\n                    { label: ": "forms.divclassnameanimatef",
  " && (\r\n            <div className=\"animate-fade-in\">\r\n              {/* Préférences linguistiques et régionales */}\r\n              <Section icon={<Globe className=\"w-5 h-5\" />} title=\"Préférences linguistiques et régionales\">\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\r\n                  <div className=\"group\">\r\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Globe size={16} className=\"text-blue-500\" />\r\n                        Langue préférée\r\n                      </div>\r\n                    </label>\r\n                    <select className=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200 hover-glow\">\r\n                      <option value=\"fr\">Français</option>\r\n                      <option value=\"en\">English</option>\r\n                      <option value=\"zh\">中文</option>\r\n                      <option value=\"es\">Español</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div className=\"group\">\r\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Package size={16} className=\"text-green-500\" />\r\n                        Devise préférée\r\n                      </div>\r\n                    </label>\r\n                    <select className=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white transition-all duration-200 hover-glow\">\r\n                      <option value=\"EUR\">Euro (€)</option>\r\n                      <option value=\"USD\">Dollar US ($)</option>\r\n                      <option value=\"CNY\">Yuan chinois (¥)</option>\r\n                      <option value=\"GBP\">Livre sterling (£)</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Notifications améliorées */}\r\n              <Section icon={<Bell className=\"w-5 h-5\" />} title=\"Préférences de notification\">\r\n                <div className=\"space-y-4\">\r\n                  {[\r\n                    {\r\n                      id: ": "forms.divclassnameanimatef1",
  " && <Bell className=\"w-5 h-5 text-blue-500\" />}\r\n            </div>\r\n            <div className=\"font-medium text-sm\">{notification.message}</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        {/* Header avec avatar amélioré */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 mb-8 overflow-hidden\">\r\n          <div className=\"bg-gradient-to-r from-blue-600 via-purple-600 to-blue-800 h-32 relative\">\r\n            <div className=\"absolute inset-0 bg-black bg-opacity-20\"></div>\r\n          </div>\r\n\r\n          <div className=\"relative px-6 pb-6\">\r\n            <div className=\"flex flex-col sm:flex-row items-center sm:items-end -mt-16 sm:-mt-12\">\r\n              {/* Avatar avec bouton de changement */}\r\n              <div className=\"relative group\">\r\n                <div className=\"w-24 h-24 sm:w-28 sm:h-28 rounded-full border-4 border-white dark:border-gray-800 shadow-xl overflow-hidden bg-gray-200 dark:bg-gray-700\">\r\n                  <img\r\n                    src={avatar}\r\n                    alt=\"avatar\"\r\n                    className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\r\n                  />\r\n                  {uploadStatus === ": "forms.bellclassnamew5h5tex",
  " && <FileText className=\"w-12 h-12\" />}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Informations du fichier */}\r\n                <div className=\"space-y-2\">\r\n                  <h4 className=\"font-medium text-gray-900 dark:text-white text-sm truncate\">\r\n                    {file.name}\r\n                  </h4>\r\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                    <div>Taille: {formatFileSize(file.size)}</div>\r\n                    <div>Ajouté: {file.uploadedAt.toLocaleDateString()}</div>\r\n                    {file.metadata?.width && file.metadata?.height && (\r\n                      <div>Dimensions: {file.metadata.width}x{file.metadata.height}</div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Actions */}\r\n                <div className=\"flex gap-2 mt-3\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => setPreviewUrl(file.url)}\r\n                    className=\"flex-1\"\r\n                  >\r\n                    <Eye className=\"w-4 h-4 mr-1\" />\r\n                    Voir\r\n                  </Button>\r\n                  \r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => window.open(file.url, ": "forms.filetextclassnamew12",
  " && img.file);\r\n    if (imagesToUpload.length === 0) return;\r\n\r\n    setIsUploading(true);\r\n    \r\n    try {\r\n      if (onUpload) {\r\n        const files = imagesToUpload.map(img => img.file!);\r\n        const uploadedUrls = await onUpload(files);\r\n        \r\n        // Mettre à jour les images avec les URLs uploadées\r\n        setImages(prev => prev.map(img => {\r\n          const index = imagesToUpload.findIndex(uploadImg => uploadImg.id === img.id);\r\n          if (index !== -1) {\r\n            return { ...img, status: ": "common.imgfileifimagestoupl1",
  " && product.description !== null) {\r\n    return product.description[language] || \r\n           product.description.fr || \r\n           product.description.en || \r\n           product.description.chinese || \r\n           product.description.english || \r\n           product.description.french ||\r\n           Object.values(product.description)[0] || \r\n           ": "ecommerce.productdescriptionnu",
  " && product.description.french) {\n      return product.description.french;\n    } else if (product.description.english) {\n      return product.description.english;\n    }\n    return product.description.chinese;\n  };\n  \n  const priceCNY = product.price.cny;\n  const priceConverted = convertCurrency(priceCNY, currency);\n  \n  return (\n    <div className=": "forms.productdescriptionfr",
  " && progress < 100 && (\r\n                <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-600 space-y-3\">\r\n                  {/* Nouveau bouton de réservation interactif */}\r\n                  <button\r\n                    onClick={() => handleReserveSpace(container)}\r\n                    className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-4 py-3 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl transform hover:scale-105\"\r\n                  >\r\n                    <Package className=\"w-5 h-5\" />\r\n                    <span>Réserver de l": "forms.progress100divclassn",
  " && user?.supplierId === supplierId;\r\n    };\r\n\r\n    const canEditSupplierProfile = (supplierId: string): boolean => {\r\n        return isSupplierOwner(supplierId) || user?.type === ": "forms.usersupplieridsuppli",
  " + sizes[i];\r\n  };\r\n\r\n  const validateImage = (file: File): string | null => {\r\n    // Vérifier le type de fichier\r\n    if (!file.type.startsWith(": "common.sizesiconstvalidatei1",
  " /%3E%3C/svg%3E\"          >\n            {/* Votre vidéo personnalisée pour le site e-commerce */}\n            <source src=\"/videos/hero-video.mp4\" type=\"video/mp4\" />\n            {/* Vidéos de fallback en cas de problème de chargement */}\n            <source src=\"https://videos.pexels.com/video-files/3163534/3163534-uhd_2560_1440_30fps.mp4\" type=\"video/mp4\" />\n            <source src=\"https://videos.pexels.com/video-files/4827401/4827401-uhd_2560_1440_30fps.mp4\" type=\"video/mp4\" />\n            {/* Fallback pour les navigateurs qui ne supportent pas la vidéo */}\n            Votre navigateur ne supporte pas les vidéos HTML5.\n          </video>          {/* Overlay sombre pour améliorer la lisibilité du texte */}\n          <div className=\"absolute inset-0 bg-black bg-opacity-50\"></div>\n\n          {/* Gradient overlay animé pour garder l": "navigation.3e3csvg3evotrevideop",
  " // Type par défaut\r\n          }\r\n        } as MediaFile;\r\n      });\r\n\r\n      return Promise.all(filePromises);\r\n    } catch (error) {\r\n      console.error(": "common.typepardefautasmedia1",
  " />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Carte Machinerie *": "ecommerce.divdivdivdivcartemac1",
  " />\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n\n        {/* Navigation par catégories - Déplacée sous l": "navigation.buttonformdivdivdivn",
  " />\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n\n        {/* Navigation par catégories - Déplacée sous l'image */}\n        <div className=": "navigation.buttonformdivdivdivn1",
  " />\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation par catégories - Déplacée sous l": "navigation.buttonformdivdivdivn2",
  " />\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation par catégories - Déplacée sous l'image */}\n      <div className=": "navigation.buttonformdivdivdivn3",
  " />\n            Ajouter un utilisateur\n          <": "forms.ajouterunutilisateur",
  " />\n            {/* Fallback pour les navigateurs qui ne supportent pas la vidéo */}\n            Votre navigateur ne supporte pas les vidéos HTML5.\n          <": "navigation.fallbackpourlesnavig",
  " />\n            {/* Fallback pour les navigateurs qui ne supportent pas la vidéo */}\n            Votre navigateur ne supporte pas les vidéos HTML5.\n          </video>          {/* Overlay sombre pour améliorer la lisibilité du texte *": "navigation.fallbackpourlesnavig1",
  " />\n            {/* Fallback pour les navigateurs qui ne supportent pas la vidéo */}\n            Votre navigateur ne supporte pas les vidéos HTML5.\n          </video>          {/* Overlay sombre pour améliorer la lisibilité du texte */}\n          <div className=": "navigation.fallbackpourlesnavig2",
  " />\n            {/* Vidéos de fallback en cas de problème de chargement *": "navigation.videosdefallbackenca",
  " />\n            {/* Vidéos de fallback en cas de problème de chargement */}\n            <source src=": "navigation.videosdefallbackenca1",
  " />\n          </React.Suspense>\n\n          {/* Vidéo Background *": "navigation.reactsuspensevideoba",
  " />\n          </React.Suspense>\n\n          {/* Vidéo Background */}\n          <video\n            className=": "navigation.reactsuspensevideoba1",
  " />\r\n\r\n        {/* En-tête *": "common.entete3",
  " />\r\n\r\n        {/* En-tête */}\r\n        <div className=": "forms.entetedivclassname3",
  " />\r\n        \r\n        {/* Badge CE si certifié *": "common.badgecesicertifie",
  " />\r\n        \r\n        {/* Badge CE si certifié */}\r\n        {product.certifiedCE && (\r\n          <div className=": "forms.badgecesicertifiepro",
  " />\r\n                                                            <span>Modifier<": "forms.spanmodifier",
  " />\r\n                                                </button>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* État des tables *": "common.buttondivtdtrtbodyta",
  " />\r\n                                                </button>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* État des tables */}\r\n                <div className=": "forms.buttondivtdtrtbodyta",
  " />\r\n                                                <span>Télécharger une image<": "common.spantelechargeruneim1",
  " />\r\n                                                <span>Télécharger une image</span>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <label className=": "forms.spantelechargeruneim",
  " />\r\n                                                <span>Télécharger une image</span>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Footer */}\r\n                    <div className=": "forms.spantelechargeruneim1",
  " />\r\n                                                Création...\r\n                                            <": "common.creation",
  " />\r\n                                                Création...\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                <UserPlus className=": "forms.creationuserplusclas",
  " />\r\n                                                Créer Utilisateur\r\n                                            <": "admin.creerutilisateur1",
  " />\r\n                                            <span>Sauvegarder</span>\r\n                                        </>\r\n                                    )}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Panel de droite - Prévisualisation *": "common.spansauvegarderspanb",
  " />\r\n                                            <span>Sauvegarder</span>\r\n                                        </>\r\n                                    )}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Panel de droite - Prévisualisation */}\r\n                <div className=": "forms.spansauvegarderspanb",
  " />\r\n                                            Ajouter au devis\r\n                                        <": "forms.ajouteraudevis2",
  " />\r\n                                            Contacter le fournisseur\r\n                                        <": "ecommerce.contacterlefournisse",
  " />\r\n                                            Contacter le fournisseur\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Modal d'aperçu rapide */}\r\n            {showQuickView && selectedProduct && (\r\n                <div\r\n                    className=": "forms.contacterlefournisse",
  " />\r\n                                        <span>Télécharger catalogue<": "common.spantelechargercatal",
  " />\r\n                                        Création en cours...\r\n                                    <": "common.creationencours",
  " />\r\n                                        Création en cours...\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <Download className=": "forms.creationencoursdownl",
  " />\r\n                                        Créer une sauvegarde\r\n                                    <": "common.creerunesauvegarde1",
  " />\r\n                                        Créer une sauvegarde\r\n                                    </>\r\n                                )}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=": "forms.creerunesauvegardebu",
  " />\r\n                                    </button>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Section Détails *": "common.buttondivdivsectiond",
  " />\r\n                                    </button>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Section Détails */}\r\n                    <div className=": "forms.buttondivdivsectiond",
  " />\r\n                                    <span>Contacter le fournisseur<": "ecommerce.spancontacterlefourn",
  " />\r\n                                    <span>Contacter<": "common.spancontacter",
  " />\r\n                                    <span>Mode aperçu<": "common.spanmodeapercu",
  " />\r\n                                    <span>Mode aperçu</span>\r\n                                </button>\r\n                                <button\r\n                                    onClick={handleDownload}\r\n                                    className=": "forms.spanmodeapercuspanbu",
  " />\r\n                                    <span>Télécharger<": "common.spantelecharger",
  " />\r\n                                    <span>Télécharger</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=": "forms.spantelechargerspanb",
  " />\r\n                                    <span>Voir produits<": "ecommerce.spanvoirproduits",
  " />\r\n                                    Création en cours...\r\n                                <": "common.creationencours1",
  " />\r\n                                    Création en cours...\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <UserPlus className=": "forms.creationencoursuserp",
  " />\r\n                                    Créer Comptes Essentiels\r\n                                <": "common.creercomptesessentie",
  " />\r\n                                    Créer Comptes Essentiels\r\n                                </>\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Purge des utilisateurs *": "admin.creercomptesessentie",
  " />\r\n                                    Créer Comptes Essentiels\r\n                                </>\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Purge des utilisateurs */}\r\n                    <div className=": "forms.creercomptesessentie",
  " />\r\n                                    Purger Tous les Utilisateurs\r\n                                <": "admin.purgertouslesutilisa",
  " />\r\n                                    Purger Tous les Utilisateurs\r\n                                </>\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Création d": "admin.purgertouslesutilisa1",
  " />\r\n                                    Purger Tous les Utilisateurs\r\n                                </>\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Création d'utilisateur individuel */}\r\n                <div className=": "forms.purgertouslesutilisa",
  " />\r\n                                    Se connecter\r\n                                </>\r\n                            )}\r\n                        </button>\r\n\r\n                        {/* Mot de passe oublié *": "auth.seconnecterbuttonmot",
  " />\r\n                                    Se connecter\r\n                                </>\r\n                            )}\r\n                        </button>\r\n\r\n                        {/* Mot de passe oublié */}\r\n                        <div className=": "auth.seconnecterbuttonmot1",
  " />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Informations de livraison *": "common.buttondivdivinformat",
  " />\r\n                                <span>Éditeur de Carte de Visite<": "ecommerce.spanediteurdecartede",
  " />\r\n                                <span>Éditeur de Carte de Visite</span>\r\n                            </h2>\r\n                            <div className=": "forms.spanediteurdecartede",
  " />\r\n                                Créer un Utilisateur\r\n                            <": "admin.creerunutilisateur1",
  " />\r\n                                Créer un Utilisateur\r\n                            </h3>\r\n                            <button\r\n                                onClick={() => setShowCreateForm(!showCreateForm)}\r\n                                className=": "forms.creerunutilisateurh3",
  " />\r\n                                Gestion des Utilisateurs - Production\r\n                            <": "admin.gestiondesutilisateu",
  " />\r\n                                Télécharger les identifiants\r\n                            <": "common.telechargerlesidenti",
  " />\r\n                                Télécharger les identifiants\r\n                            </button>\r\n                            <button\r\n                                onClick={loadSummary}\r\n                                disabled={loading}\r\n                                className=": "forms.telechargerlesidenti",
  " />\r\n                            <span>Au moins 8 caractères<": "common.spanaumoins8caracter",
  " />\r\n                            <span>Au moins 8 caractères</span>\r\n                          </div>\r\n                          <div className=": "forms.spanaumoins8caracter",
  " />\r\n                            <span>Retour aux produits<": "navigation.spanretourauxproduit",
  " />\r\n                            Créer un Compte\r\n                        <": "common.creeruncompte1",
  " />\r\n                            Créer un Compte\r\n                        </Link>\r\n\r\n                        <Link\r\n                            to=": "common.creeruncomptelinklin",
  " />\r\n                            Purge Complète\r\n                        <": "common.purgecomplete",
  " />\r\n                            Purge Complète\r\n                        </h3>\r\n                        <p className=": "forms.purgecompleteh3pclas",
  " />\r\n                            Utilisateurs Essentiels\r\n                        <": "admin.utilisateursessentie",
  " />\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal de création/édition *": "common.buttondivtdtrtbodyta1",
  " />\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal de création/édition */}\r\n      {showCreateModal && (\r\n        <div className=": "forms.buttondivtdtrtbodyta1",
  " />\r\n                          Confirmer le nouveau mot de passe\r\n                        <": "auth.confirmerlenouveaumo",
  " />\r\n                          Nouveau mot de passe\r\n                        <": "auth.nouveaumotdepasse",
  " />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Gestion des données personnelles *": "common.buttondivdivdivdivse",
  " />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Gestion des données personnelles */}\r\n              <Section icon={<User className=": "forms.buttondivdivdivdivse",
  " />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Profile Info Overlay *": "common.buttondivdivprofilei",
  " />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Modal formulaire de contact */}\r\n            {showContactForm && (\r\n                <div\r\n                    className=": "forms.buttondivdivmodalfor",
  " />\r\n                        <span>Synchronisation Firebase</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Zone de résultats *": "common.spansynchronisationf",
  " />\r\n                        <span>Synchronisation Firebase</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Zone de résultats */}\r\n            {results && (\r\n                <div className=": "forms.spansynchronisationf",
  " />\r\n                        Devise préférée\r\n                      <": "common.devisepreferee",
  " />\r\n                        Devise préférée\r\n                      </div>\r\n                    </label>\r\n                    <select className=": "forms.deviseprefereedivlab",
  " />\r\n                        Environnement de production sécurisé\r\n                    <": "ecommerce.environnementdeprodu",
  " />\r\n                        Environnement de production sécurisé\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Formulaire */}\r\n                <div className=": "forms.environnementdeprodu",
  " />\r\n                        Langue préférée\r\n                      <": "common.languepreferee1",
  " />\r\n                        Langue préférée\r\n                      </div>\r\n                    </label>\r\n                    <select className=": "forms.langueprefereedivlab",
  " />\r\n                        Modifier\r\n                      <": "forms.modifier1",
  " />\r\n                        Sécurisé\r\n                      <": "common.securise",
  " />\r\n                        Sécurisé\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=": "forms.securisespandivdivdi",
  " />\r\n                        {user.country || 'France'}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Bouton d'édition */}\r\n                  <div className=": "forms.usercountryfrancespa",
  " />\r\n                        {user.language || 'Français'}\r\n                      </span>\r\n                      <span className=": "forms.userlanguagefrancais",
  " />\r\n                      Alertes de sécurité\r\n                    <": "admin.alertesdesecurite1",
  " />\r\n                      Alertes de sécurité\r\n                    </h4>\r\n                    <div className=": "forms.alertesdesecuriteh4d",
  " />\r\n                      Modifier\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Statistiques du profil *": "forms.modifierbuttondivsec",
  " />\r\n                    </button>\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Spécifications techniques *": "common.buttonspandivdivspec",
  " />\r\n                    </button>\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Spécifications techniques */}\r\n          <div>\r\n            <h3 className=": "forms.buttonspandivdivspec",
  " />\r\n                    <span>Réserver de l": "common.spanreserverdel",
  " />\r\n                    <span>Réserver de l'espace</span>\r\n                  </button>\r\n                  \r\n                  {/* Bouton de précommande existant (optionnel) */}\r\n                  <button\r\n                    onClick={() => handlePreorder(container)}\r\n                    className=": "forms.spanreserverdelespac",
  " />\r\n                    <span>{company.country}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\nCompanyItem.displayName = 'CompanyItem';\r\n\r\n// Composant principal optimisé\r\nconst OptimizedCompaniesPage: React.FC = memo(() => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all');\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    // Requête optimisée avec cache intelligent\r\n    const { data: allCompanies, loading, isStale } = useOptimizedQuery<Company>('companies', {\r\n        select: 'id, name, email, phone, country, logo, status, created_at',\r\n        orderBy: { column: 'created_at', ascending: false },\r\n        cacheKey: 'companies-list',\r\n        cacheTTL: 300000, // 5 minutes\r\n        enableRealtime: true\r\n    });\r\n\r\n    // Recherche avec debounce pour éviter trop de requêtes\r\n    const { data: searchResults } = useDebouncedSearch<Company>(\r\n        'companies',\r\n        searchTerm,\r\n        ['name', 'email', 'country'],\r\n        300, // 300ms delay\r\n        {\r\n            select: 'id, name, email, phone, country, logo, status, created_at',\r\n            cacheKey: `companies-search-${searchTerm}`,\r\n            cacheTTL: 60000 // 1 minute pour les recherches\r\n        }\r\n    );\r\n\r\n    // Filtrage mémorisé pour éviter les recalculs inutiles\r\n    const filteredCompanies = useMemo(() => {\r\n        let companies = searchTerm ? searchResults : allCompanies;\r\n\r\n        if (!companies) return [];\r\n\r\n        if (statusFilter !== 'all') {\r\n            companies = companies.filter(company => company.status === statusFilter);\r\n        }\r\n\r\n        return companies;\r\n    }, [allCompanies, searchResults, searchTerm, statusFilter]);\r\n\r\n    // Statistiques mémorisées\r\n    const stats = useMemo(() => {\r\n        const total = filteredCompanies.length;\r\n        const active = filteredCompanies.filter(c => c.status === 'active').length;\r\n        const inactive = total - active;\r\n\r\n        return { total, active, inactive };\r\n    }, [filteredCompanies]);\r\n\r\n    // Rendu des items pour la liste virtualisée\r\n    const renderCompanyItem = ({ index, data }: { index: number; data: Company[] }) => (\r\n        <CompanyItem company={data[index]} />\r\n    );\r\n\r\n    // Composant de filtres\r\n    const FilterComponent = memo(() => (\r\n        <div className=": "auth.spancompanycountrysp",
  " />\r\n                    Créer Comptes Essentiels\r\n                <": "common.creercomptesessentie2",
  " />\r\n                    Créer Comptes Essentiels\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={deleteAllUsers}\r\n                    disabled={isResetting || isDeleting || isCreating}\r\n                    className=": "forms.creercomptesessentie1",
  " />\r\n                    Le système complet configure automatiquement :\r\n                <": "common.lesystemecompletconf",
  " />\r\n                    Le système complet configure automatiquement :\r\n                </h3>\r\n                <div className=": "forms.lesystemecompletconf",
  " />\r\n                    Supprimer Tous\r\n                <": "forms.supprimertous",
  " />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Modal de prévisualisation *": "common.buttondivdivdivdivmo",
  " />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Modal de prévisualisation */}\r\n      {previewUrl && (\r\n        <div className=": "forms.buttondivdivdivdivmo",
  " />\r\n                  Télécharger ({selectedFiles.length} fichier{selectedFiles.length > 1 ? ": "common.telechargerselectedf",
  " />\r\n                </button>\r\n\r\n                {/* Informations du fichier *": "common.buttoninformationsdu",
  " />\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Navigation des catégories *": "navigation.buttondivformdivdivn1",
  " />\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Navigation des catégories */}\r\n        <div className=": "navigation.buttondivformdivdivn3",
  " />\r\n                <span>Voir détails</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Badge de priorité *": "common.spanvoirdetailsspand",
  " />\r\n                <span>Voir détails</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Badge de priorité */}\r\n          {notification.priority === 'urgent' && (\r\n            <div className=": "forms.spanvoirdetailsspand",
  " />\r\n              )}\r\n              <span>Marquer tout comme lu</span>\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Liste des notifications *": "common.spanmarquertoutcomme1",
  " />\r\n              <span>Valider la réservation<": "common.spanvaliderlareserva",
  " />\r\n              Ajouter un produit\r\n            <": "forms.ajouterunproduit",
  " />\r\n              Enregistrer les modifications\r\n            <": "forms.enregistrerlesmodifi",
  " />\r\n              Tout supprimer\r\n            <": "forms.toutsupprimer",
  " />\r\n              Upload de fichiers\r\n            </h2>\r\n            <FileUpload\r\n              onUpload={handleFileUpload}\r\n              maxFiles={5}\r\n              maxSizePerFile={10}\r\n              acceptedTypes={['.pdf', '.doc', '.docx', '.txt', '.jpg', '.png', '.xlsx']}\r\n            />\r\n          </div>\r\n\r\n          {/* Liste des fichiers uploadés */}\r\n          {uploadedFiles.length > 0 && (\r\n            <div className=": "forms.uploaddefichiersh2fi",
  " />\r\n            <span>Nouveau conteneur<": "common.spannouveauconteneur",
  " />\r\n          Informations techniques\r\n        <": "common.informationstechniqu",
  " />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case 'approved':\r\n        return 'Approuvé';\r\n      case 'pending':\r\n        return 'En attente';\r\n      case 'rejected':\r\n        return 'Rejeté';\r\n      default:\r\n        return status;\r\n    }\r\n  };\r\n\r\n  const getTypeText = (type: string) => {\r\n    switch (type) {\r\n      case 'contract':\r\n        return 'Contrat';\r\n      case 'invoice':\r\n        return 'Facture';\r\n      case 'certificate':\r\n        return 'Certificat';\r\n      case 'manual':\r\n        return 'Manuel';\r\n      case 'other':\r\n        return 'Autre';\r\n      default:\r\n        return type;\r\n    }\r\n  };\r\n\r\n  const formatFileSize = (bytes: number) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  const handleUploadDocuments = async (files: File[], metadata: any) => {\r\n    try {\r\n      // Simulation de l'upload - dans un vrai projet, vous feriez un appel API\r\n      console.log('Uploading files:', files);\r\n      console.log('Metadata:', metadata);\r\n\r\n      // Simuler un délai d'upload\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n      // Ajouter les nouveaux documents à la liste\r\n      const newDocuments = files.map((file, index) => ({\r\n        id: `new-${Date.now()}-${index}`,\r\n        name: file.name,\r\n        type: metadata.type,\r\n        size: formatFileSize(file.size),\r\n        uploadDate: new Date().toISOString().split('T')[0],\r\n        status: 'pending' as const,\r\n        downloadCount: 0,\r\n        category: metadata.category\r\n      }));\r\n\r\n      setDocuments(prev => [...newDocuments, ...prev]);\r\n      \r\n      // Afficher un message de succès\r\n      alert(`${files.length} document(s) téléchargé(s) avec succès !`);\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'upload:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleDownloadDocument = (document: Document) => {\r\n    // Simulation du téléchargement\r\n    console.log('Downloading document:', document.name);\r\n    \r\n    // Créer un lien de téléchargement fictif\r\n    const link = window.document.createElement('a');\r\n    link.href = `data:application/pdf;base64,JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PAovVGl0bGUgKCR7ZG9jdW1lbnQubmFtZX0pCi9Qcm9kdWNlciAoKQo+PgplbmRvYmoKMiAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMyAwIFIKPj4KZW5kb2JqCjMgMCBvYmoKPDwKL1R5cGUgL1BhZ2VzCi9LaWRzIFs0IDAgUl0KL0NvdW50IDEKL01lZGlhQm94IFswIDAgNjEyIDc5Ml0KPj4KZW5kb2JqCjQgMCBvYmoKPDwKL1R5cGUgL1BhZ2UKL1BhcmVudCAzIDAgUgovUmVzb3VyY2VzIDw8Ci9Gb250IDw8Ci9GMSAKPDwKL1R5cGUgL0ZvbnQKL1N1YnR5cGUgL1R5cGUxCi9CYXNlRm9udCAvSGVsdmV0aWNhCj4+Cj4+Cj4+Ci9Db250ZW50cyA1IDAgUgo+PgplbmRvYmoKNSAwIG9iago8PAovTGVuZ3RoIDQ0Cj4+CnN0cmVhbQpCVAovRjEgMTIgVGYKNzIgNzIwIFRkCihEb2N1bWVudCBkZSBkZW1vbnN0cmF0aW9uKSBUagpFVAplbmRzdHJlYW0KZW5kb2JqCnhyZWYKMCA2CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAwOSAwMDAwMCBuIAowMDAwMDAwMDU4IDAwMDAwIG4gCjAwMDAwMDAxMDMgMDAwMDAgbiAKMDAwMDAwMDE3MyAwMDAwMCBuIAowMDAwMDAwMzAxIDAwMDAwIG4gCnRyYWlsZXIKPDwKL1NpemUgNgovUm9vdCAyIDAgUgo+PgpzdGFydHhyZWYKMzk0CiUlRU9G`;\r\n    link.download = document.name;\r\n    window.document.body.appendChild(link);\r\n    link.click();\r\n    window.document.body.removeChild(link);\r\n\r\n    // Incrémenter le compteur de téléchargements\r\n    setDocuments(prev => prev.map(doc => \r\n      doc.id === document.id \r\n        ? { ...doc, downloadCount: doc.downloadCount + 1 }\r\n        : doc\r\n    ));\r\n  };\r\n  const handleDeleteDocument = (documentId: string) => {\r\n    if (confirm(t('supplier.documents.confirm.delete'))) {\r\n      setDocuments(prev => prev.filter(doc => doc.id !== documentId));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SupplierLayout>\r\n      <div className=": "forms.defaultreturnnullcon",
  " />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case 'approved':\r\n        return 'Approuvé';\r\n      case 'pending':\r\n        return 'En attente';\r\n      case 'rejected':\r\n        return 'Rejeté';\r\n      default:\r\n        return status;\r\n    }\r\n  };\r\n\r\n  const getTypeText = (type: string) => {\r\n    switch (type) {\r\n      case 'contract':\r\n        return 'Contrat';\r\n      case 'invoice':\r\n        return 'Facture';\r\n      case 'certificate':\r\n        return 'Certificat';\r\n      case 'manual':\r\n        return 'Manuel';\r\n      case 'other':\r\n        return 'Autre';\r\n      default:\r\n        return type;\r\n    }\r\n  };\r\n\r\n  const formatFileSize = (bytes: number) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n  const handleUploadDocuments = async (files: File[], metadata: any) => {\r\n    try {\r\n      console.log('Uploading files:', files);\r\n      console.log('Metadata:', metadata);\r\n\r\n      // Utiliser le vrai service d'upload\r\n      const results = await uploadService.uploadFiles(\r\n        files,\r\n        {\r\n          folder: 'documents',\r\n          maxSize: 50, // 50MB max par fichier\r\n          allowedTypes: ['.pdf', '.doc', '.docx', '.txt', '.jpg', '.jpeg', '.png', '.xls', '.xlsx']\r\n        },\r\n        (fileIndex, progress) => {\r\n          console.log(`Fichier ${fileIndex + 1}: ${progress}% uploadé`);\r\n        }\r\n      );\r\n\r\n      // Ajouter les nouveaux documents à la liste\r\n      const newDocuments = files.map((file, index) => {\r\n        const result = results[index];\r\n        return {\r\n          id: `new-${Date.now()}-${index}`,\r\n          name: file.name,\r\n          type: metadata.type,\r\n          size: formatFileSize(file.size),\r\n          uploadDate: new Date().toISOString().split('T')[0],\r\n          status: result.success ? 'approved' as const : 'rejected' as const,\r\n          downloadCount: 0,\r\n          category: metadata.category,\r\n          url: result.url // Stocker l'URL pour le téléchargement\r\n        };\r\n      });\r\n\r\n      setDocuments(prev => [...newDocuments, ...prev]);\r\n      \r\n      // Afficher un message de succès\r\n      const successCount = results.filter(r => r.success).length;\r\n      alert(`${successCount}/${files.length} document(s) téléchargé(s) avec succès !`);\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'upload:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  const handleDownloadDocument = (document: Document) => {\r\n    console.log('Downloading document:', document.name);\r\n    \r\n    if (document.url) {\r\n      // Télécharger le vrai fichier\r\n      const link = window.document.createElement('a');\r\n      link.href = document.url;\r\n      link.download = document.name;\r\n      link.target = '_blank'; // Ouvrir dans un nouvel onglet si c'est une URL externe\r\n      window.document.body.appendChild(link);\r\n      link.click();\r\n      window.document.body.removeChild(link);\r\n    } else {\r\n      // Fallback: créer un PDF fictif pour les documents de démonstration\r\n      const link = window.document.createElement('a');\r\n      link.href = `data:application/pdf;base64,JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PAovVGl0bGUgKCR7ZG9jdW1lbnQubmFtZX0pCi9Qcm9kdWNlciAoKQo+PgplbmRvYmoKMiAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMyAwIFIKPj4KZW5kb2JqCjMgMCBvYmoKPDwKL1R5cGUgL1BhZ2VzCi9LaWRzIFs0IDAgUl0KL0NvdW50IDEKL01lZGlhQm94IFswIDAgNjEyIDc5Ml0KPj4KZW5kb2JqCjQgMCBvYmoKPDwKL1R5cGUgL1BhZ2UKL1BhcmVudCAzIDAgUgovUmVzb3VyY2VzIDw8Ci9Gb250IDw8Ci9GMSAKPDwKL1R5cGUgL0ZvbnQKL1N1YnR5cGUgL1R5cGUxCi9CYXNlRm9udCAvSGVsdmV0aWNhCj4+Cj4+Cj4+Ci9Db250ZW50cyA1IDAgUgo+PgplbmRvYmoKNSAwIG9iago8PAovTGVuZ3RoIDQ0Cj4+CnN0cmVhbQpCVAovRjEgMTIgVGYKNzIgNzIwIFRkCihEb2N1bWVudCBkZSBkZW1vbnN0cmF0aW9uKSBUagpFVAplbmRzdHJlYW0KZW5kb2JqCnhyZWYKMCA2CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAwOSAwMDAwMCBuIAowMDAwMDAwMDU4IDAwMDAwIG4gCjAwMDAwMDAxMDMgMDAwMDAgbiAKMDAwMDAwMDE3MyAwMDAwMCBuIAowMDAwMDAwMzAxIDAwMDAwIG4gCnRyYWlsZXIKPDwKL1NpemUgNgovUm9vdCAyIDAgUgo+PgpzdGFydHhyZWYKMzk0CiUlRU9G`;\r\n      link.download = document.name;\r\n      window.document.body.appendChild(link);\r\n      link.click();\r\n      window.document.body.removeChild(link);\r\n    }\r\n\r\n    // Incrémenter le compteur de téléchargements\r\n    setDocuments(prev => prev.map(doc => \r\n      doc.id === document.id \r\n        ? { ...doc, downloadCount: doc.downloadCount + 1 }\r\n        : doc\r\n    ));\r\n  };\r\n  const handleDeleteDocument = async (document: Document) => {\r\n    if (confirm(t('supplier.documents.confirm.delete'))) {\r\n      try {\r\n        // Supprimer du serveur si c'est un fichier uploadé\r\n        if (document.url) {\r\n          await uploadService.deleteFile(document.url);\r\n        }\r\n        \r\n        // Retirer de la liste locale\r\n        setDocuments(prev => prev.filter(doc => doc.id !== document.id));\r\n        \r\n        alert('Document supprimé avec succès !');\r\n      } catch (error) {\r\n        console.error('Erreur lors de la suppression:', error);\r\n        alert('Erreur lors de la suppression du document');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SupplierLayout>\r\n      <div className=": "navigation.defaultreturnnullcon",
  " />;\r\n      default: return null;\r\n    }\r\n  };\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case 'pending': return t('supplier.orders.pending');\r\n      case 'confirmed': return t('supplier.orders.confirmed');\r\n      case 'shipped': return t('supplier.orders.shipped');\r\n      case 'delivered': return t('supplier.orders.delivered');\r\n      case 'cancelled': return 'Annulée';\r\n      default: return status;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\r\n      case 'confirmed': return 'bg-blue-100 text-blue-800';\r\n      case 'shipped': return 'bg-orange-100 text-orange-800';\r\n      case 'delivered': return 'bg-green-100 text-green-800';\r\n      case 'cancelled': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const updateOrderStatus = (orderId: string, newStatus: Order['status']) => {\r\n    setOrders(prev => prev.map(order => \r\n      order.id === orderId ? { ...order, status: newStatus } : order\r\n    ));\r\n  };\r\n\r\n  // Statistiques\r\n  const stats = {\r\n    total: orders.length,\r\n    pending: orders.filter(o => o.status === 'pending').length,\r\n    confirmed: orders.filter(o => o.status === 'confirmed').length,\r\n    shipped: orders.filter(o => o.status === 'shipped').length,\r\n    revenue: orders.reduce((sum, order) => sum + order.total, 0)\r\n  };\r\n  return (\r\n    <div className=": "forms.defaultreturnnullcon1",
  " />;\r\n    }\r\n  };\r\n\r\n  const createPreview = (file: File): Promise<string | undefined> => {\r\n    return new Promise((resolve) => {\r\n      if (file.type.startsWith('image/')) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => resolve(e.target?.result as string);\r\n        reader.onerror = () => resolve(undefined);\r\n        reader.readAsDataURL(file);\r\n      } else {\r\n        resolve(undefined);\r\n      }\r\n    });\r\n  };\r\n\r\n  const validateFile = (file: File): string | null => {\r\n    // Vérifier la taille\r\n    if (file.size > maxSizePerFile * 1024 * 1024) {\r\n      return `Le fichier ${file.name} dépasse la taille maximale de ${maxSizePerFile}MB`;\r\n    }\r\n\r\n    // Vérifier le type\r\n    const extension = '.' + file.name.split('.').pop()?.toLowerCase();\r\n    if (!acceptedTypes.includes(extension)) {\r\n      return `Le type de fichier ${extension} n'est pas autorisé`;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const handleFileSelect = async (files: FileList) => {\r\n    const fileArray = Array.from(files);\r\n    \r\n    // Vérifier le nombre maximum de fichiers\r\n    if (uploadFiles.length + fileArray.length > maxFiles) {\r\n      alert(`Vous ne pouvez télécharger que ${maxFiles} fichiers au maximum`);\r\n      return;\r\n    }\r\n\r\n    // Valider chaque fichier\r\n    const validationErrors: string[] = [];\r\n    const validFiles: File[] = [];\r\n\r\n    for (const file of fileArray) {\r\n      const error = validateFile(file);\r\n      if (error) {\r\n        validationErrors.push(error);\r\n      } else {\r\n        validFiles.push(file);\r\n      }\r\n    }\r\n\r\n    if (validationErrors.length > 0) {\r\n      alert(validationErrors.join('\\n'));\r\n    }\r\n\r\n    if (validFiles.length === 0) return;\r\n\r\n    // Créer les objets UploadFile\r\n    const newUploadFiles: UploadFile[] = [];\r\n    for (const file of validFiles) {\r\n      const preview = await createPreview(file);\r\n      newUploadFiles.push({\r\n        file,\r\n        id: generateId(),\r\n        progress: 0,\r\n        status: 'pending',\r\n        preview\r\n      });\r\n    }\r\n\r\n    setUploadFiles(prev => [...prev, ...newUploadFiles]);\r\n    onFileSelect?.(validFiles);\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragging(false);\r\n    handleFileSelect(e.dataTransfer.files);\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragging(false);\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files) {\r\n      handleFileSelect(e.target.files);\r\n    }\r\n  };\r\n\r\n  const removeFile = (id: string) => {\r\n    setUploadFiles(prev => prev.filter(f => f.id !== id));\r\n  };\r\n\r\n  const simulateUpload = async (uploadFile: UploadFile): Promise<void> => {\r\n    return new Promise((resolve) => {\r\n      setUploadFiles(prev => prev.map(f => \r\n        f.id === uploadFile.id ? { ...f, status: 'uploading' } : f\r\n      ));\r\n\r\n      // Simuler le progrès d'upload\r\n      let progress = 0;\r\n      const interval = setInterval(() => {\r\n        progress += Math.random() * 20;\r\n        if (progress >= 100) {\r\n          progress = 100;\r\n          clearInterval(interval);\r\n          \r\n          setUploadFiles(prev => prev.map(f => \r\n            f.id === uploadFile.id ? { ...f, progress: 100, status: 'success' } : f\r\n          ));\r\n          \r\n          resolve();\r\n        } else {\r\n          setUploadFiles(prev => prev.map(f => \r\n            f.id === uploadFile.id ? { ...f, progress } : f\r\n          ));\r\n        }\r\n      }, 200);\r\n    });\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (uploadFiles.length === 0) return;\r\n\r\n    setIsUploading(true);\r\n    \r\n    try {\r\n      const filesToUpload = uploadFiles.filter(f => f.status === 'pending');\r\n      \r\n      if (onUpload) {\r\n        await onUpload(filesToUpload.map(f => f.file));\r\n      } else {\r\n        // Simulation d'upload si pas de handler fourni\r\n        for (const uploadFile of filesToUpload) {\r\n          await simulateUpload(uploadFile);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'upload:', error);\r\n      // Marquer les fichiers en erreur\r\n      setUploadFiles(prev => prev.map(f => \r\n        f.status === 'uploading' ? { ...f, status: 'error' } : f\r\n      ));\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  const clearCompleted = () => {\r\n    setUploadFiles(prev => prev.filter(f => f.status !== 'success'));\r\n  };\r\n\r\n  const getStatusIcon = (status: UploadFile['status']) => {\r\n    switch (status) {\r\n      case 'success':\r\n        return <CheckCircle className=": "forms.constcreatepreviewfi",
  " />;\r\n  };\r\n\r\n  // Données fictives pour illustration\r\n  const fakeOrders = [\r\n    { id: ": "ecommerce.donneesfictivespouri",
  " />;\r\n  };\r\n\r\n  // Données fictives pour illustration\r\n  const fakeOrders = [\r\n    { id: 'cmd-001', status: 'Livré', total: 1200, date: '2024-06-01' },\r\n    { id: 'cmd-002', status: 'En cours', total: 850, date: '2024-06-10' },\r\n  ];\r\n  const fakeMessages = [\r\n    { id: 'msg-001', from: 'Fournisseur A', content: 'Votre commande a été expédiée.', date: '2024-06-02' },\r\n    { id: 'msg-002', from: 'Sourcer B', content: 'Avez-vous reçu le devis ?', date: '2024-06-11' },\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=": "forms.donneesfictivespouri",
  " />}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {showContactForm && (\n        <div className=": "forms.buttondivdivdivdivdi",
  " />}\n            />\n            <Select\n              value={roleFilter}\n              onChange={(e) => setRoleFilter(e.target.value)}\n              options={[\n                { value: '', label: 'Tous les rôles' },\n              { value: 'customer', label: 'Client' },\n              { value: 'supplier', label: 'Fournisseur' },\n                { value: 'admin', label: 'Administrateur' },\n            ]}\n            className=": "forms.selectvaluerolefilte",
  " />}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Messages d": "common.buttondivdivmessages",
  " />}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Messages d'erreur et de succès */}\r\n                        {error && (\r\n                            <div className=": "forms.buttondivdivmessages",
  " />}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Informations du fichier *": "common.divdivinformationsdu",
  " />}\r\n            </button>\r\n\r\n            {/* User profile link *": "admin.buttonuserprofilelin",
  " : `Total: ${getTotalPrice().toFixed(2)}€`}\r\n                </div>\r\n                {quoteItems.length > 0 && (\r\n                    <div className=\"mt-2 space-y-1\">\r\n                        {quoteItems.map((item) => (\r\n                            <div key={item.productId} className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                                {item.product.name} - {item.quantity} unités\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* LocalStorage info */}\r\n            <div className=\"text-xs text-gray-400 dark:text-gray-500\">\r\n                <div>Favoris: {localStorage.getItem(": "forms.totalgettotalpriceto",
  " : `Télécharger (${images.filter(img => img.status === ": "common.telechargerimagesfil1",
  " : password.trim(), // Mot de passe temporaire pour les fournisseurs, sourceurs et influenceurs\n        name.trim(), \n        role\n      );\n      \n      if (registerError) {\n        throw new Error(registerError);\n      }\n      \n      if (user) {\n        switch (user.role) {\n          case ": "auth.passwordtrimmotdepas",
  " : selectedRole;\n\n      // Connexion de démonstration basée sur le rôle déterminé\n      ": "auth.selectedroleconnexio",
  " : selectedRole;\n\n      // Connexion de démonstration basée sur le rôle déterminé\n      // Pour simplifier, nous utiliserons une connexion fictive\n      const demoUser = {\n        id: `demo_${userRole}_${Date.now()}`,\n        email: email.trim(),\n        name: `Utilisateur ${userRole}`,\n        role: userRole as ": "auth.selectedroleconnexio2",
  " : selectedRole;\n      \n      // Connexion Google simplifiée avec le rôle déterminé\n      const demoUser = {\n        id: `google_${userRole}_${Date.now()}`,\n        email: ": "auth.selectedroleconnexio5",
  " : unreadCount}\r\n                    </span>\r\n                  )}\r\n                </button>\r\n              )}\r\n\r\n              {/* Theme toggle */}\r\n              <button\r\n                type=\"button\"\r\n                onClick={toggleTheme}\r\n                className=\"flex items-center space-x-2 text-white hover:text-orange-200 transition-colors cursor-pointer p-2 rounded focus:outline-none focus:ring-2 focus:ring-orange-300\"\r\n                title=\"Changer le thème\"\r\n              >\r\n                {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\r\n              </button>\r\n\r\n              {/* User */}\r\n              {user && (\r\n                <Link\r\n                  to={user.role === ": "forms.unreadcountspanbutto",
  " : unreadCount}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {/* Theme toggle */}\r\n            <button\r\n              onClick={toggleTheme}\r\n              className=\"flex items-center space-x-2 text-white hover:text-orange-200 transition-colors cursor-pointer p-2\"\r\n              title=\"Changer le thème\"\r\n            >\r\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\r\n            </button>\r\n\r\n            {/* User profile link */}\r\n            {user ? (\r\n              <Link\r\n                to={user.role === ": "forms.unreadcountspandivth",
  " ? <CheckCircle className=\"h-5 w-5 mt-0.5 mr-3 flex-shrink-0\" /> :\r\n                            <AlertTriangle className=\"h-5 w-5 mt-0.5 mr-3 flex-shrink-0\" />}\r\n                        <p>{message.text}</p>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Statistiques */}\r\n                {summary && (\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n                        <div className=\"bg-white p-6 rounded-lg shadow border\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                                <div>\r\n                                    <p className=\"text-sm font-medium text-gray-600\">Total Utilisateurs</p>\r\n                                    <p className=\"text-3xl font-bold text-gray-900\">{summary.total}</p>\r\n                                </div>\r\n                                <Users className=\"h-8 w-8 text-blue-600\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"bg-white p-6 rounded-lg shadow border\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                                <div>\r\n                                    <p className=\"text-sm font-medium text-gray-600\">Administrateurs</p>\r\n                                    <p className=\"text-3xl font-bold text-gray-900\">{summary.byRole.admin}</p>\r\n                                </div>\r\n                                <Shield className=\"h-8 w-8 text-red-600\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"bg-white p-6 rounded-lg shadow border\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                                <div>\r\n                                    <p className=\"text-sm font-medium text-gray-600\">Utilisateurs Actifs</p>\r\n                                    <p className=\"text-3xl font-bold text-green-600\">{summary.active}</p>\r\n                                </div>\r\n                                <CheckCircle className=\"h-8 w-8 text-green-600\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"bg-white p-6 rounded-lg shadow border\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                                <div>\r\n                                    <p className=\"text-sm font-medium text-gray-600\">Fournisseurs</p>\r\n                                    <p className=\"text-3xl font-bold text-gray-900\">{summary.byRole.supplier}</p>\r\n                                </div>\r\n                                <Settings className=\"h-8 w-8 text-yellow-600\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Actions principales */}\r\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\r\n                    {/* Création des utilisateurs essentiels */}\r\n                    <div className=\"bg-white p-6 rounded-lg shadow border\">\r\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\r\n                            <UserPlus className=\"h-5 w-5 text-green-600 mr-2\" />\r\n                            Utilisateurs Essentiels\r\n                        </h3>\r\n                        <p className=\"text-gray-600 mb-4\">\r\n                            Créer les comptes administrateurs essentiels pour la production (admin principal, backup, support).\r\n                        </p>\r\n                        <button\r\n                            onClick={handleCreateEssentialUsers}\r\n                            disabled={isCreating}\r\n                            className=\"w-full flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50\"\r\n                        >\r\n                            {isCreating ? (\r\n                                <>\r\n                                    <RefreshCw className=\"h-4 w-4 animate-spin mr-2\" />\r\n                                    Création en cours...\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <UserPlus className=\"h-4 w-4 mr-2\" />\r\n                                    Créer Comptes Essentiels\r\n                                </>\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Purge des utilisateurs */}\r\n                    <div className=\"bg-white p-6 rounded-lg shadow border\">\r\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\r\n                            <Trash2 className=\"h-5 w-5 text-red-600 mr-2\" />\r\n                            Purge Complète\r\n                        </h3>\r\n                        <p className=\"text-gray-600 mb-4\">\r\n                            ⚠️ <strong>DANGER:</strong> Supprime TOUS les utilisateurs existants. Opération irréversible.\r\n                        </p>\r\n                        <button\r\n                            onClick={handlePurgeUsers}\r\n                            disabled={isPurging}\r\n                            className=\"w-full flex items-center justify-center px-4 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50\"\r\n                        >\r\n                            {isPurging ? (\r\n                                <>\r\n                                    <RefreshCw className=\"h-4 w-4 animate-spin mr-2\" />\r\n                                    Suppression en cours...\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                                    Purger Tous les Utilisateurs\r\n                                </>\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Création d": "navigation.checkcircleclassname",
  " ? checked : value\r\n        }));\r\n    }, []);\r\n\r\n    const handleProductSelect = useCallback((product: string) => {\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            interestedProducts: prev.interestedProducts.includes(product)\r\n                ? prev.interestedProducts.filter(p => p !== product)\r\n                : [...prev.interestedProducts, product]\r\n        }));\r\n    }, []);\r\n\r\n    // Optimistic update pour les mutations\r\n    const optimisticUpdateCompany = useCallback((data: Partial<Company>) => {\r\n        onUpdate({ ...prospect, ...data });\r\n    }, [prospect, onUpdate]);\r\n\r\n    const handleSubmit = useCallback(async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // Données de l": "navigation.checkedvalueconsthan1",
  " ? conversationMessages[0].to : conversationMessages[0].from,\r\n      subject: `Re: ${conversationMessages[0]?.subject}`,\r\n      content: newMessage,\r\n      timestamp: new Date(),\r\n      isRead: true,\r\n      hasAttachment: false,\r\n      priority: ": "common.conversationmessages",
  " ? conversationMessages[0].to : conversationMessages[0].from}\r\n                    <": "common.conversationmessages1",
  " ? product.price : product.price.cny,\r\n        category: product.category,\r\n        images: product.images || [],\r\n        stock: 100, // Valeur par défaut\r\n        sku: product.id || ": "ecommerce.productpriceproductp1",
  " ?`)) {\n      // Ici, vous appelleriez votre API pour supprimer le produit\n      ": "forms.icivousappelleriezvo",
  " ?`)) {\n      // Ici, vous appelleriez votre API pour supprimer le produit\n      // Pour la démo, on simule une suppression réussie\n      success(`Le produit ": "forms.icivousappelleriezvo2",
  " Dynamic AMOLED 2X',\r\n                'Processeur': 'Exynos 2400',\r\n                'Mémoire': '8GB RAM',\r\n                'Stockage': '128GB',\r\n                'Caméra': '50MP + 12MP + 10MP',\r\n                'Batterie': '4000mAh',\r\n                'OS': 'Android 14'\r\n            }\r\n        },\r\n        {\r\n            id: '2',\r\n            name: 'Casque Sony WH-1000XM4',\r\n            price: 279,\r\n            originalPrice: 349,\r\n            discount: 20,\r\n            brand: 'Sony',\r\n            category: 'Électronique',\r\n            image: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=800&h=800&fit=crop',\r\n            isPopular: true,\r\n            features: ['Bluetooth', 'Noise Cancelling', '30h autonomie', 'Charge rapide'],\r\n            description: 'Le casque sans fil Sony WH-1000XM4 avec réduction de bruit leader de l\\'industrie vous offre une expérience audio exceptionnelle. Profitez d\\'une qualité sonore premium et d\\'un confort optimal pour de longues sessions d\\'écoute.',\r\n            rating: 4.9,\r\n            reviews: 892,\r\n            images: [\r\n                'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=800&h=800&fit=crop',\r\n                'https://images.unsplash.com/photo-1484704849700-f032a568e944?w=800&h=800&fit=crop',\r\n                'https://images.unsplash.com/photo-1546435770-a3e426bf472b?w=800&h=800&fit=crop'\r\n            ],\r\n            specifications: {\r\n                'Type': 'Casque circum-auriculaire',\r\n                'Connectivité': 'Bluetooth 5.0, Jack 3.5mm',\r\n                'Autonomie': '30 heures',\r\n                'Réduction de bruit': 'Oui (ANC)',\r\n                'Poids': '254g',\r\n                'Charge': 'USB-C',\r\n                'Assistant vocal': 'Google Assistant, Alexa'\r\n            }\r\n        },\r\n        // ... autres produits similaires\r\n    ];\r\n\r\n    return products.find(p => p.id === id) || null;\r\n};\r\n\r\nconst ProductDetailPage: React.FC = () => {\r\n    const { id } = useParams<{ id: string }>();\r\n    const navigate = useNavigate();\r\n    const [product, setProduct] = useState<SimpleProduct | null>(null);\r\n    const [selectedImage, setSelectedImage] = useState(0);\r\n    const [quantity, setQuantity] = useState(1);\r\n    const [isFavorite, setIsFavorite] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            const foundProduct = getProductById(id);\r\n            setProduct(foundProduct);\r\n            setIsLoading(false);\r\n        }\r\n    }, [id]);\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=": "forms.dynamicamoled2xproce",
  " HD',\r\n            'Autonomie': '7 jours',\r\n            'Étanchéité': 'IP68',\r\n            'Connectivité': 'Bluetooth 5.0, WiFi',\r\n            'Capteurs': 'Cardiaque, GPS, Accéléromètre',\r\n            'Compatibilité': 'iOS 12+, Android 6.0+',\r\n            'Matériau': 'Alliage d\\'aluminium',\r\n            'Poids': '45g'\r\n        },\r\n        discount: {\r\n            minQty: 500,\r\n            percentage: 15\r\n        }\r\n    },\r\n    {\r\n        name: 'Lunettes de Soleil Premium UV400',\r\n        description: 'Lunettes de soleil polarisées avec protection UV400 et monture en alliage léger.',\r\n        longDescription: `Ces lunettes de soleil premium offrent une protection optimale contre les rayons UV tout en conservant un style moderne et élégant.\r\n\r\nFabriquées avec des verres polarisés haute qualité, elles réduisent efficacement l'éblouissement et améliorent le contraste pour une vision claire en toutes circonstances. La monture en alliage ultra-léger garantit un confort de port exceptionnel même lors d'utilisations prolongées.\r\n\r\nLe design intemporel s'adapte à tous les styles, que ce soit pour un usage professionnel ou décontracté. Ces lunettes sont parfaites pour la revente en boutiques d'optique, magasins de mode ou sites e-commerce.`,\r\n        price: 0.50,\r\n        moq: 200,\r\n        category: 'Mode',\r\n        images: [\r\n            {\r\n                id: '1',\r\n                url: 'https://images.unsplash.com/photo-1572635196237-14b3f281503f?w=800&h=800&fit=crop',\r\n                alt: 'Lunettes de soleil noires'\r\n            },\r\n            {\r\n                id: '2',\r\n                url: 'https://images.unsplash.com/photo-1577803645773-f96470509666?w=800&h=800&fit=crop',\r\n                alt: 'Lunettes de soleil portées'\r\n            },\r\n            {\r\n                id: '3',\r\n                url: 'https://images.unsplash.com/photo-1511499767150-a48a237f0083?w=800&h=800&fit=crop',\r\n                alt: 'Collection de lunettes'\r\n            }\r\n        ],\r\n        variants: [\r\n            { id: '1', name: 'Noir', type: 'color', value: '#000000', available: true },\r\n            { id: '2', name: 'Marron', type: 'color', value: '#8B4513', available: true },\r\n            { id: '3', name: 'Bleu', type: 'color', value: '#4169E1', available: true },\r\n            { id: '4', name: 'Standard', type: 'size', value: 'Standard', available: true },\r\n            { id: '5', name: 'Large', type: 'size', value: 'Large', available: true, price: 0.10 }\r\n        ],\r\n        supplier: {\r\n            id: 'sup2',\r\n            name: 'Fashion Forward Co',\r\n            location: 'Guangzhou, Chine',\r\n            rating: 4.6,\r\n            verified: true,\r\n            responseTime: '< 4h',\r\n            avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop'\r\n        },\r\n        stock: 25000,\r\n        tags: ['UV400', 'Polarisé', 'Mode', 'Léger', 'Unisexe'],\r\n        deliveryTime: {\r\n            min: 5,\r\n            max: 12,\r\n            unit: 'days'\r\n        },\r\n        specifications: {\r\n            'Protection': 'UV400',\r\n            'Verres': 'Polarisés anti-reflet',\r\n            'Monture': 'Alliage ultra-léger',\r\n            'Poids': '25g',\r\n            'Largeur': '145mm',\r\n            'Hauteur': '50mm',\r\n            'Pont': '18mm'\r\n        },\r\n        discount: {\r\n            minQty: 1000,\r\n            percentage: 20\r\n        }\r\n    },\r\n    {\r\n        name: 'Écouteurs Bluetooth 5.0 TWS Pro',\r\n        description: 'Écouteurs sans fil avec réduction de bruit active et autonomie 24h.',\r\n        longDescription: `Ces écouteurs True Wireless offrent une expérience audio exceptionnelle avec leur technologie de réduction de bruit active et leur qualité sonore premium.\r\n\r\nÉquipés de la dernière puce Bluetooth 5.0, ils garantissent une connexion stable et une latence minimale. L'autonomie exceptionnelle de 6h par écouteur (24h avec le boîtier) vous accompagne toute la journée.\r\n\r\nLe design ergonomique assure un confort optimal même lors d'utilisations prolongées. Résistants à l'eau IPX7, ils sont parfaits pour le sport et les activités en extérieur. Compatible avec tous les appareils Bluetooth.`,\r\n        price: 2.30,\r\n        moq: 120,\r\n        category: 'Électronique',\r\n        images: [\r\n            {\r\n                id: '1',\r\n                url: 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=800&h=800&fit=crop',\r\n                alt: 'Écouteurs Bluetooth dans leur boîtier'\r\n            },\r\n            {\r\n                id: '2',\r\n                url: 'https://images.unsplash.com/photo-1590658268037-6bf12165a8df?w=800&h=800&fit=crop',\r\n                alt: 'Écouteurs en cours d\\'utilisation'\r\n            },\r\n            {\r\n                id: '3',\r\n                url: 'https://images.unsplash.com/photo-1608156639585-b3a35e2d4fb7?w=800&h=800&fit=crop',\r\n                alt: 'Boîtier de charge ouvert'\r\n            }\r\n        ],\r\n        variants: [\r\n            { id: '1', name: 'Noir', type: 'color', value: '#000000', available: true },\r\n            { id: '2', name: 'Blanc', type: 'color', value: '#FFFFFF', available: true },\r\n            { id: '3', name: 'Bleu', type: 'color', value: '#4169E1', available: true }\r\n        ],\r\n        supplier: {\r\n            id: 'sup3',\r\n            name: 'AudioTech Solutions',\r\n            location: 'Shenzhen, Chine',\r\n            rating: 4.7,\r\n            verified: true,\r\n            responseTime: '< 1h',\r\n            avatar: 'https://images.unsplash.com/photo-1590650153855-d9e808231d41?w=100&h=100&fit=crop'\r\n        },\r\n        stock: 18000,\r\n        tags: ['Bluetooth 5.0', 'TWS', 'Réduction bruit', 'IPX7', 'Sport'],\r\n        deliveryTime: {\r\n            min: 10,\r\n            max: 18,\r\n            unit: 'days'\r\n        },\r\n        specifications: {\r\n            'Bluetooth': '5.0',\r\n            'Autonomie écouteurs': '6h',\r\n            'Autonomie totale': '24h',\r\n            'Réduction de bruit': 'ANC active',\r\n            'Résistance': 'IPX7',\r\n            'Pilotes': '13mm graphène',\r\n            'Poids': '5g par écouteur'\r\n        }\r\n    },\r\n    {\r\n        name: 'Sac à Dos Ordinateur Business',\r\n        description: 'Sac à dos professionnel avec compartiment laptop 15.6": "auth.hdautonomie7jourseta",
  " a été supprimé avec succès.`);\n    }\n  };\n\n  return (\n    <div className=": "forms.aetesupprimeavecsucc1",
  " ajouté avec succès !`);\r\n      }\r\n      \r\n      setShowAddModal(false);\r\n    } catch (err) {\r\n      console.error(": "forms.ajouteavecsuccessets",
  " ajouté avec succès !`);\r\n      }\r\n      \r\n      setShowAddModal(false);\r\n    } catch (err) {\r\n      console.error('Erreur lors de la sauvegarde:', err);\r\n      error('Erreur lors de la sauvegarde du produit');\r\n    }\r\n  };\r\n\r\n  const handleDeleteProduct = (productId: string) => {\r\n    if (confirm('Êtes-vous sûr de vouloir supprimer ce produit ?')) {\r\n      setProductsList(prev => prev.filter(p => p.id !== productId));\r\n      success('Produit supprimé avec succès !');\r\n    }\r\n  };\r\n\r\n  const handleResetToDefault = () => {\r\n    if (confirm('Êtes-vous sûr de vouloir restaurer les produits par défaut ? Tous vos produits ajoutés seront perdus.')) {\r\n      setProductsList(products);\r\n      localStorage.removeItem(STORAGE_KEY);\r\n      // Réinitialiser aussi le service global\r\n      productsService.resetToDefault();\r\n      success('Données restaurées aux valeurs par défaut !');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=": "forms.ajouteavecsuccessets1",
  " as UserRole,\r\n                    isActive: true\r\n                }\r\n            ];\r\n\r\n            let createdCount = 0;\r\n            for (const user of testUsers) {\r\n                try {\r\n                    const result = await this.createUser(user);\r\n                    if (result.success) {\r\n                        createdCount++;\r\n                        console.log(`✅ Utilisateur de test créé: ${user.email}`);\r\n                    } else {\r\n                        console.error(`❌ Erreur lors de la création de ${user.email}:`, result.error);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(`❌ Erreur lors de la création de ${user.email}:`, error);\r\n                }\r\n            }\r\n\r\n            console.log(`✅ ${createdCount} utilisateurs de test créés`);\r\n            return { success: true, count: createdCount };\r\n\r\n        } catch (error: any) {\r\n            console.error(": "auth.asuserroleisactivetr2",
  " as const\r\n                }\r\n            ];\r\n\r\n            let createdCount = 0;\r\n            for (const user of testUsers) {\r\n                try {\r\n                    const result = await this.createUser(user);\r\n                    if (result.success) {\r\n                        createdCount++;\r\n                        console.log(`✅ Utilisateur de test créé: ${user.email}`);\r\n                    } else {\r\n                        console.error(`❌ Erreur lors de la création de ${user.email}:`, result.error);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(`❌ Erreur lors de la création de ${user.email}:`, error);\r\n                }\r\n            }\r\n\r\n            console.log(`✅ ${createdCount} utilisateurs de test créés`);\r\n            return { success: true, count: createdCount };\r\n\r\n        } catch (error: any) {\r\n            console.error(": "auth.asconstletcreatedcou2",
  " as const,\r\n        downloadCount: 0,\r\n        category: metadata.category\r\n      }));\r\n\r\n      setDocuments(prev => [...newDocuments, ...prev]);\r\n      \r\n      // Afficher un message de succès\r\n      alert(`${files.length} document(s) téléchargé(s) avec succès !`);\r\n    } catch (error) {\r\n      console.error(": "common.asconstdownloadcount1",
  " as const,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Valide les données de connexion\r\n   * @param data - L": "auth.asconstcreatedatnewd2",
  " as const,\r\n    };\r\n  },\r\n\r\n  // Responsive images avec WebP support\r\n  responsiveImage: (basePath: string, alt: string = ": "common.asconstresponsiveima",
  " disabled={loading}>\n                  Ajouter\n                <": "forms.disabledloadingajout1",
  " disabled={loading}>\n                  Mettre à jour\n                <": "common.disabledloadingmettr1",
  " disabled={loading}>\n                  Mettre à jour\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      {/* Delete User Confirmation Modal */}\n      {showDeleteConfirm && selectedUser && (\n        <div className=": "forms.disabledloadingmettr1",
  " element={<LoginRoute><UniversalRegisterPage /></LoginRoute>} />\r\n\r\n            {/* Redirection pour /auth vers /login pour éviter la confusion *": "auth.elementloginrouteuni",
  " element={<LoginRoute><UniversalRegisterPage /></LoginRoute>} />\r\n\r\n            {/* Redirection pour /auth vers /login pour éviter la confusion */}\r\n            <Route path=": "auth.elementloginrouteuni1",
  " element={<LoginRoute><UniversalRegisterPage /></LoginRoute>} />\r\n\r\n      {/* Redirection pour /auth vers /login pour éviter la confusion *": "auth.elementloginrouteuni2",
  " element={<LoginRoute><UniversalRegisterPage /></LoginRoute>} />\r\n\r\n      {/* Redirection pour /auth vers /login pour éviter la confusion */}\r\n      <Route path=": "auth.elementloginrouteuni3",
  " element={<SupplierProfilePage ": "ecommerce.elementsupplierprofi1",
  " modifié avec succès !`);\r\n      } else {\r\n        // Créer un produit simple pour la démonstration\r\n        const newProduct: Product = {\r\n          ...products[0], ": "ecommerce.modifieavecsuccesels1",
  " modifié avec succès !`);\r\n      } else {\r\n        // Créer un produit simple pour la démonstration\r\n        const newProduct: Product = {\r\n          ...products[0], // Copier toute la structure existante\r\n          id: `prod_${Date.now()}`,\r\n          name: productData.name,\r\n          category: productData.category,\r\n          description: {\r\n            ...products[0].description,\r\n            french: productData.description || `Description de ${productData.name}`\r\n          },\r\n          images: productData.images && productData.images.length > 0 \r\n            ? productData.images \r\n            : ['/api/placeholder/100/100'], // Image par défaut si pas d'images uploadées\r\n          moq: productData.minOrder || 1,\r\n          price: {\r\n            cny: productData.price || 0,\r\n            unitCny: productData.price || 0\r\n          },\r\n          specifications: {\r\n            ...products[0].specifications,\r\n            brand: productData.brand || 'Marque inconnue',\r\n            origin: productData.origin || 'Origine inconnue',\r\n            material: productData.material || 'Matériau non spécifié',\r\n            modelNumber: productData.modelNumber || productData.sku || ''\r\n          }\r\n        };\r\n        \r\n        setProductsList(prev => [newProduct, ...prev]);\r\n        success(`Nouveau produit ": "forms.modifieavecsuccesels",
  " onClick={() => setShowContactForm(false)}>\n                  {t(": "common.onclicksetshowcontac",
  " onClick={handleDeleteUser} disabled={loading}>\n                Supprimer\n              <": "forms.onclickhandledeleteu1",
  " onSubmit={handleSubmit}>\n            {/* Sélecteur de rôle - caché pour les administrateurs *": "admin.onsubmithandlesubmit",
  " onSubmit={handleSubmit}>\n            {/* Sélecteur de rôle - caché pour les administrateurs */}\n            {!isAdminEmail(email) && (\n              <div>\n                <label htmlFor=": "auth.onsubmithandlesubmit",
  " size={20} />;\r\n        }\r\n    };\r\n\r\n    const getStatusText = (status: string) => {\r\n        switch (status) {\r\n            case 'accepted': return 'Accepté';\r\n            case 'pending': return 'En attente';\r\n            case 'completed': return 'Terminé';\r\n            case 'rejected': return 'Refusé';\r\n            default: return status;\r\n        }\r\n    };\r\n\r\n    const getStatusColor = (status: string) => {\r\n        switch (status) {\r\n            case 'accepted': return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400';\r\n            case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400';\r\n            case 'completed': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400';\r\n            case 'rejected': return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400';\r\n            default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=": "forms.size20constgetstatus",
  " style={{ animationDelay: '200ms' }}>\n              {t('homepage.how.subtitle')}\n            </p>\n          </div>\n\n          {/* 3 étapes principales */}\n          <div className=": "navigation.styleanimationdelay21",
  " style={{ animationDelay: '3s' }}></div>\n\n          {/* Effet de soleil animé */}\n          <div\n            className=": "forms.styleanimationdelay3",
  " style={{ animationDelay: `${index * 100}ms` }}>\r\n                          <ProductCard product={product} />\r\n                        </div>\r\n                      ) : null;\r\n                    })}\r\n                  </div>\r\n                )}\r\n              </Section>\r\n\r\n              {/* Messages récents améliorés *": "ecommerce.styleanimationdelayi1",
  " style={{ animationDelay: `${index * 100}ms` }}>\r\n                          <ProductCard product={product} />\r\n                        </div>\r\n                      ) : null;\r\n                    })}\r\n                  </div>\r\n                )}\r\n              </Section>\r\n\r\n              {/* Messages récents améliorés */}\r\n              <Section icon={<Mail className=": "forms.styleanimationdelayi",
  " style={{ backgroundColor: preset.accent }} />\r\n                                                </div>\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Couleurs personnalisées *": "navigation.stylebackgroundcolor",
  " style={{ backgroundColor: preset.accent }} />\r\n                                                </div>\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Couleurs personnalisées */}\r\n                                <div className=": "navigation.stylebackgroundcolor1",
  " style={{ backgroundColor: template.accentColor }} />\r\n                                                </div>\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Couleurs prédéfinies *": "navigation.stylebackgroundcolor2",
  " style={{ backgroundColor: template.accentColor }} />\r\n                                                </div>\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* Couleurs prédéfinies */}\r\n                                <div>\r\n                                    <label className=": "navigation.stylebackgroundcolor3",
  " style={{ stopColor: '#4169E1', stopOpacity: 0.6 }} />\n              </linearGradient>\n            </defs>\n\n            {/* Montagne arrière */}\n            <path d=": "common.stylestopcolor4169e1",
  " style={{stopColor: '#4169E1', stopOpacity: 0.7}} />\n              </linearGradient>\n            </defs>\n            \n            {/* Montagne arrière */}\n            <path d=": "common.stylestopcolor4169e11",
  " style={{stopColor: '#4169E1', stopOpacity: 0.7}} />\r\n              </linearGradient>\r\n            </defs>\r\n            \r\n            {/* Montagne arrière */}\r\n            <path d=": "common.stylestopcolor4169e13",
  " || item.status === filterStatus;\r\n    return matchesType && matchesStatus;\r\n  });\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    const icons = {\r\n      user: <User size={16} />,\r\n      product: <Package size={16} />,\r\n      review: <MessageSquare size={16} />,\r\n      message: <MessageSquare size={16} ": "admin.itemstatusfilterstat",
  " }\n  ], [t]);\n\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-gray-900\">\n      {/* Hero Section avec vidéo background et paysage chinois stylisé */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"relative h-[70vh] min-h-[500px] bg-gradient-to-br from-blue-400 via-blue-600 to-purple-800 flex items-center justify-center\">\n          {/* Système de particules flottantes */}\n          <React.Suspense fallback={null}>\n            <ParticleSystem particleCount={60} className=\"z-10\" />\n          </React.Suspense>\n\n          {/* Vidéo Background */}\n          <video\n            className=\"absolute inset-0 w-full h-full object-cover\"\n            autoPlay\n            muted\n            loop\n            playsInline\n            poster=\"data:image/svg+xml,%3Csvg xmlns=": "navigation.treturndivclassnamem",
  " }\r\n    ];\r\n\r\n    const stats = {\r\n        totalViews: 285600,\r\n        totalEngagement: 4.2,\r\n        totalClicks: 12480,\r\n        totalEarnings: 18750,\r\n        growthRate: 15.3,\r\n        activeCollaborations: 8\r\n    };\r\n\r\n    return (\r\n        <div className=\"space-y-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n                <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                    Statistiques\r\n                </h2>\r\n                <div className=\"flex items-center gap-2 text-green-600 dark:text-green-400\">\r\n                    <TrendingUp size={20} />\r\n                    <span className=\"font-medium\">+{stats.growthRate}% ce mois</span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* KPIs principaux */}\r\n            <div className=\"grid grid-cols-2 lg:grid-cols-6 gap-4\">\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700\">\r\n                    <div className=\"flex items-center gap-3 mb-2\">\r\n                        <Eye className=\"text-blue-500\" size={24} />\r\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Vues totales</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                        {stats.totalViews.toLocaleString()}\r\n                    </div>\r\n                    <div className=\"text-sm text-green-600 dark:text-green-400 mt-1\">\r\n                        +12% vs mois dernier\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700\">\r\n                    <div className=\"flex items-center gap-3 mb-2\">\r\n                        <TrendingUp className=\"text-green-500\" size={24} />\r\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Engagement</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                        {stats.totalEngagement}%\r\n                    </div>\r\n                    <div className=\"text-sm text-green-600 dark:text-green-400 mt-1\">\r\n                        +0.8% vs mois dernier\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700\">\r\n                    <div className=\"flex items-center gap-3 mb-2\">\r\n                        <MousePointer className=\"text-purple-500\" size={24} />\r\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Clics</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                        {stats.totalClicks.toLocaleString()}\r\n                    </div>\r\n                    <div className=\"text-sm text-green-600 dark:text-green-400 mt-1\">\r\n                        +25% vs mois dernier\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700\">\r\n                    <div className=\"flex items-center gap-3 mb-2\">\r\n                        <DollarSign className=\"text-orange-500\" size={24} />\r\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Gains</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                        {stats.totalEarnings.toLocaleString()}€\r\n                    </div>\r\n                    <div className=\"text-sm text-green-600 dark:text-green-400 mt-1\">\r\n                        +18% vs mois dernier\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700\">\r\n                    <div className=\"flex items-center gap-3 mb-2\">\r\n                        <Users className=\"text-pink-500\" size={24} />\r\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Collaborations</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                        {stats.activeCollaborations}\r\n                    </div>\r\n                    <div className=\"text-sm text-blue-600 dark:text-blue-400 mt-1\">\r\n                        Actives\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700\">\r\n                    <div className=\"flex items-center gap-3 mb-2\">\r\n                        <Calendar className=\"text-indigo-500\" size={24} />\r\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Croissance</span>\r\n                    </div>\r\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                        +{stats.growthRate}%\r\n                    </div>\r\n                    <div className=\"text-sm text-green-600 dark:text-green-400 mt-1\">\r\n                        Ce mois\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Graphiques simplifiés */}\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                {/* Évolution des vues */}\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                        Évolution des vues (7 derniers mois)\r\n                    </h3>\r\n                    <div className=\"space-y-3\">\r\n                        {viewsData.map((data, index) => (\r\n                            <div key={data.month} className=\"flex items-center gap-4\">\r\n                                <div className=\"w-8 text-sm text-gray-600 dark:text-gray-400\">\r\n                                    {data.month}\r\n                                </div>\r\n                                <div className=\"flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-6 relative\">\r\n                                    <div\r\n                                        className=\"bg-blue-500 h-6 rounded-full flex items-center justify-end pr-2\"\r\n                                        style={{ width: `${(data.views / 35000) * 100}%` }}\r\n                                    >\r\n                                        <span className=\"text-white text-xs font-medium\">\r\n                                            {data.views.toLocaleString()}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Taux d": "forms.conststatstotalviews",
  " }\r\n    ];\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-full max-w-7xl h-full max-h-[90vh] overflow-hidden flex\">\r\n                {/* Panel de gauche - Éditeur */}\r\n                <div className=\"w-1/2 flex flex-col\">\r\n                    {/* Header */}\r\n                    <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                            <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white flex items-center space-x-2\">\r\n                                <Sparkles className=\"h-6 w-6 text-blue-500\" />\r\n                                <span>Éditeur de Carte de Visite</span>\r\n                            </h2>\r\n                            <div className=\"flex items-center space-x-3\">\r\n                                <button\r\n                                    onClick={handleReset}\r\n                                    className=\"p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\r\n                                    title=\"Réinitialiser\"\r\n                                >\r\n                                    <RefreshCw className=\"h-5 w-5\" />\r\n                                </button>\r\n                                <button\r\n                                    onClick={handleDownload}\r\n                                    className=\"p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\r\n                                    title=\"Télécharger\"\r\n                                >\r\n                                    <Download className=\"h-5 w-5\" />\r\n                                </button>\r\n                                <button\r\n                                    onClick={onClose}\r\n                                    className=\"p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\"\r\n                                >\r\n                                    <X className=\"h-5 w-5\" />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Tabs */}\r\n                        <div className=\"flex space-x-1 mt-4 bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\r\n                            {[\r\n                                { id: ": "forms.returndivclassnamefi",
  " } : f\r\n      ));\r\n\r\n      // Simuler le progrès d": "common.fsimulerleprogresd1",
  " }));\r\n        }\r\n    };\r\n\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md\">\r\n                {/* Header */}\r\n                <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\r\n                    <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n                        Créer un nouvel utilisateur\r\n                    </h2>\r\n                    <button\r\n                        onClick={onClose}\r\n                        className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n                    >\r\n                        <X size={20} />\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Form */}\r\n                <form onSubmit={handleSubmit} className=\"p-6 space-y-4\">\r\n                    {/* Name */}\r\n                    <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                            Nom complet\r\n                        </label>\r\n                        <div className=\"relative\">\r\n                            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n                            <Input\r\n                                type=\"text\"\r\n                                value={formData.name}\r\n                                onChange={(e) => handleInputChange(": "forms.ifisopenreturnnullre",
  " });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!newMessage.trim()) return;\r\n\r\n    const message: Message = {\r\n      id: Math.random().toString(36).substr(2, 9),\r\n      sender: ": "common.useeffectscrolltobot",
  " },\n                ]}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"secondary\" onClick={() => {\n                  setShowEditUserModal(false);\n                  resetForm();\n                }}>\n                  Annuler\n                </Button>\n                <Button type=\"submit\" variant=\"primary\" disabled={loading}>\n                  Mettre à jour\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      {/* Delete User Confirmation Modal */}\n      {showDeleteConfirm && selectedUser && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md\">\n            <h2 className=\"text-xl font-bold text-gray-900 dark:text-gray-100 mb-4\">Confirmer la suppression</h2>\n            <p className=\"text-gray-700 mb-4\">\n              Êtes-vous sûr de vouloir supprimer l": "forms.divclassnameflexjust1",
  " },\n            ]}\n            className=\"w-full sm:w-40\"\n          />\n          <Button onClick={() => setShowAddUserModal(true)} variant=\"primary\" className=\"flex items-center justify-center\">\n            <Plus className=\"h-5 w-5 mr-2\" />\n            Ajouter un utilisateur\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        {loading ? (\n          <div className=\"flex justify-center items-center py-10\">\n            <span className=\"text-gray-500\">Chargement des utilisateurs...</span>\n        </div>\n        ) : filteredUsers.length === 0 ? (\n          <div className=\"flex justify-center items-center py-10\">\n            <span className=\"text-gray-500\">Aucun utilisateur trouvé.</span>\n        </div>\n        ) : (\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Nom</th>\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Rôle</th>\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n              {filteredUsers.map((user) => (\n                <tr key={user.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100\">{user.email}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{user.name}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 capitalize\">{user.role}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <button onClick={() => openEditModal(user)} className=\"text-blue-600 hover:text-blue-900 mr-4\">\n                        <Pencil className=\"h-5 w-5\" />\n                      </button>\n                    <button onClick={() => openDeleteConfirm(user)} className=\"text-red-600 hover:text-red-900\">\n                          <Trash2 className=\"h-5 w-5\" />\n                        </button>\n                  </td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n        )}\n      </div>\n\n      {/* Add User Modal */}\n      {showAddUserModal && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md\">\n            <h2 className=\"text-xl font-bold text-gray-900 dark:text-gray-100 mb-4\">Ajouter un nouvel utilisateur</h2>\n            {error && <div className=\"mb-4 text-red-600 text-sm\">{error}</div>}\n            {success && <div className=\"mb-4 text-green-600 text-sm\">{success}</div>}\n            <form onSubmit={handleAddUser} className=\"space-y-4\">\n              <Input\n                label=\"Email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n              <Input\n                label=\"Mot de passe\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                minLength={6}\n              />\n              <Input\n                label=\"Nom\"\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n              />\n              <Select\n                label=\"Rôle\"\n                value={role}\n                onChange={(e) => setRole(e.target.value as ": "auth.classnamewfullsmw40b",
  " },\r\n      onProgress\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Supprimer un fichier uploadé\r\n   *": "forms.onprogresssupprimeru1",
  " },\r\n      onProgress\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Supprimer un fichier uploadé\r\n   */\r\n  async deleteFile(url: string): Promise<boolean> {\r\n    if (this.mockMode) {\r\n      // Simulation de suppression\r\n      console.log(": "forms.onprogresssupprimeru2",
  " },\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <div className=\"text-gray-600 dark:text-gray-300 animate-pulse\">Chargement du profil...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800\">\r\n        <div className=\"text-center bg-white dark:bg-gray-800 p-8 rounded-xl shadow-lg\">\r\n          <div className=\"text-gray-600 dark:text-gray-300\">\r\n            Vous devez être connecté pour voir votre profil.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  // Avatar fallback avec vérification de type\r\n  const avatar = preview || user?.avatar || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=6366f1&color=fff`;\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 py-8\">\r\n      {/* Notification Toast améliorée */}\r\n      {notification && (\r\n        <div className={`fixed top-4 right-4 z-50 px-6 py-4 rounded-xl shadow-2xl transform transition-all duration-500 border-l-4 backdrop-blur-sm ${notification.type === ": "navigation.ifloadingreturndivcl",
  " },\r\n  ];\r\n  const fakeMessages = [\r\n    { id: ": "common.constfakemessagesid",
  " },\r\n];\r\n\r\n// Fonction utilitaire pour compter les produits par catégorie\r\nfunction getProductCount(categoryKey: string) {\r\n  const allProducts = productsService.getAllProducts();\r\n  return allProducts.filter((p: Product) => p.category === categoryKey).length;\r\n}\r\n\r\nconst CategoriesSection: React.FC<{ onCategorySelect?: (key: string|null) => void }> = ({ onCategorySelect }) => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [activeCategory, setActiveCategory] = useState<string | null>(null);\r\n  const [showProducts, setShowProducts] = useState(false);\r\n  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);\r\n  // Charger les produits depuis le service centralisé\r\n  useEffect(() => {\r\n    const loadProducts = () => {\r\n      const allProducts = productsService.getAllProducts();\r\n      setFilteredProducts(allProducts);\r\n    };\r\n    \r\n    // Charger les produits initialement\r\n    loadProducts();\r\n    \r\n    ": "ecommerce.fonctionutilitairepo",
  " };\r\n            }\r\n\r\n            // Générer un ID unique\r\n            const uid = `ultrasafe_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n            const now = new Date().toISOString();\r\n\r\n            ": "common.genereruniduniquecon",
  " };\r\n            }\r\n\r\n            // Générer un ID unique\r\n            const uid = `ultrasafe_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n            const now = new Date().toISOString();\r\n\r\n            // Document utilisateur minimal\r\n            const userDoc = {\r\n                id: uid,\r\n                email: userData.email,\r\n                name: userData.name,\r\n                role: userData.role,\r\n                isActive: userData.isActive ?? true,\r\n                language: ": "auth.genereruniduniquecon",
  " };\r\n            }\r\n\r\n            // Générer un ID unique\r\n            const uid = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n            const now = new Date().toISOString();\r\n\r\n            // Créer le document utilisateur complet\r\n            const userDocument: SavedUser = {\r\n                uid: uid,\r\n                id: uid,\r\n                email: userData.email.trim(),\r\n                name: userData.name.trim(),\r\n                role: userData.role,\r\n                isActive: userData.isActive ?? true,\r\n                language: ": "auth.genereruniduniquecon1",
  " };\r\n    }\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Obtient le rôle par défaut du système\r\n   * @returns Le rôle par défaut\r\n   *": "common.returnisvalidtrueobt",
  " };\r\n    }\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Obtient le rôle par défaut du système\r\n   * @returns Le rôle par défaut\r\n   */\r\n  static getDefaultRole(): UserRole {\r\n    return this.DEFAULT_ROLE;\r\n  }\r\n\r\n  /**\r\n   * Obtient la liste des emails d": "auth.returnisvalidtrueobt",
  " };\r\n    }\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Valide les données d": "common.returnisvalidtrueval1",
  " }}\r\n          >\r\n            <img src={cat.icon} alt={cat.label} className=\"w-10 h-10 mb-2\" />\r\n            <span className=\"font-semibold mb-1 text-center\">{cat.label}</span>\r\n            <span className=\"absolute top-2 right-4 bg-green-300 text-[#181f2c] rounded-full text-xs font-bold px-3 py-1 shadow\">{getProductCount(cat.key)}+</span>\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <div className=\"text-center mt-2\">\r\n        <button\r\n          onClick={handleAllCategories}\r\n          className=\"text-blue-300 font-semibold underline hover:text-blue-400 transition\"\r\n        >\r\n          Voir toutes les catégories &gt;\r\n        </button>\r\n      </div>\r\n      {/* Animation d’ouverture des produits */}\r\n      <div className={`transition-all duration-500 ${showProducts ? ": "forms.imgsrccaticonaltcatl",
  " }}>\n              <div className=\"p-8 h-72 flex flex-col justify-between relative overflow-hidden\">\n                {/* Effet de brillance animé */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-0 group-hover:opacity-20 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-all duration-1000\"></div>\n\n                <div>\n                  <div className=\"text-sm font-semibold text-gray-800 mb-2 uppercase tracking-widest opacity-80 transform transition-all duration-300 group-hover:scale-110 font-display\">\n                    {t(": "forms.divclassnamep8h72fle",
  " }}>\n              <div className=\"p-8 h-72 flex flex-col justify-between relative overflow-hidden\">\n                {/* Effet de brillance animé */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-0 group-hover:opacity-20 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-all duration-1000\"></div>\n                \n                <div>\n                  <div className=\"text-sm font-semibold text-gray-800 mb-2 uppercase tracking-widest opacity-80 transform transition-all duration-300 group-hover:scale-110 font-display\">\n                    {t(": "forms.divclassnamep8h72fle1",
  " }}>\r\n                Chine ton usine\r\n              <": "common.chinetonusine1",
  " }}>\r\n                Chine ton usine\r\n              </h1>\r\n              <div className=\"ml-2 w-4 h-4 bg-orange-400 rounded-sm transform rotate-45\"></div>\r\n            </div>\r\n            <div className=\"text-white text-lg mb-2 font-light tracking-wide\">\r\n              ÇA VA VOUS \r\n              <span className=\"bg-orange-500 text-white px-2 py-1 mx-2 rounded font-bold transform -skew-x-12\">\r\n                PLAIRE\r\n              </span>\r\n            </div>\r\n            <p className=\"text-white text-sm opacity-90 mb-8\">\r\n              Coup de foudre inévitable.\r\n            </p>\r\n\r\n            {/* Barre de recherche */}\r\n            <form onSubmit={handleSearch} className=\"mt-8 w-full max-w-lg\">\r\n              <div className=\"relative\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                  placeholder=\"Recherchez un produit, une marque...\"\r\n                  className=\"w-full px-6 py-3 rounded-full text-gray-700 placeholder-gray-600 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50 shadow-lg\"\r\n                />\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-gray-100 hover:bg-gray-200 p-2 rounded-full transition-colors\"\r\n                >\r\n                  <Search className=\"h-4 w-4 text-gray-600\" />\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Navigation des catégories */}\r\n        <div className=\"bg-white border-b shadow-sm\">\r\n          <div className=\"max-w-7xl mx-auto px-4\">\r\n            <div className=\"flex items-center space-x-8 py-3 overflow-x-auto\">\r\n              {brandCategories.map((category, index) => (\r\n                <button\r\n                  key={index}\r\n                  className={`whitespace-nowrap px-3 py-2 text-sm font-medium transition-colors ${\r\n                    category.active\r\n                      ? ": "navigation.chinetonusineh1divcl1",
  " }}></div>\n\n          {/* Effet de soleil animé *": "common.diveffetdesoleilanim",
  " }}></div>\n\n          {/* Effet de soleil animé */}\n          <div\n            className=\"absolute top-16 left-48 w-20 h-20 rounded-full opacity-60 z-10 animate-pulse-glow\"\n            style={{\n              background: ": "navigation.diveffetdesoleilanim",
  " }}></div>\r\n                        </div>\r\n                        <div className=\"mt-2 text-xs text-gray-500 space-y-1\">\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <CheckCircle size={12} className=\"text-green-500\" />\r\n                            <span>Au moins 8 caractères</span>\r\n                          </div>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <X size={12} className=\"text-red-500\" />\r\n                            <span>Contient au moins une majuscule</span>\r\n                          </div>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <CheckCircle size={12} className=\"text-green-500\" />\r\n                            <span>Contient au moins un chiffre</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"stagger-item\">\r\n                      <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <CheckCircle size={16} className=\"text-green-500\" />\r\n                          Confirmer le nouveau mot de passe\r\n                        </div>\r\n                      </label>\r\n                      <input\r\n                        type=\"password\"\r\n                        className=\"w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white hover-glow transition-all duration-200\"\r\n                        placeholder=\"Confirmez votre nouveau mot de passe\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\r\n                    <button\r\n                      onClick={() => showNotification(": "auth.divdivdivclassnamemt",
  "', price: 199, image: '/api/placeholder/300/300' },\r\n      { id: 4, name: 'Montre Connectée', price: 89, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  fashion: {\r\n    name: 'Mode',\r\n    icon: '👔',\r\n    products: [\r\n      { id: 5, name: 'T-shirt Premium', price: 19, image: '/api/placeholder/300/300' },\r\n      { id: 6, name: 'Jean Slim Fit', price: 39, image: '/api/placeholder/300/300' },\r\n      { id: 7, name: 'Veste Casual', price: 59, image: '/api/placeholder/300/300' },\r\n      { id: 8, name: 'Sneakers Sport', price: 79, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  home: {\r\n    name: 'Maison',\r\n    icon: '🏠',\r\n    products: [\r\n      { id: 9, name: 'Lampe LED Design', price: 29, image: '/api/placeholder/300/300' },\r\n      { id: 10, name: 'Coussin Décoratif', price: 15, image: '/api/placeholder/300/300' },\r\n      { id: 11, name: 'Tapis Moderne', price: 89, image: '/api/placeholder/300/300' },\r\n      { id: 12, name: 'Vase Céramique', price: 25, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  beauty: {\r\n    name: 'Beauté',\r\n    icon: '💄',\r\n    products: [\r\n      { id: 13, name: 'Sérum Anti-Âge', price: 45, image: '/api/placeholder/300/300' },\r\n      { id: 14, name: 'Rouge à Lèvres Mat', price: 12, image: '/api/placeholder/300/300' },\r\n      { id: 15, name: 'Crème Hydratante', price: 28, image: '/api/placeholder/300/300' },\r\n      { id: 16, name: 'Palette Maquillage', price: 35, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  sports: {\r\n    name: 'Sport',\r\n    icon: '⚽',\r\n    products: [\r\n      { id: 17, name: 'Ballon de Football', price: 25, image: '/api/placeholder/300/300' },\r\n      { id: 18, name: 'Raquette de Tennis', price: 89, image: '/api/placeholder/300/300' },\r\n      { id: 19, name: 'Tapis de Yoga', price: 35, image: '/api/placeholder/300/300' },\r\n      { id: 20, name: 'Haltères 5kg', price: 45, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  automotive: {\r\n    name: 'Auto',\r\n    icon: '🚗',\r\n    products: [\r\n      { id: 21, name: 'Chargeur USB Auto', price: 15, image: '/api/placeholder/300/300' },\r\n      { id: 22, name: 'Support Téléphone', price: 12, image: '/api/placeholder/300/300' },\r\n      { id: 23, name: 'Aspirateur Auto', price: 45, image: '/api/placeholder/300/300' },\r\n      { id: 24, name: 'Tapis de Sol', price: 35, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  tools: {\r\n    name: 'Outils',\r\n    icon: '🔧',\r\n    products: [\r\n      { id: 25, name: 'Perceuse Sans Fil', price: 89, image: '/api/placeholder/300/300' },\r\n      { id: 26, name: 'Kit Tournevis', price: 25, image: '/api/placeholder/300/300' },\r\n      { id: 27, name: 'Marteau Multifonction', price: 35, image: '/api/placeholder/300/300' },\r\n      { id: 28, name: 'Boîte à Outils', price: 55, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  toys: {\r\n    name: 'Jouets',\r\n    icon: '🧸',\r\n    products: [\r\n      { id: 29, name: 'Puzzle 1000 pièces', price: 18, image: '/api/placeholder/300/300' },\r\n      { id: 30, name: 'Peluche Ours', price: 22, image: '/api/placeholder/300/300' },\r\n      { id: 31, name: 'Jeu de Construction', price: 45, image: '/api/placeholder/300/300' },\r\n      { id: 32, name: 'Robot Télécommandé', price: 65, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  books: {\r\n    name: 'Livres',\r\n    icon: '📚',\r\n    products: [\r\n      { id: 33, name: 'Roman Bestseller', price: 12, image: '/api/placeholder/300/300' },\r\n      { id: 34, name: 'Guide Cuisine', price: 25, image: '/api/placeholder/300/300' },\r\n      { id: 35, name: 'Livre Développement', price: 35, image: '/api/placeholder/300/300' },\r\n      { id: 36, name: 'BD Aventure', price: 15, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  music: {\r\n    name: 'Musique',\r\n    icon: '🎵',\r\n    products: [\r\n      { id: 37, name: 'Guitare Acoustique', price: 129, image: '/api/placeholder/300/300' },\r\n      { id: 38, name: 'Casque Audio Pro', price: 89, image: '/api/placeholder/300/300' },\r\n      { id: 39, name: 'Microphone USB', price: 55, image: '/api/placeholder/300/300' },\r\n      { id: 40, name: 'Enceinte Portable', price: 45, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  garden: {\r\n    name: 'Jardin',\r\n    icon: '🌱',\r\n    products: [\r\n      { id: 41, name: 'Kit Graines Bio', price: 15, image: '/api/placeholder/300/300' },\r\n      { id: 42, name: 'Arrosoir Design', price: 25, image: '/api/placeholder/300/300' },\r\n      { id: 43, name: 'Sécateur Pro', price: 35, image: '/api/placeholder/300/300' },\r\n      { id: 44, name: 'Pot Terre Cuite', price: 18, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n  food: {\r\n    name: 'Alimentation',\r\n    icon: '🍎',\r\n    products: [\r\n      { id: 45, name: 'Miel Bio 500g', price: 12, image: '/api/placeholder/300/300' },\r\n      { id: 46, name: 'Thé Vert Premium', price: 18, image: '/api/placeholder/300/300' },\r\n      { id: 47, name: 'Épices du Monde', price: 25, image: '/api/placeholder/300/300' },\r\n      { id: 48, name: 'Chocolat Artisanal', price: 15, image: '/api/placeholder/300/300' },\r\n    ]\r\n  },\r\n};\r\n\r\nconst CategoryPage: React.FC = () => {\r\n  const { categoryId } = useParams<{ categoryId: string }>();\r\n  const [viewMode, setViewMode] = React.useState<'grid' | 'list'>('grid');\r\n\r\n  const category = categoryId ? categoryData[categoryId] : null;\r\n\r\n  if (!category) {\r\n    return (\r\n      <div className=": "navigation.price199imageapiplac",
  ")\r\n              }            </button>\r\n          </form>          {/* Boutons de connexion Google *": "auth.buttonformboutonsdec",
  ")\r\n            );\r\n\r\n            const querySnapshot = await getDocs(q);\r\n            const firestoreUsers: AdminUser[] = [];\r\n\r\n            querySnapshot.forEach((doc) => {\r\n                const data = doc.data();\r\n                firestoreUsers.push({\r\n                    uid: doc.id,\r\n                    ...data\r\n                } as AdminUser);\r\n            });\r\n\r\n            // 2. Ajouter l": "forms.constquerysnapshotaw",
  ")\r\n            );\r\n\r\n            const querySnapshot = await getDocs(q);\r\n            const users: AdminUser[] = [];\r\n\r\n            querySnapshot.forEach((doc) => {\r\n                const data = doc.data();\r\n                users.push({\r\n                    uid: doc.id,\r\n                    ...data\r\n                } as AdminUser);\r\n            });\r\n\r\n            console.log(`✅ ${users.length} utilisateurs récupérés`);\r\n            return users;\r\n\r\n        } catch (error) {\r\n            console.error(": "admin.constquerysnapshotaw5",
  ")\r\n            );\r\n\r\n            const querySnapshot = await getDocs(q);\r\n            const users: AdminUser[] = [];\r\n\r\n            querySnapshot.forEach((doc) => {\r\n                const data = doc.data();\r\n                users.push({\r\n                    uid: doc.id,\r\n                    ...data\r\n                } as AdminUser);\r\n            });\r\n\r\n            console.log(`✅ SAFE: ${users.length} utilisateurs récupérés (lecture seule)`);\r\n            return users;\r\n\r\n        } catch (error) {\r\n            console.error(": "admin.constquerysnapshotaw8",
  ")\r\n            },\r\n            {\r\n                influencerId: profileRef.id,\r\n                referralCode: ": "common.influenceridprofiler1",
  ")\r\n      .reduce((sum, order) => sum + order.totalAmount, 0);\r\n  };\r\n\r\n  return (\r\n    <AdminLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n              Gestion des Commandes\r\n            </h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Suivez et gérez toutes les commandes de la plateforme\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <ShoppingBag className=\"h-8 w-8 text-blue-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{orders.length}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Package className=\"h-8 w-8 text-yellow-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">En attente</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {orders.filter(o => o.status === ": "forms.reducesumordersumord",
  ")\r\n      });\r\n    } else {\r\n      // Reset pour nouveau produit\r\n      setFormData({\r\n        name: ": "forms.elseresetpournouveau",
  ") return true;\n\n    // Logique des permissions par rôle\n    const rolePermissions: Record<UserRole, string[]> = {\n      admin: [": "admin.returntruelogiquedes1",
  ") {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      \n      // Créer le document utilisateur dans Firestore\n      const userData: User = {\n        id: userCredential.user.uid,\n        email: email,\n        name: name,\n        role: role,\n        language: ": "auth.tryconstusercredenti2",
  ") {\r\n                        cleanupFn();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const login = async (email: string, password: string) => {\r\n        console.log(`🔐 Tentative de connexion: ${email}`);\r\n\r\n        try {\r\n            const result = await secureAuthService.secureLogin(email, password);\r\n\r\n            if (result.success && result.user) {\r\n                setUser(result.user);\r\n                console.log(`✅ Connexion réussie: ${result.user.name}`);\r\n            } else {\r\n                console.log(`❌ Connexion échouée: ${result.error}`);\r\n            }\r\n\r\n            return result;\r\n\r\n        } catch (error: any) {\r\n            console.error(": "auth.cleanupfnconstlogina2",
  ") {\r\n            companies = companies.filter(company => company.status === statusFilter);\r\n        }\r\n\r\n        return companies;\r\n    }, [allCompanies, searchResults, searchTerm, statusFilter]);\r\n\r\n    // Statistiques mémorisées\r\n    const stats = useMemo(() => {\r\n        const total = filteredCompanies.length;\r\n        const active = filteredCompanies.filter(c => c.status === ": "common.companiescompaniesfi1",
  ") {\r\n            return fieldValue.toLowerCase().includes(searchTerm.toLowerCase());\r\n          }\r\n          return false;\r\n        });\r\n      });\r\n\r\n      return filteredDocuments;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la recherche dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  ": "forms.returnfieldvaluetolo",
  ") {\r\n            return fieldValue.toLowerCase().includes(searchTerm.toLowerCase());\r\n          }\r\n          return false;\r\n        });\r\n      });\r\n\r\n      return filteredDocuments;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la recherche dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compte le nombre de documents\r\n   */\r\n  async count(filters?: QueryFilter[]): Promise<number> {\r\n    try {\r\n      const options: QueryOptions = filters ? { filters } : {};\r\n      const documents = await this.list(options);\r\n      return documents.length;\r\n    } catch (error) {\r\n      console.error(`Erreur lors du comptage dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Vérifie si un document existe\r\n   */\r\n  async exists(id: string): Promise<boolean> {\r\n    try {\r\n      const doc = await this.read(id);\r\n      return doc !== null;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la vérification d": "forms.returnfieldvaluetolo2",
  ") {\r\n        return (\r\n            <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\r\n                <div className=\"text-center p-8\">\r\n                    <Shield className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\r\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Accès refusé</h2>\r\n                    <p className=\"text-gray-600\">Seuls les administrateurs peuvent accéder à cette page.</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadSummary();\r\n    }, []);\r\n\r\n    const loadSummary = async () => {\r\n        try {\r\n            setLoading(true);\r\n\r\n            if ((window as any).productionUserService) {\r\n                const summaryData = await (window as any).productionUserService.getUsersSummary();\r\n                setSummary(summaryData);\r\n            } else {\r\n                setMessage({\r\n                    type: ": "forms.returndivclassnamemi",
  ") {\r\n      setIsLoginMode(true);\r\n    }\r\n  }, [location.pathname]);\r\n  // États spécifiques aux influenceurs\r\n  const [socialMediaLinks, setSocialMediaLinks] = useState(": "auth.setisloginmodetruelo1",
  ") {\r\n    // Ajouter une fonction globale pour exécuter depuis la console\r\n    (window as any).createTestInfluencer = createTestInfluencer;\r\n    console.log(": "forms.ajouterunefonctiongl2",
  ") || previewUrl.match(/\\.(jpg|jpeg|png|gif|webp)$/i) ? (\r\n              <img\r\n                src={previewUrl}\r\n                alt=\"Prévisualisation\"\r\n                className=\"max-w-full max-h-full object-contain\"\r\n              />\r\n            ) : previewUrl.includes(": "forms.previewurlmatchjpgjp",
  ") || previewUrl.match(/\\.(mp4|mov|avi|webm)$/i) ? (\r\n              <video\r\n                src={previewUrl}\r\n                controls\r\n                className=\"max-w-full max-h-full\"\r\n              >\r\n                Votre navigateur ne supporte pas la lecture vidéo.\r\n              </video>\r\n            ) : (\r\n              <div className=\"bg-white p-8 rounded-lg\">\r\n                <p className=\"text-gray-600\">Prévisualisation non disponible pour ce type de fichier.</p>\r\n                <Button\r\n                  onClick={() => window.open(previewUrl, ": "forms.previewurlmatchmp4mo",
  ") || userPermissions.includes(permission);\r\n    }\r\n\r\n    /**\r\n     * Vérifier si l": "admin.userpermissionsinclu1",
  ") } // Influenceur affiché mais pas sourceur\n              ]}\n              disabled={isLoading}\n            ": "common.influenceuraffichema",
  ") } // Influenceur affiché mais pas sourceur\n              ]}\n              disabled={isLoading}\n            />\n\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-md p-4\">\n              <h4 className=\"text-sm font-medium text-blue-900 dark:text-blue-300 mb-2\">\n                {role === ": "forms.influenceuraffichema",
  ")) {\r\n                            createdAccounts.push({\r\n                                ...accountData,\r\n                                success: true,\r\n                                existing: true\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    // Pause entre les créations\r\n                    await new Promise(resolve => setTimeout(resolve, 800));\r\n\r\n                } catch (error: any) {\r\n                    setResults(prev => prev + `❌ Erreur ${accountData.email}: ${error.message}\\n`);\r\n                }\r\n            }\r\n\r\n            setResults(prev => prev + `\\n🎉 Système configuré avec succès !\\n`);\r\n            setResults(prev => prev + `✅ ${createdCount} nouveaux comptes créés\\n`);\r\n            setResults(prev => prev + `📊 ${createdAccounts.length} comptes disponibles au total\\n`);\r\n\r\n            setUltimateResult({\r\n                success: true,\r\n                createdCount,\r\n                accounts: createdAccounts\r\n            });\r\n\r\n        } catch (error: any) {\r\n            setResults(prev => prev + `\\n💥 Erreur: ${error.message}\\n`);\r\n            setUltimateResult({\r\n                success: false,\r\n                error: error.message\r\n            });\r\n        } finally {\r\n            setIsRunning(false);\r\n        }\r\n    };\r\n\r\n    const createAdminOnly = async () => {\r\n        setIsRunning(true);\r\n        setResults(": "auth.createdaccountspusha2",
  ")) {\r\n                    setResults(prev => prev + `💡 Le compte admin existe déjà !\\n`);\r\n                    setResults(prev => prev + `📧 Essayez: admin@chinetonusine.com\\n`);\r\n                    setResults(prev => prev + `🔑 Mot de passe: Admin123!\\n`);\r\n                }\r\n            }\r\n        } catch (error: any) {\r\n            setResults(prev => prev + `❌ Erreur: ${error.message}\\n`);\r\n        } finally {\r\n            setIsRunning(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=": "auth.setresultsprevprevle1",
  ")) {\r\n                    setResults(prev => prev + `💡 Le compte admin existe déjà !\\n`);\r\n                    setResults(prev => prev + `📧 Essayez: admin@chinetonusine.com\\n`);\r\n                    setResults(prev => prev + `🔑 Mot de passe: Admin123!\\n`);\r\n                }\r\n            }\r\n        } catch (error: any) {\r\n            setResults(prev => prev + `❌ Erreur: ${error.message}\\n`);\r\n        } finally {\r\n            setIsRunning(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl shadow-lg p-6 mb-6 border border-blue-200\">\r\n            <div className=\"flex items-center gap-3 mb-6\">\r\n                <Sparkles className=\"h-8 w-8 text-purple-500\" />\r\n                <div>\r\n                    <h2 className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\r\n                        Système Ultime d": "auth.setresultsprevprevle2",
  ")) {\r\n            console.log(`ℹ️ Utilisateur ${testUser.email} existe déjà`);\r\n            results.push({ email: testUser.email, success: true });\r\n          } else {\r\n            console.error(`❌ Erreur pour ${testUser.email}:`, result.error);\r\n            results.push({ email: testUser.email, success: false, error: result.error });\r\n          }\r\n        } else {\r\n          console.log(`✅ Utilisateur ${testUser.email} créé avec succès`);\r\n          results.push({ email: testUser.email, success: true });\r\n          \r\n          // Mettre à jour les informations supplémentaires si nécessaire\r\n          if (testUser.company && result.user) {\r\n            await firebaseAuthService.updateUser(result.user.id, {\r\n              company: testUser.company\r\n            });\r\n          }\r\n        }\r\n        \r\n        ": "auth.consolelogutilisateu",
  ")) {\r\n            console.log(`ℹ️ Utilisateur ${testUser.email} existe déjà`);\r\n            results.push({ email: testUser.email, success: true });\r\n          } else {\r\n            console.error(`❌ Erreur pour ${testUser.email}:`, result.error);\r\n            results.push({ email: testUser.email, success: false, error: result.error });\r\n          }\r\n        } else {\r\n          console.log(`✅ Utilisateur ${testUser.email} créé avec succès`);\r\n          results.push({ email: testUser.email, success: true });\r\n          \r\n          // Mettre à jour les informations supplémentaires si nécessaire\r\n          if (testUser.company && result.user) {\r\n            await firebaseAuthService.updateUser(result.user.id, {\r\n              company: testUser.company\r\n            });\r\n          }\r\n        }\r\n        \r\n        // Petit délai pour éviter de surcharger Firebase\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n        \r\n      } catch (error) {\r\n        console.error(`❌ Erreur inattendue pour ${testUser.email}:`, error);\r\n        results.push({ \r\n          email: testUser.email, \r\n          success: false, \r\n          error: error instanceof Error ? error.message : ": "auth.consolelogutilisateu2",
  ")) {\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n              const dataUrl = e.target?.result as string;\r\n              resolve({\r\n                success: true,\r\n                url: dataUrl, // Data URL pour affichage immédiat\r\n                progress: 100\r\n              });\r\n            };\r\n            reader.onerror = () => {\r\n              // Fallback avec image de placeholder\r\n              const randomId = Math.random().toString(36).substr(2, 9);\r\n              resolve({\r\n                success: true,\r\n                url: `https://picsum.photos/400/300?random=${randomId}`,\r\n                progress: 100\r\n              });\r\n            };\r\n            reader.readAsDataURL(file);\r\n          } else {\r\n            // Pour les autres fichiers, générer une URL fictive\r\n            const timestamp = Date.now();\r\n            const randomId = Math.random().toString(36).substr(2, 9);\r\n            const extension = file.name.split(": "navigation.constreadernewfilere1",
  ")) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => resolve(e.target?.result as string);\r\n        reader.onerror = () => resolve(undefined);\r\n        reader.readAsDataURL(file);\r\n      } else {\r\n        resolve(undefined);\r\n      }\r\n    });\r\n  };\r\n\r\n  const validateFile = (file: File): string | null => {\r\n    // Vérifier la taille\r\n    if (file.size > maxSizePerFile * 1024 * 1024) {\r\n      return `Le fichier ${file.name} dépasse la taille maximale de ${maxSizePerFile}MB`;\r\n    }\r\n\r\n    // Vérifier le type\r\n    const extension = ": "forms.constreadernewfilere1",
  ")) {\r\n        return file.name.toLowerCase().endsWith(type.toLowerCase());\r\n      }\r\n      return file.type.includes(type);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtenir une URL de prévisualisation pour un fichier\r\n   *": "forms.returnfilenametolowe",
  ")) {\r\n        return file.name.toLowerCase().endsWith(type.toLowerCase());\r\n      }\r\n      return file.type.includes(type);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtenir une URL de prévisualisation pour un fichier\r\n   */\r\n  getPreviewUrl(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!file.type.startsWith(": "forms.returnfilenametolowe1",
  ")) {\r\n      // Pour les vidéos, obtenir la durée (nécessiterait plus de travail)\r\n      ": "common.pourlesvideosobtenir",
  ")) {\r\n      // Pour les vidéos, obtenir la durée (nécessiterait plus de travail)\r\n      // metadata.duration = await this.getVideoDuration(file);\r\n    }\r\n\r\n    return metadata;\r\n  }\r\n\r\n  /**\r\n   * Obtenir les dimensions d": "common.pourlesvideosobtenir1",
  "))) {\r\n      setDocuments(prev => prev.filter(doc => doc.id !== documentId));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SupplierLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Bouton retour */}\r\n        <BackButton to=\"/supplier/dashboard\" label=\"Retour au tableau de bord\" variant=\"ghost\" />\r\n\r\n        {/* En-tête */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Documents</h1>\r\n            <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n              Gérez vos documents et fichiers\r\n            </p>\r\n          </div>          <Button \r\n            className=\"mt-4 sm:mt-0\"\r\n            onClick={() => setIsUploadModalOpen(true)}\r\n          >\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            {t(": "navigation.setdocumentsprevprev",
  "))) {\r\n      setProductsList(products);\r\n      localStorage.removeItem(STORAGE_KEY);\r\n      // Réinitialiser aussi le service global\r\n      productsService.resetToDefault();\r\n      success(t(": "ecommerce.setproductslistprodu1",
  "))) {\r\n      try {\r\n        // Supprimer du serveur si c": "forms.trysupprimerduserveu",
  "));\n      }\n\n      // Déterminer le rôle automatiquement pour les admins\n      const userRole = isAdminEmail(email) ? ": "auth.determinerleroleauto1",
  "));\n      }\n\n      // Pour les fournisseurs, sourceurs, et influenceurs, on ne valide pas le mot de passe car l": "auth.pourlesfournisseurss",
  "));\r\n\r\n        for (const userData of essentials) {\r\n            try {\r\n                const result = await AdminCreationService.createNewAdminAccount({\r\n                    email: userData.email,\r\n                    password: userData.password,\r\n                    name: userData.name\r\n                });\r\n\r\n                if (result.success) {\r\n                    setResults(prev => prev + `✅ ${userData.email} créé\\n`);\r\n                    setCreatedAccounts(prev => [...prev, userData]);\r\n                } else {\r\n                    setResults(prev => prev + `⚠️ ${userData.email}: ${result.message}\\n`);\r\n                }\r\n            } catch (error: any) {\r\n                setResults(prev => prev + `❌ ${userData.email}: ${error.message}\\n`);\r\n            }\r\n        }\r\n\r\n        setResults(prev => prev + ": "auth.forconstuserdataofes1",
  "));\r\n\r\n// Composant de loading\r\nconst LoadingCard = memo(() => (\r\n    <div className=\"bg-white rounded-lg shadow-md border border-gray-100 animate-pulse\">\r\n        <div className=\"p-6\">\r\n            <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-4\"></div>\r\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\nconst LoadingWidget = memo(() => (\r\n    <div className=\"bg-white rounded-lg shadow-md border border-gray-100 animate-pulse\">\r\n        <div className=\"p-6\">\r\n            <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-6\"></div>\r\n            <div className=\"space-y-3\">\r\n                <div className=\"h-4 bg-gray-200 rounded\"></div>\r\n                <div className=\"h-4 bg-gray-200 rounded w-5/6\"></div>\r\n                <div className=\"h-4 bg-gray-200 rounded w-4/6\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\ninterface Company {\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\ninterface Quote {\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\ninterface Appointment {\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\ninterface Product {\r\n    id: string;\r\n}\r\n\r\nconst OptimizedDashboard: React.FC = memo(() => {\r\n    const { t } = useLanguage();\r\n\r\n    // Requêtes optimisées avec mise en cache\r\n    const { data: companies } = useOptimizedQuery<Company>(": "forms.composantdeloadingco",
  "));\r\n\r\n// Pages supplémentaires\r\nconst ContainersPage = React.lazy(() => import(": "common.pagessupplementaires3",
  "));\r\n\r\nfunction LoginRoute({ children }: { children: React.ReactNode }) {\r\n    const { user, loading } = useAuth();\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\r\n                <LoadingSpinner size=\"lg\" message=\"Vérification de la session...\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (user) {\r\n        const roleRedirects = {\r\n            admin: ": "auth.functionloginroutech",
  "));\r\n\r\nfunction LoginRoute({ children }: { children: React.ReactNode }) {\r\n  const { user, loading } = useAuth();\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\r\n        <LoadingSpinner size=\"lg\" message=\"Vérification de la session...\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (user) {\r\n    const roleRedirects = {\r\n      admin: ": "auth.functionloginroutech1",
  "));\r\n        }\r\n      }\r\n\r\n      // Validation spécifique pour les fournisseurs\r\n      if (selectedRole === ": "ecommerce.validationspecifique2",
  "));\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activer/désactiver le mode simulation\r\n   *": "common.imgsrcurlcreateobjec",
  "));\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activer/désactiver le mode simulation\r\n   */\r\n  setMockMode(enabled: boolean) {\r\n    this.mockMode = enabled;\r\n  }\r\n\r\n  /**\r\n   * Configurer l": "common.imgsrcurlcreateobjec1",
  "));\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Déterminer le type de fichier\r\n   *": "common.imgsrcurlcreateobjec2",
  "));\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Déterminer le type de fichier\r\n   */\r\n  private getFileType(file: File): ": "common.imgsrcurlcreateobjec3",
  "));\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Générer un ID unique\r\n   *": "common.imgsrcurlcreateobjec4",
  "));\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Générer un ID unique\r\n   */\r\n  private generateId(): string {\r\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n  }\r\n\r\n  /**\r\n   * Valider la taille du fichier\r\n   */\r\n  validateFileSize(file: File, maxSizeMB: number = 100): boolean {\r\n    const maxSizeBytes = maxSizeMB * 1024 * 1024;\r\n    return file.size <= maxSizeBytes;\r\n  }\r\n\r\n  /**\r\n   * Valider le type de fichier\r\n   */\r\n  validateFileType(file: File, allowedTypes: string[]): boolean {\r\n    return allowedTypes.some(type => {\r\n      if (type.startsWith(": "common.imgsrcurlcreateobjec5",
  "));\r\n      }\r\n\r\n      // Appliquer la limite\r\n      if (options.limitCount) {\r\n        queryRef = query(queryRef, limit(options.limitCount));\r\n      }\r\n\r\n      // Appliquer la pagination\r\n      if (options.startAfterDoc) {\r\n        queryRef = query(queryRef, startAfter(options.startAfterDoc));\r\n      }\r\n\r\n      const querySnapshot = await getDocs(queryRef);\r\n      const documents: T[] = [];\r\n\r\n      querySnapshot.forEach((doc) => {\r\n        documents.push({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        } as T);\r\n      });\r\n\r\n      return documents;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la liste dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Liste avec pagination\r\n   */\r\n  async listPaginated(options: QueryOptions = {}): Promise<PaginatedResult<T>> {\r\n    try {\r\n      const documents = await this.list(options);\r\n      const hasMore = options.limitCount ? documents.length === options.limitCount : false;\r\n      \r\n      // Obtenir le dernier document pour la pagination\r\n      let lastDoc: QueryDocumentSnapshot | undefined;\r\n      if (documents.length > 0 && hasMore) {\r\n        // Récupérer le dernier document de la requête pour la pagination\r\n        const lastDocData = documents[documents.length - 1];\r\n        if (lastDocData.id) {\r\n          const docRef = doc(db, this.collectionName, lastDocData.id);\r\n          const docSnap = await getDoc(docRef);\r\n          if (docSnap.exists()) {\r\n            lastDoc = docSnap as QueryDocumentSnapshot;\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        data: documents,\r\n        lastDoc,\r\n        hasMore\r\n      };\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la pagination dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recherche dans les documents\r\n   */\r\n  async search(searchTerm: string, searchFields: string[]): Promise<T[]> {\r\n    try {\r\n      // Firebase ne supporte pas la recherche full-text native\r\n      ": "forms.appliquerlalimiteifo",
  "));\r\n      }\r\n\r\n      // Appliquer la limite\r\n      if (options.limitCount) {\r\n        queryRef = query(queryRef, limit(options.limitCount));\r\n      }\r\n\r\n      // Appliquer la pagination\r\n      if (options.startAfterDoc) {\r\n        queryRef = query(queryRef, startAfter(options.startAfterDoc));\r\n      }\r\n\r\n      const querySnapshot = await getDocs(queryRef);\r\n      const documents: T[] = [];\r\n\r\n      querySnapshot.forEach((doc) => {\r\n        documents.push({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        } as T);\r\n      });\r\n\r\n      return documents;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la liste dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Liste avec pagination\r\n   */\r\n  async listPaginated(options: QueryOptions = {}): Promise<PaginatedResult<T>> {\r\n    try {\r\n      const documents = await this.list(options);\r\n      const hasMore = options.limitCount ? documents.length === options.limitCount : false;\r\n      \r\n      // Obtenir le dernier document pour la pagination\r\n      let lastDoc: QueryDocumentSnapshot | undefined;\r\n      if (documents.length > 0 && hasMore) {\r\n        // Récupérer le dernier document de la requête pour la pagination\r\n        const lastDocData = documents[documents.length - 1];\r\n        if (lastDocData.id) {\r\n          const docRef = doc(db, this.collectionName, lastDocData.id);\r\n          const docSnap = await getDoc(docRef);\r\n          if (docSnap.exists()) {\r\n            lastDoc = docSnap as QueryDocumentSnapshot;\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        data: documents,\r\n        lastDoc,\r\n        hasMore\r\n      };\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la pagination dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recherche dans les documents\r\n   */\r\n  async search(searchTerm: string, searchFields: string[]): Promise<T[]> {\r\n    try {\r\n      // Firebase ne supporte pas la recherche full-text native\r\n      // On récupère tous les documents et on filtre côté client\r\n      const allDocuments = await this.list();\r\n      \r\n      const filteredDocuments = allDocuments.filter(doc => {\r\n        return searchFields.some(field => {\r\n          const fieldValue = this.getNestedValue(doc, field);\r\n          if (typeof fieldValue === ": "forms.appliquerlalimiteifo2",
  "));\r\n      }\r\n\r\n      // Connexion universelle : admin si email admin, sinon rôle par défaut\r\n      const userRole = isAdminEmail(email) ? ": "auth.connexionuniverselle2",
  "));\r\n      }\r\n\r\n      // Détermination automatique du rôle\r\n      const userRole = UniversalAuthService.determineUserRole(email);\r\n\r\n      // Création d": "auth.determinationautomat5",
  "));\r\n    }\r\n\r\n    if (validFiles.length === 0) return;\r\n\r\n    // Créer les objets UploadFile\r\n    const newUploadFiles: UploadFile[] = [];\r\n    for (const file of validFiles) {\r\n      const preview = await createPreview(file);\r\n      newUploadFiles.push({\r\n        file,\r\n        id: generateId(),\r\n        progress: 0,\r\n        status: ": "common.ifvalidfileslength0r2",
  "));\r\n    }\r\n\r\n    if (validFiles.length === 0) return;\r\n\r\n    // Créer les objets UploadImage\r\n    const newImages: UploadImage[] = [];\r\n    for (const file of validFiles) {\r\n      try {\r\n        const preview = await createPreview(file);\r\n        newImages.push({\r\n          file,\r\n          id: generateId(),\r\n          preview,\r\n          status: ": "common.ifvalidfileslength0r5",
  "));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-main-container\">\r\n      {/* Background animé */}\r\n      <div className=\"auth-animated-background\">\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n      </div>\r\n\r\n      {/* Carte principale */}\r\n      <div className=\"auth-card\">\r\n        {/* Colonne visuelle */}\r\n        <div className=\"auth-visual-column\">\r\n          <div className=\"auth-visual-content\">\r\n            <h1 className=\"auth-visual-title\">\r\n              {isLoginMode ? t(": "auth.finallysetisloadingf",
  "));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-main-container\">\r\n      {/* Background animé */}\r\n      <div className=\"auth-animated-background\">\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n      </div>\r\n\r\n      {/* Carte principale */}\r\n      <div className=\"auth-card\">\r\n        {/* Colonne visuelle */}\r\n        <div className=\"auth-visual-column\">\r\n          <div className=\"auth-visual-content\">\r\n            <h1 className=\"auth-visual-title\">\r\n              {t(": "navigation.finallysetisloadingf",
  "));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"auth-main-container\">\r\n      {/* Background animé spectaculaire avec tous les effets */}\r\n      <div className=\"auth-animated-background\">\r\n        {/* Particules flottantes améliorées */}\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        \r\n        {/* Particules de lumière */}\r\n        <div className=\"light-particle\"></div>\r\n        <div className=\"light-particle\"></div>\r\n        <div className=\"light-particle\"></div>\r\n        \r\n        {/* Orbes lumineuses */}\r\n        <div className=\"light-orb\"></div>\r\n        <div className=\"light-orb\"></div>\r\n        <div className=\"light-orb\"></div>\r\n        <div className=\"light-orb\"></div>\r\n        \r\n        {/* Ondulations */}\r\n        <div className=\"ripple-effect\"></div>\r\n        <div className=\"ripple-effect\"></div>\r\n        <div className=\"ripple-effect\"></div>\r\n        \r\n        {/* Pulsations énergétiques */}\r\n        <div className=\"energy-pulse\"></div>\r\n        <div className=\"energy-pulse\"></div>\r\n        <div className=\"energy-pulse\"></div>\r\n        \r\n        {/* Forme morphique */}\r\n        <div className=\"morphing-shape\"></div>\r\n      </div>      {/* Carte principale avec effet glassmorphism */}\r\n      <div className=\"auth-card auth-card-glassmorphism auth-spectacular-entrance\">\r\n        {/* Colonne visuelle */}\r\n        <div className=\"auth-visual-column auth-visual-spectacular\">\r\n          <div className=\"auth-visual-content\">\r\n            <h2 className=\"auth-visual-title typing-animation\">\r\n              {isLoginMode ? t(": "auth.finallysetisloadingf1",
  "));\r\nconst SupplierMessagesPage = React.lazy(() => import(": "ecommerce.constsuppliermessage1",
  "));\r\nconst SupplierProfilePage = React.lazy(() => import(": "ecommerce.constsupplierprofile1",
  "), influencerProfile);\r\n        console.log(": "common.influencerprofilecon",
  "), {\r\n                ...profile,\r\n                createdAt: now,\r\n                updatedAt: now\r\n            });\r\n            return docRef.id;\r\n        } catch (error) {\r\n            console.error(": "common.profilecreatedatnowu",
  ").filter(ip => ip.trim()))}\r\n                rows={4}\r\n                placeholder=\"192.168.1.0/24&#10;10.0.0.0/8&#10;172.16.0.0/12\"\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white font-mono text-sm\"\r\n              />\r\n              <p className=\"text-xs text-gray-500 mt-1\">Formats supportés: IP unique (192.168.1.1) ou plage CIDR (192.168.1.0/24)</p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n              <div>\r\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">SSL/HTTPS requis</h4>\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Forcer les connexions sécurisées</p>\r\n              </div>\r\n              <label className=\"flex items-center cursor-pointer\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={settings.sslRequired}\r\n                  onChange={(e) => updateSetting(": "auth.filteripiptrimrows4p",
  ").length;\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <div className=\"space-y-6 p-6\">\r\n                {/* En-tête */}\r\n                <div className=\"flex items-center justify-between\">\r\n                    <BackButton to=\"/admin/dashboard\" label=\"Retour au tableau de bord\" variant=\"ghost\" />\r\n                    <div className=\"flex items-center gap-4\">\r\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                            <Bell className=\"w-4 h-4\" />\r\n                            <span>{unreadCount} non lues</span>\r\n                            {criticalCount > 0 && (\r\n                                <span className=\"px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs font-medium\">\r\n                                    {criticalCount} critiques\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                        <Button onClick={markAllAsRead} variant=\"outline\" size=\"sm\">\r\n                            <Check className=\"w-4 h-4 mr-1\" />\r\n                            Tout marquer comme lu\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                        Centre d": "navigation.lengthreturnadminlay",
  ").length;\r\n        const inactive = total - active;\r\n\r\n        return { total, active, inactive };\r\n    }, [filteredCompanies]);\r\n\r\n    // Rendu des items pour la liste virtualisée\r\n    const renderCompanyItem = ({ index, data }: { index: number; data: Company[] }) => (\r\n        <CompanyItem company={data[index]} ": "common.lengthconstinactivet",
  ").length;\r\n        const inactive = total - active;\r\n\r\n        return { total, active, inactive };\r\n    }, [filteredCompanies]);\r\n\r\n    // Rendu des items pour la liste virtualisée\r\n    const renderCompanyItem = ({ index, data }: { index: number; data: Company[] }) => (\r\n        <CompanyItem company={data[index]} />\r\n    );\r\n\r\n    // Composant de filtres\r\n    const FilterComponent = memo(() => (\r\n        <div className=\"space-y-4\">\r\n            <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Statut\r\n                </label>\r\n                <select\r\n                    value={statusFilter}\r\n                    onChange={(e) => setStatusFilter(e.target.value as any)}\r\n                    className=\"w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n                >\r\n                    <option value=\"all\">Tous</option>\r\n                    <option value=\"active\">Actifs</option>\r\n                    <option value=\"inactive\">Inactifs</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    ));\r\n\r\n    if (loading && !allCompanies) {\r\n        return (\r\n            <div className=\"p-6\">\r\n                <div className=\"animate-pulse space-y-4\">\r\n                    <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\r\n                    <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\r\n                    <div className=\"space-y-3\">\r\n                        {[...Array(10)].map((_, i) => (\r\n                            <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-6 max-w-7xl mx-auto\">\r\n            {/* En-tête avec statistiques */}\r\n            <div className=\"mb-6\">\r\n                <div className=\"flex items-center justify-between\">\r\n                    <div>\r\n                        <h1 className=\"text-2xl font-bold text-gray-900\">\r\n                            Entreprises\r\n                            {isStale && (\r\n                                <span className=\"ml-2 text-sm text-amber-600\">\r\n                                    (Données en cache)\r\n                                </span>\r\n                            )}\r\n                        </h1>\r\n                        <p className=\"text-gray-600 mt-1\">\r\n                            {stats.total} entreprises • {stats.active} actives • {stats.inactive} inactives\r\n                        </p>\r\n                    </div>\r\n\r\n                    <button\r\n                        onClick={() => setShowFilters(!showFilters)}\r\n                        className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\r\n                    >\r\n                        <Filter size={16} className=\"mr-2\" />\r\n                        Filtres\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Panneau de filtres */}\r\n                {showFilters && (\r\n                    <div className=\"mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200\">\r\n                        <FilterComponent />\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Liste virtualisée avec recherche intégrée */}\r\n            <div className=\"bg-white rounded-lg shadow\">\r\n                <VirtualizedList\r\n                    items={filteredCompanies}\r\n                    height={600} // Hauteur fixe pour la virtualisation\r\n                    itemHeight={88} // Hauteur de chaque item\r\n                    renderItem={renderCompanyItem}\r\n                    searchFields={[": "forms.lengthconstinactivet",
  ").length}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n                        <div className=\"flex items-center\">\r\n                            <div className=\"p-2 bg-gray-100 rounded-lg\">\r\n                                <Bell className=\"h-6 w-6 text-gray-600\" />\r\n                            </div>\r\n                            <div className=\"ml-4\">\r\n                                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Non lues</p>\r\n                                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{unreadCount}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Filtres et recherche */}\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n                    <div className=\"flex flex-col sm:flex-row gap-4\">\r\n                        <div className=\"flex-1\">\r\n                            <div className=\"relative\">\r\n                                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Rechercher dans les alertes...\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"flex gap-2\">\r\n                            <select\r\n                                value={filterType}\r\n                                onChange={(e) => setFilterType(e.target.value)}\r\n                                className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n                            >\r\n                                <option value=\"all\">Tous les types</option>\r\n                                <option value=\"error\">Erreurs</option>\r\n                                <option value=\"warning\">Avertissements</option>\r\n                                <option value=\"info\">Informations</option>\r\n                                <option value=\"success\">Succès</option>\r\n                            </select>\r\n\r\n                            <select\r\n                                value={filterPriority}\r\n                                onChange={(e) => setFilterPriority(e.target.value)}\r\n                                className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n                            >\r\n                                <option value=\"all\">Toutes priorités</option>\r\n                                <option value=\"critical\">Critique</option>\r\n                                <option value=\"high\">Élevée</option>\r\n                                <option value=\"medium\">Moyenne</option>\r\n                                <option value=\"low\">Faible</option>\r\n                            </select>\r\n\r\n                            <label className=\"flex items-center gap-2 px-3 py-2 text-sm\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked={showUnreadOnly}\r\n                                    onChange={(e) => setShowUnreadOnly(e.target.checked)}\r\n                                    className=\"rounded border-gray-300 text-red-600 focus:ring-red-500\"\r\n                                />\r\n                                <span className=\"text-gray-700 dark:text-gray-300\">Non lues seulement</span>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Liste des alertes */}\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden\">\r\n                    {loading ? (\r\n                        <div className=\"p-8 text-center\">\r\n                            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto\"></div>\r\n                            <p className=\"mt-2 text-gray-500 dark:text-gray-400\">Chargement des alertes...</p>\r\n                        </div>\r\n                    ) : filteredAlerts.length === 0 ? (\r\n                        <div className=\"p-8 text-center\">\r\n                            <Bell className=\"mx-auto h-12 w-12 text-gray-400\" />\r\n                            <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-white\">Aucune alerte</h3>\r\n                            <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n                                {alerts.length === 0 ? ": "forms.lengthpdivdivdivdivc",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"flex-shrink-0\">\r\n                <Download className=\"h-8 w-8 text-purple-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Téléchargements</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {documents.reduce((total, doc) => total + doc.downloadCount, 0)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filtres et recherche */}        <div className=\"bg-white dark:bg-gray-700 p-6 rounded-lg shadow-sm\">\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-300 h-4 w-4\" />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Rechercher un document...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-500 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-600 dark:placeholder-gray-400\"\r\n                />\r\n              </div>            </div>\r\n            \r\n            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={filterType}\r\n                onChange={(e) => setFilterType(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-500 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n              >\r\n                  <option value=\"all\">Tous les types</option>\r\n                  <option value=\"contract\">Contrats</option>\r\n                  <option value=\"invoice\">Factures</option>\r\n                  <option value=\"certificate\">Certificats</option>\r\n                  <option value=\"manual\">Manuels</option>\r\n                  <option value=\"other\">Autres</option>                <option value=\"all\">Tous les types</option>\r\n                <option value=\"contract\">Contrats</option>\r\n                <option value=\"invoice\">Factures</option>\r\n                <option value=\"certificate\">Certificats</option>\r\n                <option value=\"manual\">Manuels</option>\r\n                <option value=\"other\">Autres</option>\r\n              </select>\r\n            </div>\r\n              \r\n            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={filterStatus}\r\n                onChange={(e) => setFilterStatus(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-500 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n              >\r\n                <option value=\"all\">Tous les statuts</option>\r\n                <option value=\"approved\">Approuvés</option>\r\n                <option value=\"pending\">En attente</option>\r\n                <option value=\"rejected\">Rejetés</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Liste des documents */}\r\n        <div className=\"bg-white dark:bg-gray-800 shadow-sm rounded-lg overflow-hidden\">\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n              <thead className=\"bg-gray-50 dark:bg-gray-900\">\r\n                <tr>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Document\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Type\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Taille\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Date\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Statut\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Téléchargements\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Actions\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                {filteredDocuments.map((document) => (\r\n                  <tr key={document.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"flex items-center\">\r\n                        <FolderOpen className=\"h-5 w-5 text-blue-500 mr-3\" />\r\n                        <div>\r\n                          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                            {document.name}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                            {document.category}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <span className=\"text-sm text-gray-900 dark:text-white\">\r\n                        {getTypeText(document.type)}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                      {document.size}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400\">\r\n                        <Calendar className=\"h-4 w-4 mr-1\" />\r\n                        {new Date(document.uploadDate).toLocaleDateString(": "forms.lengthpdivdivdivdivc1",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"flex-shrink-0\">\r\n                <Download className=\"h-8 w-8 text-purple-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Téléchargements</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {documents.reduce((total, doc) => total + doc.downloadCount, 0)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>        {/* Filtres et recherche */}\r\n        <div className=\"bg-white dark:bg-gray-700 p-6 rounded-lg shadow-sm\">\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-300 h-4 w-4\" />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Rechercher un document...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-500 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-600 dark:placeholder-gray-400\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={filterType}\r\n                onChange={(e) => setFilterType(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-500 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n              >\r\n                <option value=\"all\">Tous les types</option>\r\n                <option value=\"contract\">Contrats</option>\r\n                <option value=\"invoice\">Factures</option>\r\n                <option value=\"certificate\">Certificats</option>\r\n                <option value=\"manual\">Manuels</option>\r\n                <option value=\"other\">Autres</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={filterStatus}\r\n                onChange={(e) => setFilterStatus(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-500 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n              >\r\n                <option value=\"all\">Tous les statuts</option>\r\n                <option value=\"approved\">Approuvés</option>\r\n                <option value=\"pending\">En attente</option>\r\n                <option value=\"rejected\">Rejetés</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Liste des documents */}\r\n        <div className=\"bg-white dark:bg-gray-800 shadow-sm rounded-lg overflow-hidden\">\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n              <thead className=\"bg-gray-50 dark:bg-gray-900\">\r\n                <tr>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Document\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Type\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Taille\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Date\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Statut\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Téléchargements\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                    Actions\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                {filteredDocuments.map((document) => (\r\n                  <tr key={document.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"flex items-center\">\r\n                        <FolderOpen className=\"h-5 w-5 text-blue-500 mr-3\" />\r\n                        <div>\r\n                          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                            {document.name}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                            {document.category}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <span className=\"text-sm text-gray-900 dark:text-white\">\r\n                        {getTypeText(document.type)}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                      {document.size}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400\">\r\n                        <Calendar className=\"h-4 w-4 mr-1\" />\r\n                        {new Date(document.uploadDate).toLocaleDateString(": "forms.lengthpdivdivdivdivc2",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm\">\r\n            <div className=\"flex items-center\">\r\n              <MapPin className=\"w-8 h-8 text-orange-500\" />\r\n              <div className=\"ml-3\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Capacité totale</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {containers.reduce((sum, c) => sum + c.totalCapacity, 0)} CBM\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Liste des conteneurs */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm overflow-hidden\">\r\n          <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\r\n            <h2 className=\"text-lg font-medium text-gray-900 dark:text-white\">\r\n              Liste des conteneurs\r\n            </h2>\r\n          </div>\r\n          \r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n              <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n                <tr>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Nom\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Itinéraire\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Capacité\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Statut\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Départ estimé\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                    Actions\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                {containers.map((container) => {\r\n                  const progress = (container.usedCapacity / container.totalCapacity) * 100;\r\n                  const progressColor = getProgressColor(container);\r\n                  \r\n                  return (\r\n                    <tr key={container.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div className=\"flex items-center\">\r\n                          <Package className=\"w-5 h-5 text-gray-400 mr-3\" />\r\n                          <div>\r\n                            <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                              {container.name}\r\n                            </div>\r\n                            <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                              ID: {container.id}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div className=\"text-sm text-gray-900 dark:text-white\">\r\n                          {container.departureLocation}\r\n                        </div>\r\n                        <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                          → {container.arrivalLocation}\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div className=\"text-sm text-gray-900 dark:text-white\">\r\n                          {container.usedCapacity} / {container.totalCapacity} CBM\r\n                        </div>\r\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-1\">\r\n                          <div\r\n                            className={`${progressColor} h-2 rounded-full transition-all duration-300`}\r\n                            style={{ width: `${progress}%` }}\r\n                          ></div>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\r\n                          container.status === ": "forms.lengthpdivdivdivdivc3",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm\">\r\n            <div className=\"flex items-center\">\r\n              <Package className=\"w-8 h-8 text-gray-500\" />\r\n              <div className=\"ml-3\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Fermés</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {containers.filter(c => c.status === ": "forms.lengthpdivdivdivdivc4",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Approuvés</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {items.filter(i => i.status === ": "forms.lengthpdivdivdivdivc5",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Livrées</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {orders.filter(o => o.status === ": "forms.lengthpdivdivdivdivc6",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Livrées</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {shipments.filter(s => s.status === ": "forms.lengthpdivdivdivdivc7",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <DollarSign className=\"h-8 w-8 text-green-600\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Revenus</p>\r\n                <p className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n                  {formatPrice(getTotalRevenue())}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Rechercher par numéro, client ou fournisseur...\"\r\n                  value={searchTerm}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white placeholder-gray-600 dark:placeholder-gray-400\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={statusFilter}\r\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setStatusFilter(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n              >\r\n                <option value=\"\">Tous les statuts</option>\r\n                <option value=\"pending\">En attente</option>\r\n                <option value=\"confirmed\">Confirmée</option>\r\n                <option value=\"shipped\">Expédiée</option>\r\n                <option value=\"delivered\">Livrée</option>\r\n                <option value=\"cancelled\">Annulée</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Orders Table */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden\">\r\n          {loading ? (\r\n            <div className=\"p-8 text-center\">\r\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto\"></div>\r\n              <p className=\"mt-2 text-gray-500 dark:text-gray-400\">Chargement...</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n                <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n                  <tr>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Commande\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Client\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Fournisseur\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Produits\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Montant\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Statut\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Date\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Actions\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                  {filteredOrders.map((order) => (\r\n                    <tr key={order.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                          {order.orderNumber}\r\n                        </div>\r\n                        {order.notes && (\r\n                          <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n                            {order.notes}\r\n                          </div>\r\n                        )}\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                          {order.customerName}\r\n                        </div>\r\n                        <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                          {order.customerEmail}\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div className=\"text-sm text-gray-900 dark:text-white\">\r\n                          {order.supplierName}\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4\">\r\n                        <div className=\"text-sm text-gray-900 dark:text-white\">\r\n                          {order.products.length} produit{order.products.length > 1 ? ": "auth.lengthpdivdivdivdivc",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Shield className=\"h-8 w-8 text-purple-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Priorité élevée</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {items.filter(i => i.priority === ": "forms.lengthpdivdivdivdivc8",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Truck className=\"h-8 w-8 text-blue-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Expédiées</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {shipments.filter(s => s.status === ": "forms.lengthpdivdivdivdivc9",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Truck className=\"h-8 w-8 text-orange-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Expédiées</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {orders.filter(o => o.status === ": "forms.lengthpdivdivdivdivc10",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <XCircle className=\"h-8 w-8 text-red-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Rejetés</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {items.filter(i => i.status === ": "forms.lengthpdivdivdivdivc11",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={filterType}\r\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setFilterType(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n              >\r\n                <option value=\"\">Tous les types</option>\r\n                <option value=\"user\">Utilisateur</option>\r\n                <option value=\"product\">Produit</option>\r\n                <option value=\"review\">Avis</option>\r\n                <option value=\"message\">Message</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={filterStatus}\r\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setFilterStatus(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n              >\r\n                <option value=\"\">Tous les statuts</option>\r\n                <option value=\"pending\">En attente</option>\r\n                <option value=\"approved\">Approuvé</option>\r\n                <option value=\"rejected\">Rejeté</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Moderation Items */}\r\n        <div className=\"space-y-4\">\r\n          {loading ? (\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-8 text-center\">\r\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto\"></div>\r\n              <p className=\"mt-2 text-gray-500 dark:text-gray-400\">Chargement...</p>\r\n            </div>\r\n          ) : (\r\n            filteredItems.map((item) => (\r\n              <div key={item.id} className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex-1\">\r\n                    {/* Header */}\r\n                    <div className=\"flex items-center gap-3 mb-3\">\r\n                      <span className={`inline-flex items-center gap-1 px-2.5 py-0.5 rounded-full text-xs font-medium ${getTypeColor(item.type)}`}>\r\n                        {getTypeIcon(item.type)}\r\n                        {item.type}\r\n                      </span>\r\n                      <span className={`inline-flex items-center gap-1 px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(item.priority)}`}>\r\n                        {item.priority}\r\n                      </span>\r\n                      <span className={`inline-flex items-center gap-1 px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(item.status)}`}>\r\n                        {getStatusIcon(item.status)}\r\n                        {item.status}\r\n                      </span>\r\n                    </div>\r\n\r\n                    {/* Content */}\r\n                    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n                      {item.title}\r\n                    </h3>\r\n                    <p className=\"text-gray-600 dark:text-gray-400 mb-3\">\r\n                      {item.description}\r\n                    </p>\r\n                    {item.content && (\r\n                      <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-3 mb-3\">\r\n                        <p className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                          {item.content}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Footer */}\r\n                    <div className=\"flex items-center justify-between text-sm text-gray-500 dark:text-gray-400\">\r\n                      <span>Signalé par: {item.reportedBy}</span>\r\n                      <span>{formatDate(item.reportedAt)}</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Actions */}\r\n                  {item.status === ": "forms.lengthpdivdivdivdivf",
  ").length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>        {/* Filters */}\r\n        <div className=\"bg-white dark:bg-gray-700 rounded-lg shadow p-6\">\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-300\" size={16} />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Rechercher par numéro de suivi, commande ou client...\"\r\n                  value={searchTerm}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-500 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-600 dark:placeholder-gray-400\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={statusFilter}\r\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setStatusFilter(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n              >\r\n                <option value=\"\">Tous les statuts</option>\r\n                <option value=\"preparing\">Préparation</option>\r\n                <option value=\"shipped\">Expédiée</option>\r\n                <option value=\"in_transit\">En transit</option>\r\n                <option value=\"delivered\">Livrée</option>\r\n                <option value=\"exception\">Exception</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Shipments Table */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden\">\r\n          {loading ? (\r\n            <div className=\"p-8 text-center\">\r\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\r\n              <p className=\"mt-2 text-gray-500 dark:text-gray-400\">Chargement...</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n                <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n                  <tr>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Expédition\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Client\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Transporteur\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Statut\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Dates\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Valeur\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Actions\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                  {filteredShipments.map((shipment) => (\r\n                    <tr key={shipment.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div>\r\n                          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                            {shipment.trackingNumber}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                            Commande: {shipment.orderId}\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4\">\r\n                        <div>\r\n                          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                            {shipment.customerName}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400 flex items-center gap-1\">\r\n                            <MapPin size={12} />\r\n                            {shipment.customerAddress.split(": "forms.lengthpdivdivdivdivf1",
  ").reduce((current, key) => current?.[key], obj);\r\n  }\r\n}\r\n\r\n// Services spécialisés pour chaque collection\r\n\r\nexport interface FirestoreProduct {\r\n  id?: string;\r\n  name: Record<string, string>;\r\n  description: Record<string, string>;\r\n  price: { cny: number; unitCny: number };\r\n  images: string[];\r\n  category: string;\r\n  supplierId: string;\r\n  moq: number;\r\n  certifiedCE: boolean;\r\n  origin?: string;\r\n  material?: string;\r\n  brand?: string;\r\n  modelNumber?: string;\r\n  application?: string;\r\n  style?: string;\r\n  specifications?: Record<string, any>;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\nexport interface FirestoreOrder {\r\n  id?: string;\r\n  userId: string;\r\n  supplierId: string;\r\n  products: Array<{\r\n    productId: string;\r\n    quantity: number;\r\n    price: number;\r\n  }>;\r\n  status: ": "forms.reducecurrentkeycurr1",
  ").toISOString()\r\n                }\r\n            ];\r\n\r\n            let createdCount = 0;\r\n            for (const user of testUsers) {\r\n                try {\r\n                    await setDoc(doc(db, this.collectionName, user.id), user);\r\n                    createdCount++;\r\n                    console.log(`✅ Utilisateur de test créé: ${user.email}`);\r\n                } catch (error) {\r\n                    console.error(`❌ Erreur lors de la création de ${user.email}:`, error);\r\n                }\r\n            }\r\n\r\n            console.log(`✅ ${createdCount} utilisateurs de test créés`);\r\n            return { success: true, count: createdCount };\r\n\r\n        } catch (error) {\r\n            console.error(": "auth.toisostringletcreate2",
  ");\n\n        // 🚨 DÉSACTIVÉ - cause les erreurs Auth et déconnexions\n        // Initialiser la base de données avec les utilisateurs et données de test\n        try {\n          ": "auth.desactivecauseleserr1",
  ");\n\n        // 🚨 DÉSACTIVÉ - cause les erreurs Auth et déconnexions\n        // Initialiser la base de données avec les utilisateurs et données de test\n        try {\n          // await initializationService.initializeDatabase();\n          // initializationService.displayTestCredentials();\n          console.log(": "auth.desactivecauseleserr2",
  ");\n              } finally {\n                setLoading(false);\n              }\n            }} className=\"space-y-4\">\n              <Input\n                label=\"Email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                disabled={true} // Email should not be editable\n              />\n              <Input\n                label=\"Nom\"\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n              />\n              <Select\n                label=\"Rôle\"\n                value={role}\n                onChange={(e) => setRole(e.target.value as ": "auth.finallysetloadingfal1",
  ");\n    setIsLoading(true);\n    try {\n      // Déterminer le rôle pour Google Sign-In aussi\n      const userRole = isAdminEmail(": "auth.setisloadingtruetryd1",
  ");\n    setIsNotificationCenterOpen(!isNotificationCenterOpen);\n    setIsLanguageMenuOpen(false);\n    setIsCurrencyMenuOpen(false);\n  };\n\n  const handleNotificationCountChange = () => {\n    // Le compteur est maintenant géré par le hook useNotifications\n    // Cette fonction peut être utilisée pour des actions supplémentaires\n    refreshNotifications();\n  };\n\n  const handleLanguageChange = (newLanguage: UserLanguage) => {\n    setLanguage(newLanguage);\n    setIsLanguageMenuOpen(false);\n  };\n\n  const handleCurrencyChange = (newCurrency: UserCurrency) => {\n    setCurrency(newCurrency);\n    setIsCurrencyMenuOpen(false);\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      navigate(`": "navigation.setisnotificationcen",
  ");\n    setIsNotificationCenterOpen(!isNotificationCenterOpen);\n    setIsLanguageMenuOpen(false);\n    setIsCurrencyMenuOpen(false);\n  };\n\n  const handleNotificationCountChange = () => {\n    // Le compteur est maintenant géré par le hook useNotifications\n    // Cette fonction peut être utilisée pour des actions supplémentaires\n    refreshNotifications();\n  };\n\n  const handleLanguageChange = (newLanguage: UserLanguage) => {\n    setLanguage(newLanguage);\n    setIsLanguageMenuOpen(false);\n  };\n\n  const handleCurrencyChange = (newCurrency: UserCurrency) => {\n    setCurrency(newCurrency);\n    setIsCurrencyMenuOpen(false);\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);\n    }\n  };\n\n  useEffect(() => {\n    if (searchQuery.trim()) {\n      const fetchSuggestions = async () => {\n        if (import.meta.env.DEV) {\n          // Mock suggestions côté front\n          const query = searchQuery.toLowerCase();\n          const allSuggestions = [...popularSearches, ...searchKeywords];\n          const filtered = allSuggestions.filter(s => s.toLowerCase().includes(query));\n          setSuggestions(filtered.slice(0, 7));\n        } else {\n          try {\n            const response = await axios.get(`": "navigation.setisnotificationcen1",
  ");\n    setIsNotificationCenterOpen(!isNotificationCenterOpen);\n    setIsLanguageMenuOpen(false);\n    setIsCurrencyMenuOpen(false);\n  };\n\n  const handleNotificationCountChange = () => {\n    // Le compteur est maintenant géré par le hook useNotifications\n    // Cette fonction peut être utilisée pour des actions supplémentaires\n    refreshNotifications();\n  };\n\n  const handleLanguageChange = (newLanguage: UserLanguage) => {\n    setLanguage(newLanguage);\n    setIsLanguageMenuOpen(false);\n  };\n\n  const handleCurrencyChange = (newCurrency: UserCurrency) => {\n    setCurrency(newCurrency);\n    setIsCurrencyMenuOpen(false);\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);\n    }\n  };\n\n  useEffect(() => {\n    if (searchQuery.trim()) {\n      const fetchSuggestions = async () => {\n        if (import.meta.env.DEV) {\n          // Mock suggestions côté front\n          const query = searchQuery.toLowerCase();\n          const allSuggestions = [...popularSearches, ...searchKeywords];\n          const filtered = allSuggestions.filter(s => s.toLowerCase().includes(query));\n          setSuggestions(filtered.slice(0, 7));\n        } else {\n          try {\n            const response = await axios.get(`/api/suggestions?q=${encodeURIComponent(searchQuery)}`);\n            setSuggestions(Array.isArray(response.data) ? response.data : []);\n          } catch (error) {\n            console.error(": "navigation.setisnotificationcen2",
  ");\n    setLoading(true);\n\n    try {\n      await userService.createUser(email, password, name, role);\n      setSuccess(`Utilisateur ${email} créé avec succès`);\n      setShowAddUserModal(false);\n      resetForm();\n      loadUsers();\n    } catch (err: unknown) {\n      console.error(": "auth.setloadingtruetryawa1",
  ");\n    setLoading(true);\n\n    try {\n      await userService.deleteUser(selectedUser.id);\n      setSuccess(`Utilisateur ${selectedUser.email} supprimé avec succès`);\n      setShowDeleteConfirm(false);\n      setSelectedUser(null);\n      loadUsers();\n    } catch (err: unknown) {\n      console.error(": "auth.setloadingtruetryawa3",
  ");\n    setMessageSent(true);\n    \n    setTimeout(() => {\n      setMessageSent(false);\n      setShowContactForm(false);\n    }, 3000);\n  };\n\n  const handleSubmitSampleRequest = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!user || !message.trim()) return;\n    \n    const newMessage = {\n      id: `msg_${Date.now()}`,\n      supplierId: product.id,\n      supplierName: product.supplier.name,\n      content: `[${t(": "forms.setmessagesenttruese",
  ");\n    setMessageSent(true);\n    \n    setTimeout(() => {\n      setMessageSent(false);\n      setShowSampleForm(false);\n    }, 3000);\n  };\n  \n  const getDescription = () => {\n    if (language === ": "common.setmessagesenttruese",
  ");\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Nouveaux états pour les champs spécifiques aux influenceurs\n  const [socialMediaLinks, setSocialMediaLinks] = useState(": "common.constisloadingsetisl2",
  ");\n  const [messageSent, setMessageSent] = useState(false);\n  const [showAllSpecs, setShowAllSpecs] = useState(false);\n  const [showVideo, setShowVideo] = useState(false);\n  \n  ": "common.constmessagesentsetm",
  ");\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n\n  // Hook personnalisé pour les notifications - uniquement si l": "common.constsuggestionssets2",
  ");\n  const { success } = useToastContext();\n  const { t } = useLanguage();\n\n  const handleDeleteProduct = (productName: string) => {\n    if (window.confirm(`Êtes-vous sûr de vouloir supprimer le produit ": "forms.constsuccessusetoast1",
  ");\n  const { success } = useToastContext();\n  const { t } = useLanguage();\n\n  const handleDeleteProduct = (productName: string) => {\n    if (window.confirm(`Êtes-vous sûr de vouloir supprimer le produit \"${productName}\" ?`)) {\n      // Ici, vous appelleriez votre API pour supprimer le produit\n      // Pour la démo, on simule une suppression réussie\n      success(`Le produit \"${productName}\" a été supprimé avec succès.`);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{t(": "forms.constsuccessusetoast2",
  ");\n  };\n\n  const openEditModal = (user: User) => {\n    setSelectedUser(user);\n    setEmail(user.email);\n    setName(user.name);\n    setRole(user.role);\n    setShowEditUserModal(true);\n  };\n\n  const openDeleteConfirm = (user: User) => {\n    setSelectedUser(user);\n    setShowDeleteConfirm(true);\n  };\n\n  const renderOverview = () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"flex items-center\">\n          <Users className=\"h-8 w-8 text-blue-500\" />\n          <div className=\"ml-4\">\n            <p className=\"text-sm font-medium text-gray-500\">Utilisateurs totaux</p>\n            <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{stats.totalUsers}</p>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"flex items-center\">\n          <Users className=\"h-8 w-8 text-green-500\" />\n          <div className=\"ml-4\">\n            <p className=\"text-sm font-medium text-gray-500\">Fournisseurs</p>\n            <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{stats.totalSuppliers}</p>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"flex items-center\">\n          <Users className=\"h-8 w-8 text-orange-500\" />\n          <div className=\"ml-4\">\n            <p className=\"text-sm font-medium text-gray-500\">Clients</p>\n            <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{stats.totalCustomers}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"flex items-center\">\n          <Users className=\"h-8 w-8 text-red-500\" />\n          <div className=\"ml-4\">\n            <p className=\"text-sm font-medium text-gray-500\">Administrateurs</p>\n            <p className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">{stats.totalAdmins}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderUsers = () => (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n      <div className=\"px-4 py-5 sm:px-6 flex flex-col sm:flex-row justify-between items-start sm:items-center\">\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">Gestion des utilisateurs</h3>\n          <p className=\"text-sm text-gray-500 mt-1\">{filteredUsers.length} utilisateur(s) trouvé(s)</p>\n        </div>\n        <div className=\"mt-4 sm:mt-0 flex flex-col sm:flex-row gap-4\">\n            <Input\n              type=\"text\"\n            placeholder=\"Rechercher par email ou nom...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full sm:w-64\"\n            leftIcon={<Search className=\"h-5 w-5 text-gray-400\" />}\n            />\n            <Select\n              value={roleFilter}\n              onChange={(e) => setRoleFilter(e.target.value)}\n              options={[\n                { value: ": "auth.constopeneditmodalus",
  ");\r\n\r\n                // Créer l": "common.creerl2",
  ");\r\n\r\n            // 7. Créer l": "common.7creerl",
  ");\r\n\r\n            // 9. Vérifier que l": "common.9verifierquel1",
  ");\r\n\r\n            // Créer directement les comptes essentiels via le service\r\n            const accounts = [\r\n                {\r\n                    email: ": "auth.creerdirectementlesc",
  ");\r\n\r\n            // Si un mot de passe est fourni, tenter la connexion\r\n            if (password) {\r\n                try {\r\n                    await signInWithEmailAndPassword(auth, this.ADMIN_EMAIL, password);\r\n                    console.log(": "auth.siunmotdepasseestfou",
  ");\r\n\r\n            // Vérifier si des utilisateurs existent déjà\r\n            const usersCollection = collection(db, ": "admin.verifiersidesutilisa1",
  ");\r\n\r\n        const errors: string[] = [];\r\n        let deletedCount = 0;\r\n\r\n        try {\r\n            // 1. Récupérer tous les utilisateurs de Firestore\r\n            const usersRef = collection(db, ": "forms.consterrorsstringlet1",
  ");\r\n\r\n        const newAccounts: UserAccount[] = [];\r\n\r\n        for (const userData of defaultUsers) {\r\n            try {\r\n                setResults(prev => prev + `👤 Création: ${userData.email} (${userData.role})\\n`);\r\n\r\n                const result = await AdminCreationService.createNewAdminAccount({\r\n                    email: userData.email,\r\n                    password: userData.password,\r\n                    name: userData.name\r\n                });\r\n\r\n                if (result.success) {\r\n                    setResults(prev => prev + `✅ ${userData.email} créé avec succès\\n`);\r\n                    newAccounts.push(userData);\r\n                } else {\r\n                    setResults(prev => prev + `⚠️ ${userData.email}: ${result.message}\\n`);\r\n                }\r\n\r\n                // Pause entre les créations\r\n                await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n            } catch (error: any) {\r\n                setResults(prev => prev + `❌ Erreur pour ${userData.email}: ${error.message}\\n`);\r\n            }\r\n        }\r\n\r\n        setCreatedAccounts(newAccounts);\r\n        setResults(prev => prev + `\\n✅ ${newAccounts.length} utilisateur(s) créé(s) avec succès\\n`);\r\n\r\n        setIsCreating(false);\r\n        return newAccounts;\r\n    };\r\n\r\n    const handleFullReset = async () => {\r\n        if (!confirm(": "auth.constnewaccountsuser1",
  ");\r\n\r\n        if (this.authStateUnsubscribe) {\r\n            this.authStateUnsubscribe();\r\n            this.authStateUnsubscribe = null;\r\n        }\r\n\r\n        this.stopSessionMonitoring();\r\n        this.currentUser = null;\r\n    }\r\n\r\n    /**\r\n     * Charger le profil utilisateur depuis Firestore\r\n     */\r\n    private async loadUserProfile(firebaseUser: FirebaseUser): Promise<User | null> {\r\n        try {\r\n            const userDocRef = doc(db, ": "admin.ifthisauthstateunsub",
  ");\r\n\r\n        return {\r\n            userId: userRef.id,\r\n            profileId: profileRef.id,\r\n            credentials: {\r\n                email: ": "auth.returnuseriduserrefi",
  ");\r\n\r\n        try {\r\n            // Arrêter la surveillance de session\r\n            this.stopSessionMonitoring();\r\n\r\n            // Déconnecter de Firebase\r\n            await signOut(auth);\r\n\r\n            // Nettoyer l": "common.tryarreterlasurveill",
  ");\r\n\r\n        try {\r\n            // Rechercher par email\r\n            const users = await adminUserServiceFixed.getAllUsers();\r\n            const adminUser = users.find(user => user.email === this.adminEmail);\r\n\r\n            if (adminUser) {\r\n                console.log(`✅ Utilisateur trouvé en Firestore:`);\r\n                console.log(`   UID: ${adminUser.uid}`);\r\n                console.log(`   Email: ${adminUser.email}`);\r\n                console.log(`   Nom: ${adminUser.name}`);\r\n                console.log(`   Rôle: ${adminUser.role}`);\r\n                console.log(`   Actif: ${adminUser.isActive}`);\r\n                console.log(`   Dernière connexion: ${adminUser.lastLogin || ": "auth.tryrechercherparemai",
  ");\r\n\r\n        try {\r\n            const result = await AdminCreationService.createDefaultAdminAccount();\r\n\r\n            if (result.success && result.credentials) {\r\n                setResults(`✅ Compte admin par défaut créé avec succès!\r\n\r\n📧 Email: ${result.credentials.email}\r\n🔑 Mot de passe: ${result.credentials.password}\r\n🆔 UID: ${result.uid || ": "auth.tryconstresultawaita1",
  ");\r\n\r\n        try {\r\n            const result = await AdminCreationService.createDefaultAdminAccount();\r\n\r\n            if (result.success && result.credentials) {\r\n                setResults(prev => prev + `✅ Admin créé avec succès !\\n`);\r\n                setResults(prev => prev + `📧 Email: ${result.credentials.email}\\n`);\r\n                setResults(prev => prev + `🔑 Mot de passe: ${result.credentials.password}\\n`);\r\n\r\n                setUltimateResult({\r\n                    success: true,\r\n                    createdCount: 1,\r\n                    accounts: [{\r\n                        email: result.credentials.email,\r\n                        password: result.credentials.password,\r\n                        name: ": "auth.tryconstresultawaita3",
  ");\r\n\r\n        try {\r\n            const result = await AdminCreationService.createNewAdminAccount(formData);\r\n\r\n            if (result.success) {\r\n                setResults(`✅ Succès: ${result.message}\r\n                \r\n📧 Email: ${formData.email}\r\n🔑 Mot de passe: ${formData.password}\r\n🆔 UID: ${result.uid || ": "auth.tryconstresultawaita5",
  ");\r\n\r\n        try {\r\n            const result = await AdminCreationService.createTestAdminAccounts();\r\n\r\n            if (result.success && result.createdAccounts) {\r\n                let message = `✅ ${result.createdAccounts.length} compte(s) admin créé(s):\r\n\r\n`;\r\n                result.createdAccounts.forEach((account, index) => {\r\n                    message += `${index + 1}. 📧 ${account.email}\r\n   🔑 Mot de passe: ${account.password}\r\n   🆔 UID: ${account.uid}\r\n\r\n`;\r\n                });\r\n\r\n                message += `🎯 Instructions:\r\n1. Choisissez un compte ci-dessus\r\n2. Déconnectez-vous\r\n3. Connectez-vous avec l": "auth.tryconstresultawaita7",
  ");\r\n\r\n        try {\r\n            const result = await adminUserServiceFixed.syncAllVisibleUsers();\r\n\r\n            if (result.success) {\r\n                console.log(`✅ Synchronisation réussie: ${result.count} utilisateur(s) synchronisé(s)`);\r\n            } else {\r\n                console.log(`❌ Échec de la synchronisation: ${result.error}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(": "admin.tryconstresultawaita1",
  ");\r\n\r\n        try {\r\n            const result = await login(formData.email, formData.password);\r\n\r\n            if (result.success && result.user) {\r\n                setSuccess(`Connexion réussie ! Redirection vers ${result.user.role}...`);\r\n\r\n                ": "auth.tryconstresultawaitl",
  ");\r\n\r\n        try {\r\n            const result = await login(formData.email, formData.password);\r\n\r\n            if (result.success && result.user) {\r\n                setSuccess(`Connexion réussie ! Redirection vers ${result.user.role}...`);\r\n\r\n                // Redirection automatique après un court délai\r\n                setTimeout(() => {\r\n                    window.location.href = result.redirectTo || getRedirectPath(result.user!.role);\r\n                }, 1500);\r\n\r\n            } else {\r\n                setError(result.error || ": "auth.tryconstresultawaitl2",
  ");\r\n\r\n        try {\r\n            const users = await adminUserServiceFixed.getAllUsers();\r\n            const adminUser = users.find(user => user.email === this.adminEmail);\r\n\r\n            if (adminUser) {\r\n                // Mettre à jour le rôle si nécessaire\r\n                if (adminUser.role !== ": "auth.tryconstusersawaitad1",
  ");\r\n\r\n      // Ajouter à la liste locale sans rechargement\r\n      const newUser: AdminUser = {\r\n        uid: userDocument.uid,\r\n        email: userDocument.email,\r\n        name: userDocument.name,\r\n        role: userDocument.role,\r\n        createdAt: new Date(userDocument.createdAt),\r\n        isActive: userDocument.isActive,\r\n      };\r\n\r\n      setUsers(prevUsers => [newUser, ...prevUsers]);\r\n\r\n      ": "auth.ajouteralalistelocal1",
  ");\r\n\r\n      // Ajouter à la liste locale sans rechargement\r\n      const newUser: AdminUser = {\r\n        uid: userDocument.uid,\r\n        email: userDocument.email,\r\n        name: userDocument.name,\r\n        role: userDocument.role,\r\n        createdAt: new Date(userDocument.createdAt),\r\n        isActive: userDocument.isActive,\r\n      };\r\n\r\n      setUsers(prevUsers => [newUser, ...prevUsers]);\r\n\r\n      // Fermer le modal\r\n      setIsCreateModalOpen(false);\r\n\r\n      console.log(": "auth.ajouteralalistelocal2",
  ");\r\n\r\n      // Créer des fournisseurs de test\r\n      await this.createTestSuppliers();\r\n      \r\n      // Créer des produits de test\r\n      await this.createTestProducts();\r\n      \r\n      // Créer des commandes de test\r\n      await this.createTestOrders();\r\n        // Créer des messages de test\r\n      await this.createTestMessages();\r\n\r\n      console.log(": "ecommerce.creerdesfournisseurs",
  ");\r\n\r\n      // Créer un aperçu local\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setPreview(e.target?.result as string);\r\n      };\r\n      reader.readAsDataURL(file);\r\n\r\n      // Upload vers Firebase Storage\r\n      const storageRef = ref(storage, `avatars/${user.id}-${Date.now()}`);\r\n      const snapshot = await uploadBytes(storageRef, file);\r\n      const downloadURL = await getDownloadURL(snapshot.ref);\r\n\r\n      // Mettre à jour le profil utilisateur (cast pour éviter l": "admin.creerunaperculocalco2",
  ");\r\n\r\n      // Utiliser le service final sécurisé pour recharger\r\n      const users = await finalUserCreationService.getAllUsersFromDatabase();\r\n\r\n      // Conversion sécurisée avec la fonction helper\r\n      const convertedUsers: AdminUser[] = users.map(convertFirestoreUser);\r\n\r\n      setUsers(convertedUsers);\r\n\r\n      showToast(`${users.length} utilisateurs synchronisés`, ": "admin.utiliserleservicefin",
  ");\r\n\r\n      // Utiliser le service sécurisé qui n": "common.utiliserleservicesec1",
  ");\r\n\r\n    // Rediriger si déjà connecté\r\n    if (user && !loading) {\r\n        const redirectTo = getRedirectPath(user.role);\r\n        return <Navigate to={redirectTo} replace ": "admin.redirigersidejaconne",
  ");\r\n\r\n    // Rediriger si déjà connecté\r\n    if (user && !loading) {\r\n        const redirectTo = getRedirectPath(user.role);\r\n        return <Navigate to={redirectTo} replace />;\r\n    }\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }));\r\n\r\n        // Nettoyer les messages d": "forms.redirigersidejaconne1",
  ");\r\n\r\n    // Simuler une réponse du fournisseur\r\n    setTimeout(() => {\r\n      const response: Message = {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        sender: ": "ecommerce.simulerunereponseduf1",
  ");\r\n\r\n    // Vérifier que les produits initiaux sont bien importés\r\n    if (!initialProducts || !Array.isArray(initialProducts) || initialProducts.length === 0) {\r\n      console.error(": "ecommerce.verifierquelesprodui2",
  ");\r\n\r\n    const { data: profiles } = useOptimizedQuery<CompanyProfile>(": "common.constdataprofilesuse",
  ");\r\n\r\n    try {\r\n        const products = await ProductService.getAllProducts();\r\n        console.log(`📊 ${products.length} produits récupérés depuis Firebase`);\r\n\r\n        products.forEach((product, index) => {\r\n            console.log(`${index + 1}. ${product.name} - ${product.price}€ (MOQ: ${product.moq})`);\r\n        });\r\n\r\n        console.log(": "forms.tryconstproductsawai2",
  ");\r\n\r\n    try {\r\n        for (let i = 0; i < mockProductsData.length; i++) {\r\n            const product = mockProductsData[i];\r\n            console.log(`📦 Migration du produit ${i + 1}/${mockProductsData.length}: ${product.name}`);\r\n\r\n            const productId = await ProductService.addProduct(product);\r\n            console.log(`✅ Produit migré avec l": "forms.tryforleti0imockprod1",
  ");\r\n\r\n    useEffect(() => {\r\n        // Simuler le chargement des données\r\n        setTimeout(() => {\r\n            setSupplier(mockSupplier);\r\n            setIsLoaded(true);\r\n        }, 300);\r\n    }, [supplierId]);\r\n\r\n    useEffect(() => {\r\n        ": "ecommerce.useeffectsimulerlech",
  ");\r\n\r\n    useEffect(() => {\r\n        // Simuler le chargement des données\r\n        setTimeout(() => {\r\n            setSupplier(mockSupplier);\r\n            setIsLoaded(true);\r\n        }, 300);\r\n    }, [supplierId]);\r\n\r\n    useEffect(() => {\r\n        // Animation d": "ecommerce.useeffectsimulerlech1",
  ");\r\n\r\n  // Load conversations and messages\r\n  const loadData = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Using mock data for demonstration\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      setConversations(mockConversations);\r\n      setMessages(mockMessages);    } catch (err: unknown) {\r\n      console.error(": "navigation.loadconversationsand",
  ");\r\n\r\n  // Ne pas afficher le Footer sur les routes admin car AdminLayout gère son propre Footer\r\n  if (isAdminRoute) {\r\n    return null;\r\n  }\r\n\r\n  return <Footer ": "admin.nepasafficherlefoote",
  ");\r\n\r\n  // Ne pas afficher le Footer sur les routes admin car AdminLayout gère son propre Footer\r\n  if (isAdminRoute) {\r\n    return null;\r\n  }\r\n\r\n  return <Footer />;\r\n}\r\n\r\nfunction AppRoutes() {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<HomePage />} />\r\n      <Route path=\"/products\" element={<ProductsPageB2B />} />\r\n      <Route path=\"/products-test\" element={<ProductsList />} />\r\n      <Route path=\"/product/:id\" element={<ProductDetailPageB2B />} />\r\n      <Route path=\"/product-detail/:id\" element={<ProductDetailPage />} />\r\n      <Route path=\"/supplier/:supplierId\" element={<SupplierProfilePage />} />\r\n      <Route path=\"/product-old/:id\" element={<ProductPage />} />\r\n      <Route path=\"/category/:categoryId\" element={<CategoryPage />} />\r\n\r\n      <Route path=\"/login\" element={<LoginRoute><UniversalLoginPage /></LoginRoute>} />\r\n      <Route path=\"/register\" element={<LoginRoute><UniversalRegisterPage /></LoginRoute>} />\r\n\r\n      {/* Redirection pour /auth vers /login pour éviter la confusion */}\r\n      <Route path=\"/auth\" element={<Navigate to=\"/login\" replace />} />\r\n\r\n      {/* Routes d": "auth.nepasafficherlefoote",
  ");\r\n\r\n  const category = categoryId ? categoryData[categoryId] : null;\r\n\r\n  if (!category) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Catégorie non trouvée</h1>\r\n          <p className=\"text-gray-600 mb-8\">La catégorie que vous recherchez n": "forms.constcategorycategor",
  ");\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    // Ici, vous pouvez ajouter la logique de recherche\r\n    console.log(`Recherche : ${query}`);\r\n  };\r\n\r\n  return (\r\n    <div className=": "forms.consthandlechangeere",
  ");\r\n    \r\n    // 1. Supprimer tous les produits existants\r\n    const existingProducts = await productService.getAllProducts();\r\n    console.log(`🗑️ Suppression de ${existingProducts.length} produits existants...`);\r\n    \r\n    for (const product of existingProducts) {\r\n      if (product.id) {\r\n        await productService.deleteProduct(product.id);\r\n      }\r\n    }\r\n    \r\n    // 2. Réinitialiser avec les données de démonstration\r\n    console.log(": "forms.1supprimertouslespro",
  ");\r\n    \r\n    // 2. Récupérer tous les produits\r\n    console.log(": "ecommerce.2recuperertouslespro",
  ");\r\n    \r\n    const products = await productService.getAllProducts();\r\n    let cleanedCount = 0;\r\n    \r\n    for (const product of products) {\r\n      // Vérifier les champs obligatoires\r\n      if (!product.name || !product.price || !product.brand || !product.category) {\r\n        console.log(`🗑️ Suppression du produit corrompu: ${product.id}`);\r\n        if (product.id) {\r\n          await productService.deleteProduct(product.id);\r\n          cleanedCount++;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`✅ ${cleanedCount} produits corrompus supprimés`);\r\n    return { success: true, cleanedCount };\r\n    \r\n  } catch (error) {\r\n    console.error(": "forms.constproductsawaitpr",
  ");\r\n      \r\n      // Créer les utilisateurs de test\r\n      const userResults = await this.createTestUsers();\r\n      \r\n      // Créer les données de test pour les collections\r\n      await this.createTestData();\r\n      \r\n      // Afficher les résultats\r\n      const successful = userResults.filter(r => r.success).length;\r\n      const failed = userResults.filter(r => !r.success).length;\r\n      \r\n      console.log(`✅ Initialisation terminée: ${successful} utilisateurs créés, ${failed} erreurs`);\r\n      \r\n      if (failed > 0) {\r\n        console.warn(": "admin.creerlesutilisateurs",
  ");\r\n                    this.currentUser = null;\r\n                    this.stopSessionMonitoring();\r\n                    resolve(null);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Connexion sécurisée avec validation des rôles\r\n     */\r\n    public async secureLogin(email: string, password: string): Promise<LoginResult> {\r\n        console.log(`🔐 Tentative de connexion: ${email}`);\r\n\r\n        try {\r\n            // 1. Validation des entrées\r\n            const validation = this.validateLoginInput(email, password);\r\n            if (!validation.valid) {\r\n                return { success: false, error: validation.error };\r\n            }\r\n\r\n            // 2. Authentification Firebase\r\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n            const firebaseUser = userCredential.user;\r\n\r\n            console.log(`✅ Authentification Firebase réussie: ${firebaseUser.uid}`);\r\n\r\n            // 3. Charger le profil utilisateur depuis Firestore\r\n            const user = await this.loadUserProfile(firebaseUser);\r\n            if (!user) {\r\n                await signOut(auth); ": "auth.thiscurrentusernullt",
  ");\r\n                    }\r\n                }\r\n\r\n                // Nettoyer lors du démontage\r\n                return () => {\r\n                    if (authStateUnsubscribe) {\r\n                        authStateUnsubscribe();\r\n                    }\r\n                    productionUserService.stopAuthStateListener();\r\n                    secureAuthService.cleanup();\r\n                };\r\n\r\n            } catch (error: any) {\r\n                console.error(": "admin.nettoyerlorsdudemont1",
  ");\r\n                } catch (error: any) {\r\n                    return {\r\n                        success: false,\r\n                        message: `Erreur de connexion: ${error.message}`\r\n                    };\r\n                }\r\n            }\r\n\r\n            const currentUser = auth.currentUser;\r\n            if (!currentUser || currentUser.email !== this.ADMIN_EMAIL) {\r\n                return {\r\n                    success: false,\r\n                    message: ": "auth.catcherroranyreturns",
  ");\r\n              setIsNotificationCenterOpen(false);\r\n            }}\r\n            onUnreadCountChange={() => refreshNotifications()}\r\n          ": "common.setisnotificationcen",
  ");\r\n            await new Promise(resolve => setTimeout(resolve, 3000));\r\n\r\n            // Étape 2: Créer de nouveaux utilisateurs\r\n            setResults(prev => prev + ": "admin.awaitnewpromiseresol2",
  ");\r\n            const newAccounts = await createNewUsers();\r\n\r\n            // Résumé final\r\n            setResults(prev => prev + `\\n📊 === RÉSUMÉ FINAL ===\\n`);\r\n            setResults(prev => prev + `🗑️ Utilisateurs supprimés: ${deleteResult.deletedCount}\\n`);\r\n            setResults(prev => prev + `✅ Utilisateurs créés: ${newAccounts.length}\\n`);\r\n            setResults(prev => prev + `\\n🎉 Réinitialisation terminée avec succès !\\n`);\r\n\r\n        } catch (error: any) {\r\n            setResults(prev => prev + `\\n💥 Erreur: ${error.message}\\n`);\r\n        } finally {\r\n            setIsResetting(false);\r\n        }\r\n    };\r\n\r\n    const handleCreateEssentials = async () => {\r\n        setIsCreating(true);\r\n        setResults(": "forms.constnewaccountsawai2",
  ");\r\n            const snapshot = await getDocs(usersCollection);\r\n\r\n            if (snapshot.size > 0) {\r\n                console.log(`ℹ️ ${snapshot.size} utilisateurs existent déjà, pas d": "admin.constsnapshotawaitge2",
  ");\r\n            const snapshot = await getDocs(usersRef);\r\n\r\n            console.log(`📊 ${snapshot.size} utilisateurs trouvés dans Firestore`);\r\n\r\n            // 2. Supprimer tous les documents Firestore\r\n            const deletePromises = snapshot.docs.map(async (userDoc) => {\r\n                try {\r\n                    await deleteDoc(userDoc.ref);\r\n                    deletedCount++;\r\n                    console.log(`✅ Utilisateur Firestore supprimé: ${userDoc.id}`);\r\n                } catch (error: any) {\r\n                    const errorMsg = `Erreur suppression Firestore ${userDoc.id}: ${error.message}`;\r\n                    errors.push(errorMsg);\r\n                    console.error(": "forms.constsnapshotawaitge2",
  ");\r\n            const usersSnapshot = await getDocs(usersCollection);\r\n\r\n            setResults(prev => prev + `📊 ${usersSnapshot.size} utilisateur(s) trouvé(s)\\n`);\r\n\r\n            if (usersSnapshot.size === 0) {\r\n                setResults(prev => prev + ": "admin.constuserssnapshotaw1",
  ");\r\n            return;\r\n        }\r\n\r\n        setIsRunning(true);\r\n        try {\r\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n            setResults(`✅ Connexion réussie: ${userCredential.user.email}`);\r\n\r\n            ": "auth.returnsetisrunningtr",
  ");\r\n            return;\r\n        }\r\n\r\n        setIsRunning(true);\r\n        try {\r\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n            setResults(`✅ Connexion réussie: ${userCredential.user.email}`);\r\n\r\n            // Attendre un peu puis relancer le diagnostic\r\n            setTimeout(async () => {\r\n                await runDiagnostic();\r\n            }, 1000);\r\n        } catch (error: any) {\r\n            setResults(`❌ Erreur de connexion: ${error.message}`);\r\n        } finally {\r\n            setIsRunning(false);\r\n        }\r\n    };\r\n\r\n    const quickFix = async () => {\r\n        setIsRunning(true);\r\n        try {\r\n            const diagnostic = new AdminRedirectionDiagnostic();\r\n            await diagnostic.runFullDiagnostic();\r\n            setResults(": "auth.returnsetisrunningtr2",
  ");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            await signInWithEmailAndPassword(auth, adminEmail, adminPassword);\r\n            setResult(`✅ Connexion admin réussie: ${adminEmail}`);\r\n        } catch (error: any) {\r\n            console.error(": "auth.returnsetloadingtrue2",
  ");\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    // Mettre à jour une carte\r\n    const updateCard = async (cardId: string, updates: Partial<SavedBusinessCard>) => {\r\n        try {\r\n            const updatedCard = await businessCardService.updateCard(cardId, updates);\r\n            if (updatedCard) {\r\n                setCards(prev => prev.map(card =>\r\n                    card.id === cardId ? updatedCard : card\r\n                ));\r\n            }\r\n            return updatedCard;\r\n        } catch (err) {\r\n            setError(": "forms.throwerrmettreajouru1",
  ");\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    // Supprimer une carte\r\n    const deleteCard = async (cardId: string) => {\r\n        try {\r\n            const success = await businessCardService.deleteCard(cardId);\r\n            if (success) {\r\n                setCards(prev => prev.filter(card => card.id !== cardId));\r\n            }\r\n            return success;\r\n        } catch (err) {\r\n            setError(": "forms.throwerrsupprimerune",
  ");\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                user: userProfile,\r\n                firebaseUid: firebaseUser.uid\r\n            };\r\n\r\n        } catch (error: any) {\r\n            console.error(`❌ Erreur création ${userData.email}:`, error);\r\n\r\n            let errorMessage = ": "auth.returnsuccesstrueuse2",
  ");\r\n            } else {\r\n                // Créer l": "common.elsecreerl",
  ");\r\n            } else {\r\n                // Mettre à jour la dernière connexion\r\n                await updateDoc(userDocRef, {\r\n                    lastLogin: currentUser.metadata.lastSignInTime || new Date().toISOString(),\r\n                    updatedAt: new Date().toISOString(),\r\n                    updated_at: new Date().toISOString()\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(": "auth.elsemettreajourlader2",
  ");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchReferrals();\r\n    }, [user]);\r\n\r\n    return {\r\n        referrals,\r\n        stats,\r\n        loading,\r\n        error\r\n    };\r\n};\r\n\r\n// Hook pour la recherche d": "admin.finallysetloadingfal",
  ");\r\n        SAFE_TEST_USERS.forEach(user => {\r\n            console.log(`${user.role.toUpperCase()}: ${user.email} / ${user.password}`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Réinitialise le statut d": "auth.safetestusersforeach1",
  ");\r\n        a.href = url;\r\n        a.download = `chine-ton-usine-credentials-${Date.now()}.txt`;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=": "forms.ahrefurladownloadchi",
  ");\r\n        a.href = url;\r\n        a.download = `chine-ton-usine-credentials-${Date.now()}.txt`;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\r\n                <div className=\"text-center\">\r\n                    <RefreshCw className=\"h-8 w-8 animate-spin text-blue-600 mx-auto mb-4\" />\r\n                    <p className=\"text-gray-600\">Chargement des données...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gray-50 py-8\">\r\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n                {/* En-tête */}\r\n                <div className=\"mb-8\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\r\n                                <Shield className=\"h-8 w-8 text-blue-600 mr-3\" />\r\n                                Gestion des Utilisateurs - Production\r\n                            </h1>\r\n                            <p className=\"mt-2 text-gray-600\">\r\n                                Interface sécurisée pour la gestion des comptes utilisateurs\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"flex space-x-3\">\r\n                            <button\r\n                                onClick={downloadCredentials}\r\n                                className=\"flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\r\n                            >\r\n                                <Download className=\"h-4 w-4 mr-2\" />\r\n                                Télécharger les identifiants\r\n                            </button>\r\n                            <button\r\n                                onClick={loadSummary}\r\n                                disabled={loading}\r\n                                className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\r\n                            >\r\n                                <RefreshCw className={`h-4 w-4 mr-2 ${loading ? ": "forms.ahrefurladownloadchi1",
  ");\r\n        console.log(`Vérification de l": "common.consolelogverificati1",
  ");\r\n        console.log(`📊 ${mockProductsData.length} produits ont été ajoutés à Firebase`);\r\n\r\n    } catch (error) {\r\n        console.error(": "ecommerce.consolelogmockproduc",
  ");\r\n        const productById = await productService.getProductById(firstProduct.id);\r\n        console.log(`✅ Produit récupéré:`, productById?.name);\r\n      }\r\n    }\r\n    \r\n    console.log(": "forms.constproductbyidawai1",
  ");\r\n        return;\r\n      }\r\n\r\n      // Créer l": "common.returncreerl2",
  ");\r\n        return;\r\n      }\r\n\r\n      if (validFiles.length !== fileArray.length) {\r\n        alert(`${fileArray.length - validFiles.length} fichier(s) ignoré(s) - type non supporté`);\r\n      }\r\n\r\n      let uploadedFiles: MediaFile[] = [];\r\n\r\n      ": "common.returnifvalidfilesle",
  ");\r\n        setCreatedAccounts([]);\r\n\r\n        try {\r\n            // Étape 1: Supprimer tous les utilisateurs\r\n            setResults(prev => prev + ": "forms.setcreatedaccountstr",
  ");\r\n        setIsCreating(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\r\n            <div className=\"flex items-center gap-3 mb-6\">\r\n                <RefreshCw className=\"h-6 w-6 text-blue-500\" />\r\n                <h2 className=\"text-2xl font-bold text-gray-900\">Réinitialisation des Utilisateurs</h2>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n                <Button\r\n                    onClick={handleFullReset}\r\n                    disabled={isResetting || isDeleting || isCreating}\r\n                    className=\"flex items-center gap-2 bg-red-500 hover:bg-red-600 text-white\"\r\n                >\r\n                    <RefreshCw className={`h-4 w-4 ${isResetting ? ": "forms.setiscreatingfalsere",
  ");\r\n        }\r\n      }      // Log des données influenceur si nécessaire\r\n      if (selectedRole === ": "common.logdesdonneesinfluen1",
  ");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Purger TOUS les utilisateurs existants (Firebase Auth + Firestore)\r\n     * ⚠️ OPÉRATION IRRÉVERSIBLE - UTILISER AVEC PRÉCAUTION\r\n     *": "admin.purgertouslesutilisa2",
  ");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Vérifier si un email existe déjà\r\n     *": "auth.verifiersiunemailexi",
  ");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Vérifier si un email existe déjà\r\n     */\r\n    private async checkIfEmailExists(email: string): Promise<boolean> {\r\n        try {\r\n            const { collection, getDocs, query, where } = await import(": "auth.verifiersiunemailexi1",
  ");\r\n        }\r\n    }\r\n\r\n    // Mettre à jour un produit\r\n    static async updateProduct(productId: string, updates: Partial<Product>): Promise<void> {\r\n        try {\r\n            const docRef = doc(db, PRODUCTS_COLLECTION, productId);\r\n            await updateDoc(docRef, {\r\n                ...updates,\r\n                updatedAt: new Date(),\r\n            });\r\n        } catch (error) {\r\n            console.error(": "ecommerce.mettreajourunproduit1",
  ");\r\n        }\r\n    }\r\n\r\n    // Rechercher des produits\r\n    static async searchProducts(searchTerm: string): Promise<ProductListItem[]> {\r\n        try {\r\n            // Recherche simple par nom (Firebase ne supporte pas la recherche full-text native)\r\n            const q = query(\r\n                collection(db, PRODUCTS_COLLECTION),\r\n                where(": "forms.rechercherdesproduit",
  ");\r\n        }\r\n    }\r\n\r\n    // Récupérer les produits par catégorie\r\n    static async getProductsByCategory(category: string): Promise<ProductListItem[]> {\r\n        try {\r\n            const q = query(\r\n                collection(db, PRODUCTS_COLLECTION),\r\n                where(": "ecommerce.recupererlesproduits1",
  ");\r\n        }\r\n    }\r\n\r\n    // Récupérer les produits similaires\r\n    static async getSimilarProducts(productId: string, category: string, limitCount: number = 3): Promise<ProductListItem[]> {\r\n        try {\r\n            const q = query(\r\n                collection(db, PRODUCTS_COLLECTION),\r\n                where(": "ecommerce.recupererlesproduits3",
  ");\r\n        }\r\n    }\r\n\r\n    // Supprimer définitivement un produit\r\n    static async permanentDeleteProduct(productId: string): Promise<void> {\r\n        try {\r\n            const docRef = doc(db, PRODUCTS_COLLECTION, productId);\r\n            await deleteDoc(docRef);\r\n        } catch (error) {\r\n            console.error(": "forms.supprimerdefinitivem1",
  ");\r\n        }\r\n    }\r\n\r\n    // Supprimer un produit (soft delete)\r\n    static async deleteProduct(productId: string): Promise<void> {\r\n        try {\r\n            const docRef = doc(db, PRODUCTS_COLLECTION, productId);\r\n            await updateDoc(docRef, {\r\n                active: false,\r\n                updatedAt: new Date(),\r\n            });\r\n        } catch (error) {\r\n            console.error(": "forms.supprimerunproduitso",
  ");\r\n        } catch (error: any) {\r\n            setResult(`❌ Erreur déconnexion: ${error.message}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const createTestUser = async () => {\r\n        if (!auth.currentUser) {\r\n            setResult(": "auth.catcherroranysetresu",
  ");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleForgotPassword = () => {\r\n        alert(`Pour récupérer votre mot de passe, contactez l": "auth.finallysetisloadingf3",
  ");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [\r\n        formData,\r\n        prospect.id,\r\n        profile,\r\n        companyMutation,\r\n        profileMutation,\r\n        optimisticUpdateCompany,\r\n        onClose\r\n    ]);\r\n\r\n    ": "common.finallysetloadingfal",
  ");\r\n      // Fallback sur les données de test si Firebase échoue\r\n      setUsers(mockUsers);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  ": "navigation.fallbacksurlesdonnee",
  ");\r\n      // Fallback sur les données de test si Firebase échoue\r\n      setUsers(mockUsers);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Synchronisation manuelle des utilisateurs\r\n  const handleSyncUsers = async () => {\r\n    setSyncLoading(true);\r\n    try {\r\n      console.log(": "navigation.fallbacksurlesdonnee1",
  ");\r\n      link.href = `data:application/pdf;base64,JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PAovVGl0bGUgKCR7ZG9jdW1lbnQubmFtZX0pCi9Qcm9kdWNlciAoKQo+PgplbmRvYmoKMiAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMyAwIFIKPj4KZW5kb2JqCjMgMCBvYmoKPDwKL1R5cGUgL1BhZ2VzCi9LaWRzIFs0IDAgUl0KL0NvdW50IDEKL01lZGlhQm94IFswIDAgNjEyIDc5Ml0KPj4KZW5kb2JqCjQgMCBvYmoKPDwKL1R5cGUgL1BhZ2UKL1BhcmVudCAzIDAgUgovUmVzb3VyY2VzIDw8Ci9Gb250IDw8Ci9GMSAKPDwKL1R5cGUgL0ZvbnQKL1N1YnR5cGUgL1R5cGUxCi9CYXNlRm9udCAvSGVsdmV0aWNhCj4+Cj4+Cj4+Ci9Db250ZW50cyA1IDAgUgo+PgplbmRvYmoKNSAwIG9iago8PAovTGVuZ3RoIDQ0Cj4+CnN0cmVhbQpCVAovRjEgMTIgVGYKNzIgNzIwIFRkCihEb2N1bWVudCBkZSBkZW1vbnN0cmF0aW9uKSBUagpFVAplbmRzdHJlYW0KZW5kb2JqCnhyZWYKMCA2CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAwOSAwMDAwMCBuIAowMDAwMDAwMDU4IDAwMDAwIG4gCjAwMDAwMDAxMDMgMDAwMDAgbiAKMDAwMDAwMDE3MyAwMDAwMCBuIAowMDAwMDAwMzAxIDAwMDAwIG4gCnRyYWlsZXIKPDwKL1NpemUgNgovUm9vdCAyIDAgUgo+PgpzdGFydHhyZWYKMzk0CiUlRU9G`;\r\n      link.download = document.name;\r\n      window.document.body.appendChild(link);\r\n      link.click();\r\n      window.document.body.removeChild(link);\r\n    }\r\n\r\n    // Incrémenter le compteur de téléchargements\r\n    setDocuments(prev => prev.map(doc => \r\n      doc.id === document.id \r\n        ? { ...doc, downloadCount: doc.downloadCount + 1 }\r\n        : doc\r\n    ));\r\n  };\r\n  const handleDeleteDocument = async (document: Document) => {\r\n    if (confirm(t(": "forms.linkhrefdataapplicat1",
  ");\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  const handleImageSelect = async (files: FileList) => {\r\n    const fileArray = Array.from(files);\r\n    \r\n    // Vérifier le nombre maximum d": "forms.readerreadasdataurlf1",
  ");\r\n      return [];\r\n    }\r\n\r\n    this.saveProducts(initialProducts);\r\n    return initialProducts;\r\n  }\r\n  /**\r\n   * Sauvegarder la liste complète des produits\r\n   *": "forms.returnthissaveproduc1",
  ");\r\n      return [];\r\n    }\r\n\r\n    this.saveProducts(initialProducts);\r\n    return initialProducts;\r\n  }\r\n  /**\r\n   * Sauvegarder la liste complète des produits\r\n   */\r\n  saveProducts(products: Product[]): void {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(products));\r\n      // Notifier tous les composants d": "forms.returnthissaveproduc2",
  ");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SupplierLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Bouton retour */}\r\n        <BackButton to=\"/supplier/dashboard\" label=\"Retour au tableau de bord\" variant=\"ghost\" />\r\n\r\n        {/* En-tête */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Documents</h1>\r\n            <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n              Gérez vos documents et fichiers\r\n            </p>\r\n          </div>          <Button \r\n            className=\"mt-4 sm:mt-0\"\r\n            onClick={() => setIsUploadModalOpen(true)}\r\n          >\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            {t(": "navigation.returnsupplierlayout",
  ");\r\n    console.log(`✅ ${searchResults.length} produits trouvés pour ": "ecommerce.consolelogsearchresu1",
  ");\r\n    console.log(`✅ ${searchResults.length} produits trouvés pour \"Samsung\"`);\r\n    \r\n    // 5. Tester la récupération par ID\r\n    if (products.length > 0) {\r\n      const firstProduct = products[0];\r\n      if (firstProduct.id) {\r\n        console.log(": "ecommerce.consolelogsearchresu2",
  ");\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    // Simuler le chargement des cartes sauvegardées\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setTimeout(() => setIsLoaded(true), 300);\r\n        }\r\n    }, [loading]);\r\n\r\n    // Filtrer les cartes par recherche\r\n    const filteredCards = cards.filter(card =>\r\n        card.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        card.data.companyName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        card.data.contactPerson.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n\r\n    // Créer une nouvelle carte\r\n    const handleCreateNew = () => {\r\n        setEditingCard(null);\r\n        setIsEditorOpen(true);\r\n    };\r\n\r\n    ": "forms.constisloadedsetislo",
  ");\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    // Simuler le chargement des cartes sauvegardées\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setTimeout(() => setIsLoaded(true), 300);\r\n        }\r\n    }, [loading]);\r\n\r\n    // Filtrer les cartes par recherche\r\n    const filteredCards = cards.filter(card =>\r\n        card.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        card.data.companyName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        card.data.contactPerson.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n\r\n    // Créer une nouvelle carte\r\n    const handleCreateNew = () => {\r\n        setEditingCard(null);\r\n        setIsEditorOpen(true);\r\n    };\r\n\r\n    // Éditer une carte existante\r\n    const handleEdit = (card: SavedBusinessCard) => {\r\n        setEditingCard(card);\r\n        setIsEditorOpen(true);\r\n    };\r\n\r\n    // Sauvegarder une carte\r\n    const handleSave = async (data: BusinessCardData) => {\r\n        try {\r\n            if (editingCard) {\r\n                // Mise à jour d": "forms.constisloadedsetislo2",
  ");\r\n    const [previewMode, setPreviewMode] = useState(false);\r\n    const [isSaving, setIsSaving] = useState(false);\r\n\r\n    // Mettre à jour les données de la carte\r\n    const updateCardData = (updates: Partial<BusinessCardData>) => {\r\n        setCardData(prev => ({ ...prev, ...updates }));\r\n    };\r\n\r\n    // Sauvegarder la carte\r\n    const handleSave = async () => {\r\n        setIsSaving(true);\r\n        try {\r\n            if (onSave) {\r\n                await onSave(cardData);\r\n            }\r\n            // Simuler une sauvegarde\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n        } finally {\r\n            setIsSaving(false);\r\n        }\r\n    };\r\n\r\n    // Télécharger comme image (simulé)\r\n    const handleDownload = () => {\r\n        ": "forms.constpreviewmodesetp",
  ");\r\n    const [previewMode, setPreviewMode] = useState(false);\r\n    const [isSaving, setIsSaving] = useState(false);\r\n\r\n    // Mettre à jour les données de la carte\r\n    const updateCardData = (updates: Partial<BusinessCardData>) => {\r\n        setCardData(prev => ({ ...prev, ...updates }));\r\n    };\r\n\r\n    // Sauvegarder la carte\r\n    const handleSave = async () => {\r\n        setIsSaving(true);\r\n        try {\r\n            if (onSave) {\r\n                await onSave(cardData);\r\n            }\r\n            // Simuler une sauvegarde\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n        } finally {\r\n            setIsSaving(false);\r\n        }\r\n    };\r\n\r\n    // Télécharger comme image (simulé)\r\n    const handleDownload = () => {\r\n        // En production, ici on convertirait le composant en image\r\n        alert(": "forms.constpreviewmodesetp1",
  ");\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    // Requête optimisée avec cache intelligent\r\n    const { data: allCompanies, loading, isStale } = useOptimizedQuery<Company>(": "common.constshowfilterssets1",
  ");\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 300);\r\n\r\n    // Filtrage des items basé sur la recherche\r\n    const filteredItems = useMemo(() => {\r\n        if (!debouncedSearchTerm || searchFields.length === 0) {\r\n            return items;\r\n        }\r\n\r\n        return items.filter(item =>\r\n            searchFields.some(field => {\r\n                const fieldValue = item[field];\r\n                return fieldValue &&\r\n                    String(fieldValue).toLowerCase().includes(debouncedSearchTerm.toLowerCase());\r\n            })\r\n        );\r\n    }, [items, debouncedSearchTerm, searchFields]);\r\n\r\n    ": "forms.constshowfilterssets",
  ");\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 300);\r\n\r\n    // Filtrage des items basé sur la recherche\r\n    const filteredItems = useMemo(() => {\r\n        if (!debouncedSearchTerm || searchFields.length === 0) {\r\n            return items;\r\n        }\r\n\r\n        return items.filter(item =>\r\n            searchFields.some(field => {\r\n                const fieldValue = item[field];\r\n                return fieldValue &&\r\n                    String(fieldValue).toLowerCase().includes(debouncedSearchTerm.toLowerCase());\r\n            })\r\n        );\r\n    }, [items, debouncedSearchTerm, searchFields]);\r\n\r\n    // Handler pour la recherche\r\n    const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setSearchTerm(value);\r\n        if (onSearch) {\r\n            onSearch(value);\r\n        }\r\n    }, [onSearch]);\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=": "navigation.constshowfilterssets",
  ");\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 300);\r\n\r\n    // Filtrage des items basé sur la recherche\r\n    const filteredItems = useMemo(() => {\r\n        if (!debouncedSearchTerm || searchFields.length === 0) {\r\n            return items;\r\n        }\r\n\r\n        return items.filter(item =>\r\n            searchFields.some(field => {\r\n                const fieldValue = item[field];\r\n                return fieldValue &&\r\n                    String(fieldValue).toLowerCase().includes(debouncedSearchTerm.toLowerCase());\r\n            })\r\n        );\r\n    }, [items, debouncedSearchTerm, searchFields]);\r\n\r\n    // Handler pour la recherche\r\n    const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setSearchTerm(value);\r\n        if (onSearch) {\r\n            onSearch(value);\r\n        }\r\n    }, [onSearch]);\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"space-y-4\">\r\n                <div className=\"flex gap-4 mb-4\">\r\n                    <div className=\"flex-1 h-10 bg-gray-200 rounded animate-pulse\" />\r\n                    <div className=\"w-24 h-10 bg-gray-200 rounded animate-pulse\" />\r\n                </div>\r\n                <ListSkeleton height={height} itemHeight={itemHeight} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-full\">\r\n            {/* Barre de recherche et filtres */}\r\n            <div className=\"mb-4 space-y-4\">\r\n                <div className=\"flex gap-4\">\r\n                    {/* Champ de recherche */}\r\n                    {searchFields.length > 0 && (\r\n                        <div className=\"relative flex-1\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Rechercher...\"\r\n                                value={searchTerm}\r\n                                onChange={handleSearchChange}\r\n                                className=\"pl-10 pr-4 py-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                            />\r\n                            <Search size={18} className=\"absolute left-3 top-2.5 text-gray-400\" />\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Bouton de filtres */}\r\n                    {filterComponent && (\r\n                        <button\r\n                            onClick={() => setShowFilters(!showFilters)}\r\n                            className=\"flex items-center px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                        >\r\n                            <Filter size={16} className=\"mr-2\" />\r\n                            Filtres\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                {/* Panneau de filtres */}\r\n                {showFilters && filterComponent && (\r\n                    <div className=\"p-4 border border-gray-200 rounded-md bg-gray-50\">\r\n                        {filterComponent}\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Indicateur de résultats */}\r\n            <div className=\"mb-4 text-sm text-gray-600\">\r\n                {filteredItems.length} résultat{filteredItems.length > 1 ? ": "navigation.constshowfilterssets1",
  ");\r\n    const [showUnreadOnly, setShowUnreadOnly] = useState(false);\r\n\r\n    // Données fictives pour démonstration\r\n    const mockAlerts: Alert[] = [\r\n        {\r\n            id: ": "common.constshowunreadonlys1",
  ");\r\n    const categories = await productService.getCategories();\r\n    const brands = await productService.getBrands();\r\n    const features = await productService.getFeatures();\r\n    \r\n    console.log(`✅ ${categories.length} catégories trouvées:`, categories);\r\n    console.log(`✅ ${brands.length} marques trouvées:`, brands);\r\n    console.log(`✅ ${features.length} fonctionnalités trouvées:`, features);\r\n    \r\n    ": "ecommerce.constcategoriesawait",
  ");\r\n    const categories = await productService.getCategories();\r\n    const brands = await productService.getBrands();\r\n    const features = await productService.getFeatures();\r\n    \r\n    console.log(`✅ ${categories.length} catégories trouvées:`, categories);\r\n    console.log(`✅ ${brands.length} marques trouvées:`, brands);\r\n    console.log(`✅ ${features.length} fonctionnalités trouvées:`, features);\r\n    \r\n    // 4. Tester la recherche\r\n    console.log(": "ecommerce.constcategoriesawait2",
  ");\r\n    const products = await productService.getAllProducts();\r\n    console.log(`✅ ${products.length} produits récupérés`);\r\n    \r\n    ": "ecommerce.constproductsawaitpr",
  ");\r\n    const profileMutation = useOptimizedMutation(": "common.constprofilemutation",
  ");\r\n    link.href = `data:application/pdf;base64,JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PAovVGl0bGUgKCR7ZG9jdW1lbnQubmFtZX0pCi9Qcm9kdWNlciAoKQo+PgplbmRvYmoKMiAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMyAwIFIKPj4KZW5kb2JqCjMgMCBvYmoKPDwKL1R5cGUgL1BhZ2VzCi9LaWRzIFs0IDAgUl0KL0NvdW50IDEKL01lZGlhQm94IFswIDAgNjEyIDc5Ml0KPj4KZW5kb2JqCjQgMCBvYmoKPDwKL1R5cGUgL1BhZ2UKL1BhcmVudCAzIDAgUgovUmVzb3VyY2VzIDw8Ci9Gb250IDw8Ci9GMSAKPDwKL1R5cGUgL0ZvbnQKL1N1YnR5cGUgL1R5cGUxCi9CYXNlRm9udCAvSGVsdmV0aWNhCj4+Cj4+Cj4+Ci9Db250ZW50cyA1IDAgUgo+PgplbmRvYmoKNSAwIG9iago8PAovTGVuZ3RoIDQ0Cj4+CnN0cmVhbQpCVAovRjEgMTIgVGYKNzIgNzIwIFRkCihEb2N1bWVudCBkZSBkZW1vbnN0cmF0aW9uKSBUagpFVAplbmRzdHJlYW0KZW5kb2JqCnhyZWYKMCA2CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAwOSAwMDAwMCBuIAowMDAwMDAwMDU4IDAwMDAwIG4gCjAwMDAwMDAxMDMgMDAwMDAgbiAKMDAwMDAwMDE3MyAwMDAwMCBuIAowMDAwMDAwMzAxIDAwMDAwIG4gCnRyYWlsZXIKPDwKL1NpemUgNgovUm9vdCAyIDAgUgo+PgpzdGFydHhyZWYKMzk0CiUlRU9G`;\r\n    link.download = document.name;\r\n    window.document.body.appendChild(link);\r\n    link.click();\r\n    window.document.body.removeChild(link);\r\n\r\n    // Incrémenter le compteur de téléchargements\r\n    setDocuments(prev => prev.map(doc => \r\n      doc.id === document.id \r\n        ? { ...doc, downloadCount: doc.downloadCount + 1 }\r\n        : doc\r\n    ));\r\n  };\r\n  const handleDeleteDocument = (documentId: string) => {\r\n    if (confirm(t(": "forms.linkhrefdataapplicat3",
  ");\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Validation des données d": "common.setisloadingtruetryv3",
  ");\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Validation des données de connexion\r\n      const validationResult = UniversalAuthService.validateLoginData({ email, password });\r\n      if (!validationResult.isValid) {\r\n        throw new Error(validationResult.error || t(": "auth.setisloadingtruetryv2",
  ");\r\n    setIsLoading(true);\r\n    try {\r\n      // Connexion universelle pour Google aussi\r\n      const userRole = isAdminEmail(": "auth.setisloadingtruetryc",
  ");\r\n    this.saveProducts(initialProducts);\r\n  }\r\n  deleteProduct(productId: string): void {\r\n    const currentProducts = this.getAllProducts();\r\n    const updatedProducts = currentProducts.filter(p => p.id !== productId);\r\n    this.saveProducts(updatedProducts);\r\n  }\r\n\r\n  /**\r\n   * Obtenir les produits d": "forms.thissaveproductsinit",
  ");\r\n    }\r\n    \r\n    // Validation spécifique selon le réseau\r\n    const domain = socialNetworkData[network].placeholder.split(": "common.validationspecifique1",
  ");\r\n    }\r\n  }, [quantity, availableCapacity]);\r\n  const handleSliderChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = parseInt(e.target.value);\r\n    setQuantity(value);\r\n\r\n    // Animation de la quantité\r\n    setQuantityAnimating(true);\r\n    setTimeout(() => setQuantityAnimating(false), 200);\r\n\r\n    ": "common.quantityavailablecap",
  ");\r\n    }\r\n  }, [quantity, availableCapacity]);\r\n  const handleSliderChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = parseInt(e.target.value);\r\n    setQuantity(value);\r\n\r\n    // Animation de la quantité\r\n    setQuantityAnimating(true);\r\n    setTimeout(() => setQuantityAnimating(false), 200);\r\n\r\n    // Animation du prix\r\n    setPriceAnimating(true);\r\n    setTimeout(() => setPriceAnimating(false), 300);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (quantity <= 0 || quantity > availableCapacity) {\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      // Simulation d": "ecommerce.quantityavailablecap",
  ");\r\n    }\r\n  };\r\n\r\n  const handleSaveLinks = (links: SocialMediaLink[]) => {\r\n    setSocialMediaLinksList(links);\r\n    setIsModalOpen(false);\r\n    \r\n    // Convertir en format string pour la compatibilité avec le backend actuel\r\n    const linksString = links\r\n      .filter(link => link.url.trim())\r\n      .map(link => `${link.network}: ${link.url}`)\r\n      .join(": "navigation.consthandlesavelinks1",
  ");\r\n    }\r\n  };\r\n\r\n  const handleSaveProfile = async () => {\r\n    try {\r\n      await updateUser(editedUser);\r\n      setIsEditing(false);\r\n      showNotification(": "forms.consthandlesaveprofi",
  ");\r\n    } finally {\r\n      setSyncLoading(false);\r\n    }\r\n  };\r\n  // Create test users handler - VERSION SÉCURISÉE (Firestore seulement)\r\n  const handleCreateTestUsers = async () => {\r\n    setLoading(true);\r\n    try {\r\n      console.log(": "admin.finallysetsyncloadin1",
  ");\r\n    };\r\n\r\n    // Fermer avec la touche Échap\r\n    React.useEffect(() => {\r\n        const handleEscape = (e: KeyboardEvent) => {\r\n            if (e.key === ": "common.fermeraveclatoucheec1",
  ");\r\n    };\r\n\r\n    // Réinitialiser\r\n    const handleReset = () => {\r\n        setCardData(defaultBusinessCardData);\r\n    };\r\n\r\n    const colorPresets = [\r\n        { name: ": "forms.reinitialiserconstha",
  ");\r\n    };\r\n\r\n    // Vérifier si le produit est déjà dans le devis\r\n    const isProductInQuote = getItemQuantity(product.id!) > 0;\r\n\r\n    return (\r\n        <div className=": "forms.verifiersileproduite",
  ");\r\n    };\r\n\r\n    // Vérifier si le produit est déjà dans le devis\r\n    const isProductInQuote = getItemQuantity(product.id!) > 0;\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n            {/* Navigation de retour */}\r\n            <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\r\n                <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\r\n                    <Link\r\n                        to=\"/products\"\r\n                        className=\"inline-flex items-center gap-2 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\r\n                    >\r\n                        <ArrowLeft size={20} />\r\n                        Retour aux produits\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\r\n                    {/* Galerie d": "navigation.verifiersileproduite",
  ");\r\n    };\r\n\r\n    return {\r\n        user,\r\n        isLoading,\r\n        isAuthenticated: !!user,\r\n        hasPermission,\r\n        isSupplierOwner,\r\n        canEditSupplierProfile,\r\n        canManageBusinessCards\r\n    };\r\n};\r\n\r\n// Hook pour les données du fournisseur actuel\r\nexport const useSupplierData = (supplierId: string) => {\r\n    const { user, canEditSupplierProfile, canManageBusinessCards } = useAuth();\r\n\r\n    const isOwner = user?.type === ": "forms.returnuserisloadingi2",
  ");\r\n  // Données des catégories de produits\r\n  const brandCategories = [\r\n    { name: ": "forms.donneesdescategories5",
  ");\r\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r\n  const [createLoading, setCreateLoading] = useState(false);\r\n  const [syncLoading, setSyncLoading] = useState(false);\r\n  const [userStats, setUserStats] = useState({\r\n    total: 0,\r\n    byRole: { admin: 0, supplier: 0, customer: 0, sourcer: 0 },\r\n    active: 0,\r\n    inactive: 0\r\n  });\r\n\r\n  const { showToast } = useToast();\r\n  // 🚨 DIAGNOSTIC: Désactivation temporaire du hook useUserSync\r\n  // const { syncUsers, getUserStats } = useUserSync(true); // Activer la synchronisation automatique\r\n  const { getUserStats } = useUserSync(false); // DÉSACTIVÉ pour test - plus de syncUsers\r\n\r\n  // Fonction helper pour convertir les dates Firestore en sécurité\r\n  const safeDate = (dateValue: any): Date => {\r\n    if (!dateValue) return new Date();\r\n\r\n    try {\r\n      if (dateValue instanceof Date) return dateValue;\r\n      if (typeof dateValue === ": "admin.constiscreatemodalop2",
  ");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Rôle par défaut pour la connexion universelle\r\n  const DEFAULT_ROLE = ": "auth.constisloadingsetisl2",
  ");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n\r\n  // Détecter automatiquement le mode basé sur l": "auth.constisloadingsetisl4",
  ");\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [errors, setErrors] = useState<FormErrors>({});\r\n  // Initialiser le formulaire avec les données du produit à éditer\r\n  useEffect(() => {\r\n    if (product) {      // Extraire la description française ou utiliser la première disponible\r\n      let description = ": "ecommerce.constissubmittingset2",
  ");\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [priceAnimating, setPriceAnimating] = useState(false);\r\n  const [quantityAnimating, setQuantityAnimating] = useState(false);\r\n\r\n  // Calculs en temps réel\r\n  const availableCapacity = container.totalCapacity - container.usedCapacity;\r\n  const pricePerCBM = 150; // Prix par CBM en euros\r\n  const estimatedPrice = quantity * pricePerCBM;\r\n  const reservationDeadline = new Date();\r\n  reservationDeadline.setDate(reservationDeadline.getDate() + 7); // 7 jours pour réserver\r\n\r\n  ": "ecommerce.constissubmittingset3",
  ");\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [priceAnimating, setPriceAnimating] = useState(false);\r\n  const [quantityAnimating, setQuantityAnimating] = useState(false);\r\n\r\n  // Calculs en temps réel\r\n  const availableCapacity = container.totalCapacity - container.usedCapacity;\r\n  const pricePerCBM = 150; // Prix par CBM en euros\r\n  const estimatedPrice = quantity * pricePerCBM;\r\n  const reservationDeadline = new Date();\r\n  reservationDeadline.setDate(reservationDeadline.getDate() + 7); // 7 jours pour réserver\r\n\r\n  // Pourcentages pour la barre de progression\r\n  const usedPercentage = (container.usedCapacity / container.totalCapacity) * 100;\r\n  const selectedPercentage = (quantity / container.totalCapacity) * 100;\r\n  const availablePercentage = 100 - usedPercentage - selectedPercentage;\r\n\r\n  // Animation d": "ecommerce.constissubmittingset4",
  ");\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState<UploadProgress[]>([]);\r\n  const [dragOver, setDragOver] = useState(false);\r\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\r\n\r\n  // Charger les médias existants\r\n  useEffect(() => {\r\n    loadMedia();\r\n  }, [productId]);\r\n\r\n  const loadMedia = async () => {\r\n    try {\r\n      const productMedia = await productService.getProductMedia(productId);\r\n      setMedia(productMedia);\r\n      onMediaUpdate?.(productMedia);\r\n    } catch (error) {\r\n      console.error(": "ecommerce.constisuploadingseti1",
  ");\r\n  const [showAddModal, setShowAddModal] = useState(false);\r\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\r\n  const { success, error } = useToastContext();\r\n\r\n  // Sauvegarder automatiquement dans localStorage ET synchroniser avec le service global\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(productsList));\r\n      // Synchroniser avec le service global pour que les produits apparaissent dans la recherche\r\n      productsService.syncSupplierProducts(productsList);\r\n    } catch (error) {\r\n      console.error(": "forms.constshowaddmodalset1",
  ");\r\n  const [showAddModal, setShowAddModal] = useState(false);\r\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\r\n  const { success, error } = useToastContext();\r\n  const { t } = useLanguage();\r\n\r\n  // Sauvegarder automatiquement dans localStorage ET synchroniser avec le service global\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(productsList));\r\n      // Synchroniser avec le service global pour que les produits apparaissent dans la recherche\r\n      productsService.syncSupplierProducts(productsList);\r\n    } catch (error) {\r\n      console.error(": "forms.constshowaddmodalset2",
  ");\r\n  const [suggestions, setSuggestions] = useState<string[]>([]);\r\n\r\n  // Refs pour les dropdowns\r\n  const languageDropdownRef = useRef<HTMLDivElement>(null);\r\n  const currencyDropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Hook personnalisé pour les notifications - uniquement si l": "admin.constsuggestionssets2",
  ");\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const { t } = useLanguage();\r\n  const { addNotification } = useNotification();\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: ": "forms.constmessagesendrefu",
  ");\r\n  }\r\n  /**\r\n   * Remet à zéro le statut d": "common.remetazerolestatutd1",
  ");\r\n  };\r\n\r\n  return (\r\n    <section className=\"bg-[#181f2c] text-white py-10 rounded-xl\">\r\n      <div className=\"text-center mb-4\">\r\n        <h2 className=\"text-2xl font-bold mb-1\">Explorez nos catégories</h2>\r\n        <div className=\"text-gray-400 mb-6\">Des millions d": "forms.returnsectionclassna",
  ");\r\nexport const messagesService = new FirestoreCrudService<FirestoreMessage>(": "common.exportconstmessagess",
  ");\r\nexport const notificationsService = new FirestoreCrudService<FirestoreNotification>(": "common.exportconstnotificat",
  ");\r\n};\r\n\r\n// Helper pour obtenir une URL de prévisualisation\r\nexport const getPreviewUrl = (file: File): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!isImageFile(file)) {\r\n      reject(new Error(": "common.helperpourobtenirune1",
  ");  // États spécifiques aux fournisseurs\r\n  const [companyName, setCompanyName] = useState(": "forms.etatsspecifiquesauxf2",
  "); // Rôle par défaut\n  const [error, setError] = useState(": "common.rolepardefautconster1",
  ")[0],\n    };\n    \n    updateUser({ messages: [...user.messages, newMessage] });\n    setMessage(": "admin.0updateusermessagesu1",
  ")[0]}\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div>\r\n                          <div className=\"text-sm text-gray-900 dark:text-white font-medium\">\r\n                            {shipment.carrier}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                            {shipment.service}\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <span className={`inline-flex items-center gap-1 px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(shipment.status)}`}>\r\n                          {getStatusIcon(shipment.status)}\r\n                          {getStatusText(shipment.status)}\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                        <div className=\"space-y-1\">\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <Calendar size={12} />\r\n                            Créée: {formatDate(shipment.createdAt)}\r\n                          </div>\r\n                          {shipment.shippedAt && (\r\n                            <div className=\"flex items-center gap-1\">\r\n                              <Truck size={12} />\r\n                              Expédiée: {formatDate(shipment.shippedAt)}\r\n                            </div>\r\n                          )}\r\n                          {shipment.estimatedDelivery && (\r\n                            <div className=\"flex items-center gap-1\">\r\n                              <Clock size={12} />\r\n                              Livraison prévue: {formatDate(shipment.estimatedDelivery)}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                          {formatPrice(shipment.value)}\r\n                        </div>\r\n                        <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                          {shipment.weight} kg\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                        <Button\r\n                          onClick={() => console.log(": "forms.0divdivtdtdclassname",
  ")}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Message personnalisé pour les sourceurs avec animation *": "common.pdivdivdivmessageper",
  ")}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Message personnalisé pour les sourceurs avec animation */}\n            {role === ": "common.pdivdivdivmessageper1",
  ")}\n                  </span>\n                  <div className=\"w-10 h-10 bg-black bg-opacity-10 rounded-full flex items-center justify-center group-hover:bg-opacity-30 transition-all duration-300 transform group-hover:scale-125 group-hover:rotate-12 active:scale-90\">\n                    <ShoppingBag className=\"w-5 h-5 text-gray-700 transition-transform duration-300 group-hover:scale-110\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Section \"Ça va vous plaire\" */}\n          <div className={`mt-20 text-center transform transition-all duration-1000 delay-1500 ${\n            isLoaded ? ": "forms.spandivclassnamew10h",
  ")}\n                  </span>\n                  <div className=\"w-10 h-10 bg-black bg-opacity-10 rounded-full flex items-center justify-center group-hover:bg-opacity-30 transition-all duration-300 transform group-hover:scale-125 group-hover:rotate-12 active:scale-90\">\n                    <ShoppingBag className=\"w-5 h-5 text-gray-700 transition-transform duration-300 group-hover:scale-110\" />\n                  </div>\n                </div>\n              </div>            </div>          </div>\n\n          {/* Section \"Ça va vous plaire\" */}\n          <div className={`mt-20 text-center transform transition-all duration-1000 delay-1500 ${isLoaded ? ": "forms.spandivclassnamew10h1",
  ")}\n                  minLength={6}\n                  disabled={isLoading}\n                />\n              </div>\n            )}\n\n            {/* Champs spécifiques pour les influenceurs": "common.minlength6disabledis",
  ")}\n                  minLength={6}\n                  disabled={isLoading}\n                />\n              </div>\n            )}\n\n            {/* Champs spécifiques pour les influenceurs/sourceurs */}\n            {role === ": "common.minlength6disabledis1",
  ")}\n                </Button>\n              </div>\n              {messageSent && <p className=": "forms.buttondivmessagesent1",
  ")}\n                </button>\n                <button\n                  onClick={logout}\n                  className=\"bg-red-500 text-white px-3 py-2 rounded-full text-xs font-semibold hover:bg-red-600 transition-all duration-300 transform hover:scale-105 shadow-lg\"\n                  title=\"Déconnexion complète\"\n                >\n                  ✕\n                </button>\n              </div>\n            ) : (\n              <Link\n                to=\"/login\"\n                className=\"bg-white text-gray-800 px-6 py-2 rounded-full text-sm font-semibold hover:bg-orange-50 hover:text-orange-600 transition-all duration-300 transform hover:scale-105 shadow-lg font-display\"\n              >\n                {t(": "auth.buttonbuttononclickl",
  ")}\n                </button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section avantages rapides */}\n      <div className=\"bg-gradient-to-r from-blue-600 via-blue-500 to-orange-500 dark:from-blue-700 dark:via-blue-600 dark:to-orange-600 py-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n            <div className=\"group\">\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\n                <ShoppingBag className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2 font-display\">Livraison Rapide</h3>\n              <p className=\"text-white/90 font-reading\">Expédition sous 24-48h partout en France</p>\n            </div>\n            <div className=\"group\">\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\n                <Wallet className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2 font-display\">Paiement Sécurisé</h3>\n              <p className=\"text-white/90 font-reading\">Transactions protégées et garanties</p>\n            </div>\n            <div className=\"group\">\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\n                <Users className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2 font-display\">Support 24/7</h3>\n              <p className=\"text-white/90 font-reading\">Une équipe dédiée à votre service</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section unifiée \"Comment ça marche ?\" + Recommandations */}\n      <div className=\"bg-gradient-to-br from-gray-50 to-blue-50 dark:from-gray-800 dark:to-gray-900 pt-16 md:pt-24 pb-16 md:pb-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6 animate-fade-in-up font-display\">\n              {t(": "forms.buttonlinkdivdivdivd",
  ")}\n                </p>\n              </div>\n            </div>\n\n            {/* Gérez facilement *": "common.pdivdivgerezfacileme1",
  ")}\n                </p>\n              </div>\n            </div>\n\n            {/* Gérez facilement */}\n            <div className=\"flex items-start space-x-4 group animate-slide-in-right\" style={{ animationDelay: ": "forms.pdivdivgerezfacileme1",
  ")}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section Découvrez tous nos fournisseurs - Repositionnée et améliorée *": "ecommerce.pdivdivdivdivdivsect3",
  ")}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section Découvrez tous nos fournisseurs - Repositionnée et améliorée */}\n      <div className=\"bg-gradient-to-br from-blue-50 to-orange-50 dark:from-gray-800 dark:to-gray-900 py-16 md:py-24 relative overflow-hidden\">\n        {/* Éléments décoratifs de fond */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div className=\"absolute top-20 left-10 w-20 h-20 bg-blue-400 rounded-full blur-xl\"></div>\n          <div className=\"absolute bottom-20 right-10 w-32 h-32 bg-orange-400 rounded-full blur-xl\"></div>\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-40 h-40 bg-gradient-to-r from-blue-400 to-orange-400 rounded-full blur-2xl\"></div>\n        </div>\n\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative z-10\">\n          <div className=\"mb-8\">\n            <div className=\"inline-flex items-center bg-gradient-to-r from-blue-100 to-orange-100 dark:from-blue-900 dark:to-orange-900 px-4 py-2 rounded-full mb-4\">\n              <Users className=\"w-5 h-5 text-blue-600 dark:text-blue-400 mr-2\" />\n              <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400 uppercase tracking-wider\">\n                Réseau global\n              </span>\n            </div>\n          </div>\n\n          <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4 font-display\">\n            {t(": "forms.pdivdivdivdivdivsect",
  ")}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section Découvrez tous nos fournisseurs - Repositionnée et améliorée */}\n      <div className=\"bg-gradient-to-br from-blue-50 to-orange-50 dark:from-gray-800 dark:to-gray-900 py-16 md:py-24 relative overflow-hidden\">\n        {/* Éléments décoratifs de fond */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div className=\"absolute top-20 left-10 w-20 h-20 bg-blue-400 rounded-full blur-xl\"></div>\n          <div className=\"absolute bottom-20 right-10 w-32 h-32 bg-orange-400 rounded-full blur-xl\"></div>\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-40 h-40 bg-gradient-to-r from-blue-400 to-orange-400 rounded-full blur-2xl\"></div>\n        </div>\n        \n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative z-10\">\n          <div className=\"mb-8\">\n            <div className=\"inline-flex items-center bg-gradient-to-r from-blue-100 to-orange-100 dark:from-blue-900 dark:to-orange-900 px-4 py-2 rounded-full mb-4\">\n              <Users className=\"w-5 h-5 text-blue-600 dark:text-blue-400 mr-2\" />\n              <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400 uppercase tracking-wider\">\n                Réseau global\n              </span>\n            </div>\n          </div>\n          \n          <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4 font-display\">\n            {t(": "forms.pdivdivdivdivdivsect1",
  ")}\n                className=\"w-full px-6 py-4 text-gray-800 bg-white/95 backdrop-blur-sm rounded-full border-2 border-white/50 focus:outline-none focus:ring-4 focus:ring-orange-300 focus:border-orange-400 shadow-2xl font-reading text-readable transition-all duration-300 hover:shadow-3xl placeholder-gray-600\"\n              />\n              <button\n                type=\"submit\"\n                className=\"absolute right-3 top-1/2 transform -translate-y-1/2 bg-gradient-to-r from-blue-500 to-orange-500 text-white px-6 py-3 rounded-full hover:from-blue-600 hover:to-orange-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 font-display\"\n              >\n                <Search className=\"h-5 w-5\" />\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation par catégories - Déplacée sous l": "navigation.classnamewfullpx6py4",
  ")}\n                className=\"w-full px-6 py-4 text-gray-800 bg-white/95 backdrop-blur-sm rounded-full border-2 border-white/50 focus:outline-none focus:ring-4 focus:ring-orange-300 focus:border-orange-400 shadow-2xl font-reading text-readable transition-all duration-300 hover:shadow-3xl\"\n              />\n              <button\n                type=\"submit\"\n                className=\"absolute right-3 top-1/2 transform -translate-y-1/2 bg-gradient-to-r from-blue-500 to-orange-500 text-white px-6 py-3 rounded-full hover:from-blue-600 hover:to-orange-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 font-display\"\n              >\n                <Search className=\"h-5 w-5\" />\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n\n        {/* Navigation par catégories - Déplacée sous l": "navigation.classnamewfullpx6py41",
  ")}\n              </Button>\n            </Link>\n            <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n              <div className=\"flex -space-x-2 mr-3\">\n                <div className=\"w-8 h-8 bg-blue-400 rounded-full border-2 border-white\"></div>\n                <div className=\"w-8 h-8 bg-orange-400 rounded-full border-2 border-white\"></div>\n                <div className=\"w-8 h-8 bg-green-400 rounded-full border-2 border-white\"></div>\n                <div className=\"w-8 h-8 bg-purple-400 rounded-full border-2 border-white flex items-center justify-center text-xs font-bold text-white\">\n                  +\n                </div>\n              </div>\n              <span className=\"font-reading\">Plus de 1000 fournisseurs vérifiés</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section processus détaillé */}\n      <div className=\"bg-white dark:bg-gray-900 py-16 md:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-6 font-display\">\n              {t(": "forms.buttonlinkdivclassna1",
  ")}\n              </Button>\n            </Link>\n          </div>\n\n          {/* Section Recommandations intégrée *": "common.buttonlinkdivsection",
  ")}\n              </Button>\n            </Link>\n          </div>\n\n          {/* Section Recommandations intégrée */}\n          <ProductRecommendations />\n        </div>\n      </div>\n\n      {/* Optimisez vos commandes *": "ecommerce.buttonlinkdivsection",
  ")}\n              </Button>\n            </Link>\n          </div>\n\n          {/* Section Recommandations intégrée */}\n          <ProductRecommendations />\n        </div>\n      </div>\n\n      {/* Optimisez vos commandes */}\n      <div className=\"bg-white dark:bg-gray-900 pt-0 pb-16 md:pb-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-6 font-display\">\n              {t(": "forms.buttonlinkdivsection",
  ")}\n              </Button>\n            </Link>          </div>\n        </div>\n      </div>\n\n      {/* Optimisez vos commandes *": "ecommerce.buttonlinkdivdivdivo",
  ")}\n              </Link>\n              {/* Onglet Conteneurs visible uniquement pour les fournisseurs connectés *": "ecommerce.linkongletconteneurs1",
  ")}\n              </Link>\n              {/* Onglet Conteneurs visible uniquement pour les fournisseurs connectés */}\n              {user && user.role === ": "admin.linkongletconteneurs",
  ")}\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Notification Center - Affiché uniquement pour les utilisateurs connectés *": "admin.linkdivdivdivnotific1",
  ")}\n              </button>\n            </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section avantages rapides */}\n      <div className=\"bg-gradient-to-r from-blue-600 via-blue-500 to-orange-500 dark:from-blue-700 dark:via-blue-600 dark:to-orange-600 py-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n            <div className=\"group\">\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\n                <ShoppingBag className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2 font-display\">Livraison Rapide</h3>\n              <p className=\"text-white/90 font-reading\">Expédition sous 24-48h partout en France</p>\n            </div>\n            <div className=\"group\">\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\n                <Wallet className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2 font-display\">Paiement Sécurisé</h3>\n              <p className=\"text-white/90 font-reading\">Transactions protégées et garanties</p>\n            </div>\n            <div className=\"group\">\n              <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300\">\n                <Users className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2 font-display\">Support 24/7</h3>\n              <p className=\"text-white/90 font-reading\">Une équipe dédiée à votre service</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section unifiée \"Comment ça marche ?\" + Recommandations */}\n      <div className=\"bg-gradient-to-br from-gray-50 to-blue-50 dark:from-gray-800 dark:to-gray-900 pt-16 md:pt-24 pb-16 md:pb-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6 animate-fade-in-up font-display\">\n              {t(": "forms.buttonlinkdivdivdivd1",
  ")}\n              </p>\n            </div>\n\n            {/* Étape 2 *": "common.pdivetape21",
  ")}\n              </p>\n            </div>\n\n            {/* Étape 2 */}\n            <div className=\"text-center group animate-fade-in-scale\" style={{ animationDelay: ": "forms.pdivetape2divclassna1",
  ")}\n              </p>\n            </div>\n\n            {/* Étape 3 *": "common.pdivetape31",
  ")}\n              </p>\n            </div>\n\n            {/* Étape 3 */}\n            <div className=\"text-center group animate-fade-in-scale\" style={{ animationDelay: ": "forms.pdivetape3divclassna1",
  ")}\n            </p>\n\n            {/* Barre de recherche *": "common.pbarrederecherche1",
  ")}\n            </p>\n          </div>\n\n          {/* 3 étapes principales *": "common.pdiv3etapesprincipal1",
  ")}\n            </p>\n          </div>\n\n          {/* 3 étapes principales */}\n          <div className=\"grid md:grid-cols-3 gap-8 md:gap-12 mb-16\">\n            {/* Étape 1 */}\n            <div className=\"text-center group animate-fade-in-scale\" style={{ animationDelay: ": "forms.pdiv3etapesprincipal1",
  ")}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex items-center justify-center\">\r\n                            <div className=\"text-center\">\r\n                                <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-2\">\r\n                                    <CheckCircle className=\"w-8 h-8 text-green-600\" />\r\n                                </div>\r\n                                <p className=\"text-sm font-medium text-green-600\">Serveur en ligne</p>\r\n                                <p className=\"text-xs text-gray-500\">Toutes les connexions fonctionnent</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Gestion des sauvegardes */}\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\r\n                    <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                                Sauvegardes\r\n                            </h2>\r\n                            <Button\r\n                                onClick={createBackup}\r\n                                disabled={backupLoading}\r\n                                className=\"flex items-center gap-2\"\r\n                            >\r\n                                {backupLoading ? (\r\n                                    <>\r\n                                        <RefreshCw className=\"w-4 h-4 animate-spin\" />\r\n                                        Création en cours...\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <Download className=\"w-4 h-4\" />\r\n                                        Créer une sauvegarde\r\n                                    </>\r\n                                )}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"overflow-x-auto\">\r\n                        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n                            <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n                                <tr>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Nom du fichier\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Taille\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Date\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Type\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Statut\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Actions\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                                {backups.map((backup) => (\r\n                                    <tr key={backup.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\r\n                                            {backup.name}\r\n                                        </td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                                            {backup.size}\r\n                                        </td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                                            {backup.date.toLocaleString(": "auth.spandivdivdivclassna",
  ")}\r\n                                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2\"\r\n                            >\r\n                                <Copy size={16} />\r\n                                Copier\r\n                            </button>\r\n                            <button className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2\">\r\n                                <Share2 size={16} />\r\n                                Partager\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Liste des filleuls récents */}\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700\">\r\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                    Filleuls récents\r\n                </h3>\r\n\r\n                <div className=\"space-y-3\">\r\n                    {recentReferrals.map((referral) => (\r\n                        <div\r\n                            key={referral.id}\r\n                            className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\"\r\n                        >\r\n                            <div className=\"flex items-center gap-3\">\r\n                                <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center\">\r\n                                    <span className=\"text-white font-medium\">\r\n                                        {referral.name.split(": "forms.classnamepx4py2bgblu",
  ")}\r\n                            />\r\n\r\n                            {/* Contact Info *": "common.contactinfo",
  ")}\r\n                          onClick={() => handleDeleteDocument(document)}\r\n                          className=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300\"\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n        {filteredDocuments.length === 0 && (\r\n          <div className=\"text-center py-12\">\r\n            <FileText className=\"mx-auto h-12 w-12 text-gray-400\" />\r\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-white\">Aucun document trouvé</h3>\r\n            <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n              Aucun document ne correspond à vos critères de recherche.\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Modal d": "forms.onclickhandledeleted",
  ")}\r\n                          onClick={() => handleDeleteDocument(document.id)}\r\n                          className=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300\"\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n        {filteredDocuments.length === 0 && (\r\n          <div className=\"text-center py-12\">\r\n            <FileText className=\"mx-auto h-12 w-12 text-gray-400\" />\r\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900 dark:text-white\">Aucun document trouvé</h3>\r\n            <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\r\n              Aucun document ne correspond à vos critères de recherche.\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Modal d": "forms.onclickhandledeleted1",
  ")}\r\n                        >\r\n                          Expédier\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal détails commande *": "ecommerce.expedierbuttondivtdt",
  ")}\r\n                        >\r\n                          Expédier\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal détails commande */}\r\n      {selectedOrder && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-2xl max-h-96 overflow-y-auto\">\r\n            <h3 className=\"text-lg font-semibold mb-4\">\r\n              Détails de la commande {selectedOrder.id}\r\n            </h3>\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">Client</h4>\r\n                <p className=\"text-gray-600\">{selectedOrder.customerName}</p>\r\n                <p className=\"text-gray-600\">{selectedOrder.shippingAddress}</p>\r\n              </div>\r\n              <div>\r\n                <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">{t(": "forms.expedierbuttondivtdt",
  ")}\r\n                        className=\"w-full px-3 py-2 bg-red-100 hover:bg-red-200 dark:bg-red-900 dark:hover:bg-red-800 text-red-700 dark:text-red-300 rounded-lg text-sm transition-colors\"\r\n                      >\r\n                        Demander la suppression\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Paramètres de confidentialité */}\r\n                  <div className=\"bg-gray-50 dark:bg-gray-700 rounded-xl p-6\">\r\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2\">\r\n                      <Settings size={18} />\r\n                      Paramètres de confidentialité\r\n                    </h4>\r\n                    <div className=\"space-y-4\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"text-sm font-medium text-gray-900 dark:text-white\">Profil public</p>\r\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400\">Votre profil est visible par les autres utilisateurs</p>\r\n                        </div>\r\n                        <button\r\n                          onClick={() => showNotification(": "forms.classnamewfullpx3py2",
  ")}\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"flex items-center\">\r\n                        {getStatusIcon(document.status)}\r\n                        <span className=\"ml-2 text-sm text-gray-900 dark:text-white\">\r\n                          {getStatusText(document.status)}\r\n                        </span>\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                      {document.downloadCount}\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                      <div className=\"flex items-center justify-end space-x-2\">\r\n                        <button \r\n                          title=\"Prévisualiser\"\r\n                          className=\"text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300\"\r\n                        >\r\n                          <Eye className=\"h-4 w-4\" />\r\n                        </button>                        <button \r\n                          title={t(": "forms.divtdtdclassnamepx6p1",
  ")}\r\n                      value={certifications}\r\n                      onChange={(e) => setCertifications(e.target.value)}\r\n                      disabled={isLoading}\r\n                    />\r\n                    <div className=\"auth-input-icon\">\r\n                      <svg width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>                {/* Méthodes de contrôle qualité */}\r\n                <div className=\"auth-form-group\">\r\n                  <div className=\"auth-input-wrapper\">\r\n                    <textarea\r\n                      className=\"auth-input auth-textarea\"\r\n                      placeholder={t(": "forms.valuecertificationso",
  ")}\r\n                      value={companyMessage}\r\n                      onChange={(e) => setCompanyMessage(e.target.value)}\r\n                      disabled={isLoading}\r\n                      rows={4}\r\n                    />\r\n                    <div className=\"auth-input-icon\">\r\n                      <svg width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>                {/* Dépôt de documents */}\r\n                <div className=\"auth-form-group\">\r\n                  <FileUploadButton \r\n                    id=\"supplierDocuments\"\r\n                    label={t(": "forms.valuecompanymessageo",
  ")}\r\n                      value={companyName}\r\n                      onChange={(e) => setCompanyName(e.target.value)}\r\n                      required\r\n                      disabled={isLoading}\r\n                    />\r\n                    <div className=\"auth-input-icon\">\r\n                      <svg width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path d=\"M10.07 2.82L8.12 6.39l3.95 2.28.77-1.33zM12 8.44l.82.47L11.25 8l.75-1.3zM10 12c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM2 12l3.95-2.28L8.12 6.39L10.07 2.82L12 1l1.93 1.82 1.95 3.57 2.17 3.72L22 12v10H2V12z\"/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Numéro d": "forms.valuecompanynameonch",
  ")}\r\n                      value={followerCount}\r\n                      onChange={(e) => setFollowerCount(e.target.value)}\r\n                      disabled={isLoading}\r\n                    />\r\n                    <div className=\"auth-input-icon\">\r\n                      <svg width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path d=\"M16 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm4 18v-6h2.5l-2.54-7.63A1.5 1.5 0 0018.5 7H17c-.8 0-1.5.7-1.5 1.5V10H7V8.5C7 7.7 6.3 7 5.5 7H4c-.8 0-1.5.7-1.5 1.5V22h3v-3h12v3h3z\"/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Catégorie d": "forms.valuefollowercounton",
  ")}\r\n                      value={monthlyProductionCapacity}\r\n                      onChange={(e) => setMonthlyProductionCapacity(e.target.value)}\r\n                      required\r\n                      disabled={isLoading}\r\n                    />\r\n                    <div className=\"auth-input-icon\">\r\n                      <svg width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Pays et région de production */}\r\n                <div className=\"auth-form-group\">\r\n                  <div className=\"auth-input-wrapper\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"auth-input\"\r\n                      placeholder={t(": "forms.valuemonthlyproducti",
  ")}\r\n                      value={presentationVideo}\r\n                      onChange={(e) => setPresentationVideo(e.target.value)}\r\n                      disabled={isLoading}\r\n                    />\r\n                    <div className=\"auth-input-icon\">\r\n                      <svg width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path d=\"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z\"/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Message de présentation */}\r\n                <div className=\"auth-form-group\">\r\n                  <div className=\"auth-input-wrapper\">\r\n                    <textarea\r\n                      className=\"auth-input auth-textarea\"\r\n                      placeholder={t(": "forms.valuepresentationvid",
  ")}\r\n                      value={qualityControlMethods}\r\n                      onChange={(e) => setQualityControlMethods(e.target.value)}\r\n                      disabled={isLoading}\r\n                      rows={3}\r\n                    />\r\n                    <div className=\"auth-input-icon\">\r\n                      <svg width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path d=\"M9 11H7v9h2v-9zm4-4h-2v13h2V7zm4-3h-2v16h2V4z\"/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Dépôt de documents */}\r\n                <div className=\"auth-form-group\">\r\n                  <FileUploadButton \r\n                    id=\"supplierDocuments\"\r\n                    label={t(": "forms.valuequalitycontrolm",
  ")}\r\n                      value={website}\r\n                      onChange={(e) => setWebsite(e.target.value)}\r\n                      disabled={isLoading}\r\n                    />\r\n                    <div className=\"auth-input-icon\">\r\n                      <svg width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Catégorie de produits */}\r\n                <div className=\"auth-form-group\">\r\n                  <select\r\n                    className=\"auth-input\"\r\n                    value={productCategory}\r\n                    onChange={(e) => setProductCategory(e.target.value)}\r\n                    required\r\n                    disabled={isLoading}\r\n                  >\r\n                    <option value=\"\">{t(": "forms.valuewebsiteonchange",
  ")}\r\n                    accept=\"application/pdf,image/*,.doc,.docx,.xls,.xlsx\"\r\n                    onChange={(file) => setSupplierDocuments(file)}\r\n                    disabled={isLoading}\r\n                    className=\"auth-file-upload\"\r\n                  />\r\n                </div>\r\n\r\n                {/* Case à cocher pour accepter la vérification */}\r\n                <div className=\"auth-form-group\">\r\n                  <label className=\"auth-checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"auth-checkbox\"\r\n                      checked={agreeToVerification}\r\n                      onChange={(e) => setAgreeToVerification(e.target.checked)}\r\n                      required\r\n                      disabled={isLoading}\r\n                    />\r\n                    <span className=\"auth-checkbox-text\">{t(": "forms.acceptapplicationpdf",
  ")}\r\n                    accept=\"application/pdf,image/*,.doc,.docx,.xls,.xlsx\"\r\n                    onChange={(file) => setSupplierDocuments(file)}\r\n                    disabled={isLoading}\r\n                    className=\"auth-file-upload\"\r\n                  />\r\n                </div>\r\n\r\n                {/* Vidéo de présentation */}\r\n                <div className=\"auth-form-group\">\r\n                  <div className=\"auth-input-wrapper\">\r\n                    <input\r\n                      type=\"url\"\r\n                      className=\"auth-input\"\r\n                      placeholder={t(": "forms.acceptapplicationpdf1",
  ")}\r\n                    value={confirmPassword}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    required\r\n                    disabled={isLoading}\r\n                  />\r\n                  <div className=\"auth-input-icon\">\r\n                    <svg width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\r\n                    </svg>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}            {/* Champs spécifiques pour les influenceurs */}\r\n            {!isLoginMode && selectedRole === ": "auth.valueconfirmpassword",
  ")}\r\n                  >\r\n                    <Download className=\"w-4 h-4\" />\r\n                  </Button>\r\n                  \r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => handleRemoveFile(file.path)}\r\n                    className=\"text-red-600 hover:text-red-700\"\r\n                  >\r\n                    <Trash2 className=\"w-4 h-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Modal de prévisualisation */}\r\n      {previewUrl && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4\">\r\n          <div className=\"relative max-w-4xl max-h-full\">\r\n            <button\r\n              onClick={() => setPreviewUrl(null)}\r\n              className=\"absolute top-4 right-4 text-white hover:text-gray-300 z-10\"\r\n            >\r\n              <X className=\"w-6 h-6\" />\r\n            </button>\r\n            \r\n            {previewUrl.includes(": "forms.downloadclassnamew4h",
  ")}\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  required\r\n                  disabled={isLoading}\r\n                />\r\n                <div className=\"auth-input-icon\">\r\n                  <svg width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path d=\"M18,8h-1V6c0-2.76-2.24-5-5-5S7,3.24,7,6v2H6c-1.1,0-2,0.9-2,2v10c0,1.1,0.9,2,2,2h12c1.1,0,2-0.9,2-2V10 C20,8.9,19.1,8,18,8z M12,17c-1.1,0-2-0.9-2-2s0.9-2,2-2s2,0.9,2,2S13.1,17,12,17z M15.1,8H8.9V6c0-1.71,1.39-3.1,3.1-3.1 s3.1,1.39,3.1,3.1V8z\"/>\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Sélecteur de rôle */}\r\n            <div className=\"auth-form-group\">\r\n              <select\r\n                className=\"auth-input\"\r\n                value={selectedRole}\r\n                onChange={(e) => setSelectedRole(e.target.value)}\r\n                disabled={isLoading}\r\n              >\r\n                <option value=\"customer\">{t(": "auth.valuepasswordonchang",
  ")}\r\n                />\r\n                {errors.price && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.price}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Catégorie *\r\n              </label>\r\n              <select\r\n                value={formData.category}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}\r\n                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${\r\n                  errors.category ? ": "forms.errorspricepclassnam",
  ")}\r\n                onKeyDown={handleTagKeyDown}\r\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n              <Button type=\"button\" onClick={handleAddTag} variant=\"outline\">\r\n                <Tag className=\"w-4 h-4\" />\r\n              </Button>\r\n            </div>\r\n            {formData.tags.length > 0 && (\r\n              <div className=\"flex flex-wrap gap-2\">\r\n                {formData.tags.map((tag, index) => (\r\n                  <span\r\n                    key={index}\r\n                    className=\"inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full\"\r\n                  >\r\n                    {tag}\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => handleRemoveTag(tag)}\r\n                      className=\"text-blue-600 hover:text-blue-800\"\r\n                    >\r\n                      <X className=\"w-3 h-3\" />\r\n                    </button>\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Spécifications techniques */}\r\n          <div>\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-4\">Spécifications techniques</h3>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Marque *\r\n                </label>\r\n                <Input\r\n                  value={formData.brand}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, brand: e.target.value }))}\r\n                  placeholder=\"Ex: Apple, Samsung...\"\r\n                  error={errors.brand}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Origine *\r\n                </label>\r\n                <Input\r\n                  value={formData.origin}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, origin: e.target.value }))}\r\n                  placeholder=\"Ex: Chine, France...\"\r\n                  error={errors.origin}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Matériau\r\n                </label>\r\n                <Input\r\n                  value={formData.material}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, material: e.target.value }))}\r\n                  placeholder=\"Ex: Plastique, Métal...\"\r\n                  error={errors.material}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Numéro de modèle\r\n                </label>\r\n                <Input\r\n                  value={formData.modelNumber}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, modelNumber: e.target.value }))}\r\n                  placeholder=\"Ex: IP15P-128\"\r\n                  error={errors.modelNumber}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Upload d": "forms.onkeydownhandletagke",
  ")}\r\n              </Link>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Notification Center */}\r\n      {user && (\r\n        <NotificationCenter\r\n          isOpen={isNotificationCenterOpen}\r\n          onClose={() => setIsNotificationCenterOpen(false)}\r\n          onUnreadCountChange={() => refreshNotifications()}\r\n        ": "admin.linkdivdivdivnotific2",
  ")}\r\n            />\r\n            {errors.description && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.description}</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Prix et catégorie */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                {t(": "forms.errorsdescriptionpcl",
  ")}\r\n            </Button>\r\n            <Button\r\n              onClick={handleUpload}\r\n              disabled={selectedFiles.length === 0 || !metadata.category || isUploading}\r\n            >\r\n              {isUploading ? (\r\n                <>\r\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\r\n                  Upload en cours...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Upload className=\"h-4 w-4 mr-2\" />\r\n                  Télécharger ({selectedFiles.length} fichier{selectedFiles.length > 1 ? ": "forms.buttonbuttononclickh",
  ")}\r\n            </h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Gérez les conteneurs et leurs capacités\r\n            </p>\r\n          </div>\r\n          <button\r\n            onClick={handleCreateContainer}\r\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors\"\r\n          >\r\n            <Plus className=\"w-4 h-4\" />\r\n            <span>Nouveau conteneur</span>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Statistiques rapides */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm\">\r\n            <div className=\"flex items-center\">\r\n              <Package className=\"w-8 h-8 text-blue-500\" />\r\n              <div className=\"ml-3\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {containers.length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm\">\r\n            <div className=\"flex items-center\">\r\n              <Ship className=\"w-8 h-8 text-green-500\" />\r\n              <div className=\"ml-3\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Actifs</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {containers.filter(c => c.status === ": "forms.h1pclassnametextgray",
  ")}\r\n            </h3>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition-colors\"\r\n            >\r\n              <X className=\"h-6 w-6\" />\r\n            </button>\r\n          </div>\r\n\r\n          {/* Content */}\r\n          <div className=\"px-6 py-4 space-y-6\">\r\n            {/* Métadonnées */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Catégorie *\r\n                </label>\r\n                <select\r\n                  value={metadata.category}\r\n                  onChange={(e) => setMetadata(prev => ({ ...prev, category: e.target.value }))}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\r\n                  required\r\n                >\r\n                  <option value=\"\">Sélectionner une catégorie</option>\r\n                  {categories.map(category => (\r\n                    <option key={category} value={category}>{category}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Type de document *\r\n                </label>\r\n                <select\r\n                  value={metadata.type}\r\n                  onChange={(e) => setMetadata(prev => ({ ...prev, type: e.target.value as DocumentMetadata[": "forms.h3buttononclickonclo",
  ")}\r\n            </p>\r\n            \r\n            {/* Message informatif sur la connexion universelle *": "auth.pmessageinformatifsu",
  ")}\r\n            </p>\r\n            \r\n            {/* Message informatif sur la connexion universelle */}\r\n            <div className=\"auth-info-badge\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <div className=\"w-4 h-4 text-blue-300\">\r\n                  <svg fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                    <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                </div>\r\n                <span className=\"text-sm text-blue-100\">\r\n                  🚀 Accès Simplifié\r\n                </span>\r\n              </div>\r\n              <p className=\"text-xs text-blue-200 mt-2\">\r\n                Plus besoin de choisir votre rôle. Connectez-vous directement avec vos identifiants.\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"auth-visual-illustration\">\r\n              <div className=\"illustration-circle\"></div>\r\n              <div className=\"illustration-circle\"></div>\r\n              <div className=\"illustration-center\">\r\n                <div className=\"w-6 h-6 text-white\">\r\n                  <svg fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Colonne formulaire */}\r\n        <div className=\"auth-form-column auth-form-spectacular\">\r\n          <div className=\"auth-form-header\">\r\n            <h1 className=\"auth-form-title\">{t(": "auth.pmessageinformatifsu1",
  ")}\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Capacité disponible</p>\r\n            <p className=\"font-medium text-green-600 dark:text-green-400\">{availableCapacity} CBM</p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Slider de sélection */}\r\n        <div className=\"space-y-4\">            <div className=\"flex justify-between items-center\">\r\n          <label className=\"text-lg font-medium text-gray-900 dark:text-white\">\r\n            Quantité à réserver\r\n          </label>\r\n          <div className={`text-2xl font-bold text-blue-600 dark:text-blue-400 quantity-display ${quantityAnimating ? ": "forms.pdivdivpclassnametex",
  ")}\r\n            </p>          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal de saisie des liens réseaux sociaux *": "common.pdivdivdivmodaldesai",
  ")}\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Statistiques */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"flex-shrink-0\">\r\n                <FileText className=\"h-8 w-8 text-blue-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total Documents</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{documents.length}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"flex-shrink-0\">\r\n                <Check className=\"h-8 w-8 text-green-600\" />\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Approuvés</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {documents.filter(d => d.status === ": "forms.buttondivstatistique1",
  ")}\r\n          </p>\r\n        </div>{/* Carrousel de produits *": "ecommerce.pdivcarrouseldeprodu",
  ")}\r\n        onChange={handleInputChange}\r\n        className=\"hidden\"\r\n      />\r\n\r\n      {/* Liste des fichiers */}\r\n      {uploadFiles.length > 0 && (\r\n        <div className=\"space-y-2\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\r\n              Fichiers sélectionnés ({uploadFiles.length})\r\n            </h3>\r\n            <div className=\"flex gap-2\">\r\n              <Button\r\n                onClick={clearCompleted}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                disabled={!uploadFiles.some(f => f.status === ": "forms.onchangehandleinputc",
  ")} \"${productData.name}\"`);\r\n      } else {\r\n        // Créer un produit simple pour la démonstration\r\n        const newProduct: Product = {\r\n          ...products[0], // Copier toute la structure existante\r\n          id: `prod_${Date.now()}`,\r\n          name: productData.name,\r\n          category: productData.category,\r\n          description: {\r\n            ...(products[0].description as any),\r\n            fr: productData.description || `Description de ${productData.name}`\r\n          },\r\n          images: productData.images && productData.images.length > 0 \r\n            ? productData.images \r\n            : [": "forms.productdatanameelsec",
  ")} \"${productData.name}\"`);\r\n      } else {\r\n        // Créer un produit simple pour la démonstration\r\n        const newProduct: Product = {\r\n          ...products[0], // Copier toute la structure existante\r\n          id: `prod_${Date.now()}`,\r\n          name: productData.name,\r\n          category: productData.category,\r\n          description: {\r\n            ...(products[0].description as { fr?: string }),\r\n            fr: productData.description || `Description de ${productData.name}`\r\n          },\r\n          images: productData.images && productData.images.length > 0 \r\n            ? productData.images \r\n            : [": "forms.productdatanameelsec1",
  ")} className=\"flex items-center gap-2\">\r\n              <Download size={16} />\r\n              Exporter\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Revenus totaux</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {formatPrice(stats.totalRevenue)}\r\n                </p>\r\n                <div className={`flex items-center mt-2 text-sm ${getChangeColor(stats.revenueChange)}`}>\r\n                  {getChangeIcon(stats.revenueChange)}\r\n                  <span className=\"ml-1\">{formatPercent(stats.revenueChange)}</span>\r\n                  <span className=\"text-gray-500 ml-1\">vs période précédente</span>\r\n                </div>\r\n              </div>\r\n              <DollarSign className=\"h-8 w-8 text-green-500\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Commandes</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {stats.totalOrders.toLocaleString()}\r\n                </p>\r\n                <div className={`flex items-center mt-2 text-sm ${getChangeColor(stats.ordersChange)}`}>\r\n                  {getChangeIcon(stats.ordersChange)}\r\n                  <span className=\"ml-1\">{formatPercent(stats.ordersChange)}</span>\r\n                  <span className=\"text-gray-500 ml-1\">vs période précédente</span>\r\n                </div>\r\n              </div>\r\n              <ShoppingBag className=\"h-8 w-8 text-blue-500\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Utilisateurs</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {stats.totalUsers.toLocaleString()}\r\n                </p>\r\n                <div className={`flex items-center mt-2 text-sm ${getChangeColor(stats.usersChange)}`}>\r\n                  {getChangeIcon(stats.usersChange)}\r\n                  <span className=\"ml-1\">{formatPercent(stats.usersChange)}</span>\r\n                  <span className=\"text-gray-500 ml-1\">vs période précédente</span>\r\n                </div>\r\n              </div>\r\n              <Users className=\"h-8 w-8 text-purple-500\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Fournisseurs</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {stats.totalSuppliers.toLocaleString()}\r\n                </p>\r\n                <div className={`flex items-center mt-2 text-sm ${getChangeColor(stats.suppliersChange)}`}>\r\n                  {getChangeIcon(stats.suppliersChange)}\r\n                  <span className=\"ml-1\">{formatPercent(stats.suppliersChange)}</span>\r\n                  <span className=\"text-gray-500 ml-1\">vs période précédente</span>\r\n                </div>\r\n              </div>\r\n              <Package className=\"h-8 w-8 text-orange-500\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Charts */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          {/* Revenue Chart */}\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center justify-between mb-6\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                Évolution des Revenus\r\n              </h3>\r\n              <BarChart3 className=\"h-5 w-5 text-gray-400\" />\r\n            </div>\r\n            {loading ? (\r\n              <div className=\"h-64 flex items-center justify-center\">\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600\"></div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"h-64\">\r\n                <div className=\"flex items-end justify-between h-full space-x-2\">\r\n                  {chartData.map((data, index) => (\r\n                    <div key={index} className=\"flex-1 flex flex-col items-center\">\r\n                      <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-t relative\">\r\n                        <div\r\n                          className=\"bg-gradient-to-t from-green-500 to-green-400 rounded-t transition-all duration-500\"\r\n                          style={{\r\n                            height: `${(data.revenue / maxRevenue) * 200}px`,\r\n                            minHeight: ": "navigation.classnameflexitemsce",
  ")} className=\"flex items-center gap-2\">\r\n            <Upload size={16} />\r\n            Télécharger un document\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <FileText className=\"h-8 w-8 text-blue-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{documents.length}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Eye className=\"h-8 w-8 text-green-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Publics</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {documents.filter(d => d.isPublic).length}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Download className=\"h-8 w-8 text-purple-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Téléchargements</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {documents.reduce((sum, doc) => sum + doc.downloads, 0)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <File className=\"h-8 w-8 text-orange-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Taille totale</p>\r\n                <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                  {formatFileSize(documents.reduce((sum, doc) => sum + doc.size, 0))}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Rechercher par nom, description ou tags...\"\r\n                  value={searchTerm}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white placeholder-gray-600 dark:placeholder-gray-400\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={typeFilter}\r\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setTypeFilter(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n              >\r\n                <option value=\"\">Tous les types</option>\r\n                <option value=\"contract\">Contrat</option>\r\n                <option value=\"invoice\">Facture</option>\r\n                <option value=\"certificate\">Certificat</option>\r\n                <option value=\"report\">Rapport</option>\r\n                <option value=\"other\">Autre</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Documents List */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden\">\r\n          {loading ? (\r\n            <div className=\"p-8 text-center\">\r\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto\"></div>\r\n              <p className=\"mt-2 text-gray-500 dark:text-gray-400\">Chargement...</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"divide-y divide-gray-200 dark:divide-gray-700\">\r\n              {filteredDocuments.map((doc) => (\r\n                <div key={doc.id} className=\"p-6 hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <div className=\"flex items-start\">\r\n                      <div className=\"h-12 w-12 rounded-lg bg-gradient-to-r from-red-400 to-red-600 flex items-center justify-center mr-4\">\r\n                        <FileText className=\"h-6 w-6 text-white\" />\r\n                      </div>\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-2 mb-2\">\r\n                          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\r\n                            {doc.name}\r\n                          </h3>\r\n                          <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getTypeColor(doc.type)}`}>\r\n                            {getTypeText(doc.type)}\r\n                          </span>\r\n                          {doc.isPublic && (\r\n                            <span className=\"inline-flex px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100 rounded-full\">\r\n                              Public\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                        \r\n                        {doc.description && (\r\n                          <p className=\"text-gray-600 dark:text-gray-400 mb-2\">\r\n                            {doc.description}\r\n                          </p>\r\n                        )}\r\n                        \r\n                        {doc.tags.length > 0 && (\r\n                          <div className=\"flex flex-wrap gap-1 mb-3\">\r\n                            {doc.tags.map((tag, index) => (\r\n                              <span\r\n                                key={index}\r\n                                className=\"inline-flex px-2 py-1 text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-600 dark:text-gray-300 rounded\"\r\n                              >\r\n                                {tag}\r\n                              </span>\r\n                            ))}\r\n                          </div>\r\n                        )}\r\n                        \r\n                        <div className=\"flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400\">\r\n                          <span className=\"flex items-center gap-1\">\r\n                            <File size={12} />\r\n                            {formatFileSize(doc.size)}\r\n                          </span>\r\n                          <span className=\"flex items-center gap-1\">\r\n                            <Download size={12} />\r\n                            {doc.downloads} téléchargements\r\n                          </span>\r\n                          <span className=\"flex items-center gap-1\">\r\n                            <Calendar size={12} />\r\n                            {formatDate(doc.uploadedAt)}\r\n                          </span>\r\n                          <span>par {doc.uploadedBy}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center gap-2 ml-4\">\r\n                      <Button\r\n                        onClick={() => console.log(": "forms.classnameflexitemsce",
  ")} variant=\"ghost\" />\r\n\r\n        {/* En-tête */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{t(": "forms.variantghostentetedi",
  ")} {/* Utilise la même description que sourceur */}\n              </p>\n            </div>\n\n            {/* Message personnalisé pour les fournisseurs avec animation *": "ecommerce.utiliselamemedescrip1",
  ")} {/* Utilise la même description que sourceur */}\n              </p>\n            </div>\n\n            {/* Message personnalisé pour les fournisseurs avec animation */}\n            {role === ": "ecommerce.utiliselamemedescrip2",
  ")} {/* Utilise le même titre que sourceur *": "common.utiliselememetitrequ",
  ")} {/* Utilise le même titre que sourceur */}\n              </h4>\n              <p className=\"text-sm text-blue-700 dark:text-blue-400\">\n                {role === ": "forms.utiliselememetitrequ",
  ")} • Tous droits réservés\r\n            <": "common.tousdroitsreserves",
  ")}</div>\n              <div className=\"mt-1\">{error}</div>\n            </div>\n          )}\n\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\n            {/* Sélecteur de rôle - caché pour les administrateurs */}\n            {!isAdminEmail(email) && (\n              <div>\n                <label htmlFor=\"role\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  {t(": "auth.divdivclassnamemt1er",
  ")}</option>\n                </select>\n              </div>\n            )}\n\n            {/* Message pour les administrateurs */}\n            {isAdminEmail(email) && (\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 text-blue-800 dark:text-blue-200 text-sm rounded-md p-4\">\n                <div className=\"font-medium\">🔐 Connexion Administrateur</div>\n                <div className=\"mt-1\">Vous êtes identifié comme administrateur. Aucune sélection de rôle nécessaire.</div>\n              </div>\n            )}\n\n            <Input\n              type=\"email\"\n              label={t(": "auth.optionselectdivmessa",
  ")}</option>\r\n                  </select>\r\n                </div>\r\n\r\n                {/* Capacité de production mensuelle *": "ecommerce.optionselectdivcapac",
  ")}</option>\r\n                  </select>\r\n                </div>\r\n\r\n                {/* Capacité de production mensuelle */}\r\n                <div className=\"auth-form-group\">\r\n                  <div className=\"auth-input-wrapper\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"auth-input\"\r\n                      placeholder={t(": "forms.optionselectdivcapac",
  ")}</option>}\r\n              </select>\r\n            </div>\r\n\r\n            {/* Messages personnalisés pour inscription uniquement */}\r\n            {!isLoginMode && (\r\n              <>\r\n                {/* Message personnalisé pour les fournisseurs *": "auth.optionselectdivmessa2",
  ")}</option>}\r\n              </select>\r\n            </div>\r\n\r\n            {/* Messages personnalisés pour inscription uniquement */}\r\n            {!isLoginMode && (\r\n              <>\r\n                {/* Message personnalisé pour les fournisseurs */}\r\n                {selectedRole === ": "auth.optionselectdivmessa3",
  ")}</p>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}            {/* Mot de passe - masqué pour fournisseurs, sourceurs et influenceurs en mode inscription *": "auth.pdivdivmotdepassemas1",
  ")}</p>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}            {/* Mot de passe - masqué pour fournisseurs, sourceurs et influenceurs en mode inscription */}\r\n            {(isLoginMode || (selectedRole !== ": "auth.pdivdivmotdepassemas2",
  ")}</p>\r\n                    </div>\r\n                  </div>\r\n                )}                {/* Message personnalisé pour les influenceurs *": "common.pdivdivmessageperson",
  ")}</p>\r\n                    </div>\r\n                  </div>\r\n                )}                {/* Message personnalisé pour les influenceurs */}\r\n                {selectedRole === ": "common.pdivdivmessageperson1",
  ")}</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">{productsList.length}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center\">\r\n            <Eye className=\"w-8 h-8 text-green-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">Vues ce mois</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">12,453</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center\">\r\n            <Star className=\"w-8 h-8 text-yellow-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">Note moyenne</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">4.2/5</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center\">\r\n            <Filter className=\"w-8 h-8 text-purple-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">En stock</p>\r\n              <p className=\"text-2xl font-bold text-gray-900\">{Math.floor(productsList.length * 0.8)}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Liste des produits */}\r\n      <div className=\"bg-white rounded-lg shadow-sm border\">\r\n        <div className=\"p-4 border-b\">\r\n          <h2 className=\"text-lg font-semibold text-gray-900\">\r\n            Produits ({filteredProducts.length})\r\n          </h2>\r\n        </div>\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Produit\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Catégorie\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Prix\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Stock\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Actions\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {filteredProducts.map((product) => (\r\n                <tr key={product.id} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <div className=\"flex items-center\">\r\n                      <img\r\n                        className=\"h-10 w-10 rounded-lg object-cover\"\r\n                        src={product.images?.[0] || ": "forms.ppclassnametext2xlfo",
  ")}</p>\r\n            <div className=\"flex flex-col gap-1\">\r\n              <div className=\"flex items-center gap-2 text-sm text-green-600\">\r\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n                Sauvegarde automatique activée\r\n              </div>\r\n              <div className=\"flex items-center gap-2 text-sm text-blue-600\">\r\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\r\n                Synchronisé avec l": "forms.pdivclassnameflexfle",
  ")}</p>\r\n          <div className=\"flex flex-col gap-1\">\r\n            <div className=\"flex items-center gap-2 text-sm text-green-600\">\r\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n              Sauvegarde automatique activée\r\n            </div>\r\n            <div className=\"flex items-center gap-2 text-sm text-blue-600\">\r\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\r\n              Synchronisé avec l": "forms.pdivclassnameflexfle1",
  ")}</p>\r\n      </div>\r\n\r\n      {/* Statistiques */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\r\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center\">\r\n            <ShoppingBag className=\"w-8 h-8 text-blue-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">Total</p>\r\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{stats.total}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center\">\r\n            <Clock className=\"w-8 h-8 text-yellow-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">En attente</p>\r\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{stats.pending}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center\">\r\n            <CheckCircle className=\"w-8 h-8 text-green-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">Confirmées</p>\r\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{stats.confirmed}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center\">\r\n            <Package className=\"w-8 h-8 text-orange-500\" />\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">Expédiées</p>\r\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">{stats.shipped}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-8 h-8 text-green-600 font-bold text-lg\">¥</div>\r\n            <div className=\"ml-4\">\r\n              <p className=\"text-sm font-medium text-gray-600\">Chiffre d": "forms.pdivstatistiquesdivc",
  ")}</span>\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>      {/* Modal de précommande */}\r\n      {selectedContainer && (\r\n        <PreorderContainerModal\r\n          container={selectedContainer}\r\n          isOpen={isModalOpen}\r\n          onClose={handleCloseModal}\r\n          onPreorder={handlePreorderSubmit}\r\n        />\r\n      )}\r\n\r\n      {/* Nouveau modal de réservation interactif *": "ecommerce.spanbuttondivdivdivm1",
  ")}</span>\r\n                  </label>                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Champs spécifiques pour les fournisseurs *": "ecommerce.spanlabeldivdivchamp1",
  ")}</span>\r\n                  </label>                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Champs spécifiques pour les fournisseurs */}\r\n            {!isLoginMode && selectedRole === ": "auth.spanlabeldivdivchamp",
  ")}</span>\r\n            </div>\r\n            \r\n            <GoogleSignInButton\r\n              onSuccess={() => {\r\n                // La redirection sera gérée automatiquement par l": "common.spandivgooglesigninb1",
  ",\n\n    // Traductions manquantes pour le tableau de bord fournisseur\n    ": "admin.traductionsmanquante1",
  ",\n\n    // Traductions pour la gestion des produits\n    ": "ecommerce.traductionspourlages",
  ",\n\n    // Traductions pour les filtres de recherche\n    ": "common.traductionspourlesfi",
  ",\n\n    // Traductions pour les messages\n    ": "common.traductionspourlesme",
  ",\n\n    // Traductions pour les paramètres\n    ": "admin.traductionspourlespa2",
  ",\n\n    // Traduções comuns\n    ": "common.traducescomuns1",
  ",\n\n    // Traduções de contêineres\n    ": "common.traducesdeconteinere1",
  ",\n            favorites: [],\n            browsingHistory: [],\n            messages: [],\n            created_at: ": "common.favoritesbrowsinghis",
  ",\n          favorites: [],\n          messages: [],\n          browsingHistory: [],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        await setDoc(userDocRef, userData);\n        return { user: userData, error: null };\n      } else {\n        // Récupérer les données existantes de Firestore\n        const userData = userDoc.data() as User;\n        const hydratedUser: User = {\n          ...userData,\n          favorites: userData.favorites || [],\n          messages: userData.messages || [],\n          browsingHistory: userData.browsingHistory || []\n        };\n        return { user: hydratedUser, error: null };\n      }\n    } catch (error) {\n      console.error(": "admin.favoritesmessagesbro2",
  ",\n        favorites: [],\n        browsingHistory: [],\n        messages: [],\n        subscription: ": "common.favoritesbrowsinghis2",
  ",\n        favorites: [],\n        messages: [],\n        browsingHistory: [],\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n\n      await setDoc(doc(db, ": "common.favoritesmessagesbro",
  ",\r\n\r\n        // Informations détaillées du profil\r\n        monthlySalesVolume: profile?.monthly_sales_volume || ": "common.informationsdetaille2",
  ",\r\n                        favorites: [],\r\n                        browsingHistory: [],\r\n                        messages: [],\r\n                        subscription: ": "common.favoritesbrowsinghis3",
  ",\r\n                        supplier: product.supplier,\r\n                        description: product.description,\r\n                        variants: product.variants.map(v => v.name),\r\n                        stock: product.stock,\r\n                        tags: product.tags,\r\n                        discount: product.discount\r\n                    };\r\n                })\r\n                .filter(product => product.id !== productId) // Exclure le produit actuel\r\n                .slice(0, limitCount); // Limiter au nombre demandé\r\n\r\n            return products;\r\n        } catch (error) {\r\n            console.error(": "forms.supplierproductsuppl1",
  ",\r\n                    contactPerson: ": "common.contactperson",
  ",\r\n                    createdAt: currentUser.metadata.creationTime || new Date().toISOString(),\r\n                    updatedAt: new Date().toISOString(),\r\n                    created_at: currentUser.metadata.creationTime || new Date().toISOString(),\r\n                    updated_at: new Date().toISOString()\r\n                    // lastLogin: undefined -> SUPPRIMÉ car Firestore ne supporte pas undefined\r\n                };\r\n\r\n                await setDoc(userDocRef, currentUserProfile);\r\n                console.log(": "auth.createdatcurrentuser2",
  ",\r\n                    createdAt: firebaseUser.metadata.creationTime || new Date().toISOString(),\r\n                    updatedAt: new Date().toISOString(),\r\n                    created_at: firebaseUser.metadata.creationTime || new Date().toISOString(),\r\n                    updated_at: new Date().toISOString(),\r\n                    lastLogin: new Date().toISOString()\r\n                };\r\n\r\n                await setDoc(userDocRef, userProfile);\r\n                console.log(`✅ Utilisateur synchronisé dans Firestore: ${firebaseUser.email}`);\r\n            } else {\r\n                // Mettre à jour la dernière connexion\r\n                await updateDoc(userDocRef, {\r\n                    lastLogin: new Date().toISOString(),\r\n                    updated_at: new Date().toISOString()\r\n                });\r\n                console.log(`🔄 Dernière connexion mise à jour: ${firebaseUser.email}`);\r\n            }\r\n        } catch (error: any) {\r\n            console.error(`❌ Erreur synchronisation ${firebaseUser.email}:`, error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtenir un résumé des utilisateurs du système\r\n     *": "auth.createdatfirebaseuse1",
  ",\r\n                    createdAt: firebaseUser.metadata.creationTime || new Date().toISOString(),\r\n                    updatedAt: new Date().toISOString(),\r\n                    created_at: firebaseUser.metadata.creationTime || new Date().toISOString(),\r\n                    updated_at: new Date().toISOString(),\r\n                    lastLogin: new Date().toISOString()\r\n                };\r\n\r\n                await setDoc(userDocRef, userProfile);\r\n                console.log(`✅ Utilisateur synchronisé dans Firestore: ${firebaseUser.email}`);\r\n            } else {\r\n                // Mettre à jour la dernière connexion\r\n                await updateDoc(userDocRef, {\r\n                    lastLogin: new Date().toISOString(),\r\n                    updated_at: new Date().toISOString()\r\n                });\r\n                console.log(`🔄 Dernière connexion mise à jour: ${firebaseUser.email}`);\r\n            }\r\n        } catch (error: any) {\r\n            console.error(`❌ Erreur synchronisation ${firebaseUser.email}:`, error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtenir un résumé des utilisateurs du système\r\n     */\r\n    public async getUsersSummary(): Promise<ProductionUserSummary> {\r\n        try {\r\n            const usersRef = collection(db, ": "auth.createdatfirebaseuse2",
  ",\r\n                    createdAt: now,\r\n                    updatedAt: now,\r\n                    created_at: now,\r\n                    updated_at: now,\r\n                    // Mot de passe temporaire pour référence (production: Admin SDK)\r\n                    temporaryPassword: testUser.password,\r\n                    authType: ": "auth.createdatnowupdateda1",
  ",\r\n                    favorites: [],\r\n                    browsingHistory: [],\r\n                    messages: [],\r\n                    subscription: ": "common.favoritesbrowsinghis9",
  ",\r\n                    supplier: product.supplier,\r\n                    description: product.description,\r\n                    variants: product.variants.map(v => v.name),\r\n                    stock: product.stock,\r\n                    tags: product.tags,\r\n                    discount: product.discount\r\n                };\r\n            });\r\n\r\n            // Filtrer côté client (pour une recherche plus avancée, utilisez Algolia ou Elasticsearch)\r\n            const searchTermLower = searchTerm.toLowerCase();\r\n            return allProducts.filter(product =>\r\n                product.name.toLowerCase().includes(searchTermLower) ||\r\n                product.description.toLowerCase().includes(searchTermLower) ||\r\n                product.tags.some(tag => tag.toLowerCase().includes(searchTermLower))\r\n            );\r\n        } catch (error) {\r\n            console.error(": "forms.supplierproductsuppl4",
  ",\r\n                    text: `${result.created.length} utilisateurs essentiels créés avec succès`\r\n                });\r\n\r\n                ": "admin.textresultcreatedlen1",
  ",\r\n                    text: `${result.created.length} utilisateurs essentiels créés avec succès`\r\n                });\r\n\r\n                // Afficher les identifiants dans la console\r\n                console.log(": "admin.textresultcreatedlen2",
  ",\r\n                    text: `${result.deletedCount} utilisateurs supprimés avec succès`\r\n                });\r\n            } else {\r\n                setMessage({\r\n                    type: ": "forms.textresultdeletedcou2",
  ",\r\n                    text: `Création partielle: ${result.created.length} créés, ${result.failed.length} échecs`\r\n                });\r\n            }\r\n\r\n        } catch (error: any) {\r\n            console.error(": "common.textcreationpartiell1",
  ",\r\n                    text: `Suppression partielle: ${result.deletedCount} supprimés, ${result.errors.length} erreurs`\r\n                });\r\n            }\r\n\r\n            await loadSummary();\r\n\r\n        } catch (error: any) {\r\n            console.error(": "forms.textsuppressionparti1",
  ",\r\n                    text: `Utilisateur ${newUser.email} créé avec succès`\r\n                });\r\n\r\n                // Réinitialiser le formulaire\r\n                setNewUser({\r\n                    email: ": "auth.textutilisateurnewus1",
  ",\r\n                createdAt: firebaseUser.metadata.creationTime || new Date().toISOString(),\r\n                updatedAt: new Date().toISOString(),\r\n                created_at: firebaseUser.metadata.creationTime || new Date().toISOString(),\r\n                updated_at: new Date().toISOString()\r\n                // lastLogin: undefined -> SUPPRIMÉ car Firestore ne supporte pas undefined\r\n            };\r\n\r\n            await setDoc(doc(db, this.collectionName, firebaseUser.uid), userProfile);\r\n            console.log(": "auth.createdatfirebaseuse5",
  ",\r\n                createdAt: new Date().toISOString(),\r\n                updatedAt: new Date().toISOString(),\r\n                created_at: new Date().toISOString(),\r\n                updated_at: new Date().toISOString()\r\n                // last_login: undefined -> SUPPRIMÉ car Firestore ne supporte pas undefined\r\n            };\r\n\r\n            await setDoc(doc(db, this.collectionName, tempUID), userDoc);\r\n            console.log(": "auth.createdatnewdatetois2",
  ",\r\n                createdAt: new Date().toISOString(),\r\n                updatedAt: new Date().toISOString(),\r\n                created_at: new Date().toISOString(),\r\n                updated_at: new Date().toISOString()\r\n                // last_login: undefined -> SUPPRIMÉ car Firestore ne supporte pas undefined\r\n            };\r\n\r\n            await setDoc(doc(db, this.collectionName, uid), userDoc);\r\n            console.log(": "auth.createdatnewdatetois5",
  ",\r\n                createdAt: new Date().toISOString(),\r\n                updatedAt: new Date().toISOString(),\r\n                created_at: new Date().toISOString(),\r\n                updated_at: new Date().toISOString(),\r\n                // Note: En production, utiliser Firebase Admin SDK pour créer dans Auth\r\n                userType: ": "admin.createdatnewdatetois2",
  ",\r\n                createdAt: now,\r\n                updatedAt: now,\r\n                created_at: now,\r\n                updated_at: now\r\n            };\r\n\r\n            // Sauvegarder en base de données\r\n            await setDoc(doc(db, this.collectionName, uid), userDocument);\r\n\r\n            console.log(": "forms.createdatnowupdateda1",
  ",\r\n                createdAt: userDoc.exists() ? userDoc.data().createdAt : new Date().toISOString(),\r\n                updatedAt: new Date().toISOString(),\r\n                created_at: userDoc.exists() ? userDoc.data().created_at : new Date().toISOString(),\r\n                updated_at: new Date().toISOString(),\r\n                lastLogin: new Date().toISOString()\r\n            };\r\n\r\n            if (userDoc.exists()) {\r\n                // Mettre à jour l": "auth.createdatuserdocexis1",
  ",\r\n                favorites: [],\r\n                browsingHistory: [],\r\n                messages: [],\r\n                subscription: ": "common.favoritesbrowsinghis19",
  ",\r\n                favorites: [],\r\n                browsingHistory: [],\r\n                messages: [],\r\n                subscription: userData.role === ": "admin.favoritesbrowsinghis",
  ",\r\n                text: `Erreur: ${error.message}`\r\n            });\r\n        } finally {\r\n            setIsCreating(false);\r\n        }\r\n    };\r\n\r\n    const downloadCredentials = () => {\r\n        const content = `\r\nIDENTIFIANTS CHINE TON USINE - PRODUCTION\r\n=====================================\r\n\r\nADMINISTRATEURS:\r\n• admin@chinetonusine.com | ProductionAdmin2024!\r\n• admin.backup@chinetonusine.com | BackupAdmin2024!\r\n• support@chinetonusine.com | SupportTeam2024!\r\n\r\nLIENS:\r\n• Connexion: ${window.location.origin}/login\r\n• Admin: ${window.location.origin}/admin/dashboard\r\n\r\nSÉCURITÉ:\r\n• Changez les mots de passe dès la première connexion\r\n• Ne partagez jamais ces identifiants\r\n• Surveillez les connexions suspectes\r\n\r\nDate de génération: ${new Date().toLocaleString()}\r\n`;\r\n\r\n        const blob = new Blob([content], { type: ": "auth.texterreurerrormessa2",
  ",\r\n                text: `Erreur: ${error.message}`\r\n            });\r\n        } finally {\r\n            setIsCreating(false);\r\n        }\r\n    };\r\n\r\n    const handlePurgeUsers = async () => {\r\n        const confirmed = confirm(`\r\n⚠️ ATTENTION: OPÉRATION IRRÉVERSIBLE\r\n\r\nVous allez supprimer TOUS les utilisateurs existants.\r\n\r\nCette action ne peut pas être annulée.\r\n\r\nÊtes-vous absolument certain de vouloir continuer ?`);\r\n\r\n        if (!confirmed) return;\r\n\r\n        setIsPurging(true);\r\n        setMessage(null);\r\n\r\n        try {\r\n            if (!(window as any).productionUserService) {\r\n                throw new Error(": "forms.texterreurerrormessa2",
  ",\r\n            cacheKey: `companies-search-${searchTerm}`,\r\n            cacheTTL: 60000 // 1 minute pour les recherches\r\n        }\r\n    );\r\n\r\n    ": "common.cachekeycompaniessea",
  ",\r\n            cacheKey: `companies-search-${searchTerm}`,\r\n            cacheTTL: 60000 // 1 minute pour les recherches\r\n        }\r\n    );\r\n\r\n    // Filtrage mémorisé pour éviter les recalculs inutiles\r\n    const filteredCompanies = useMemo(() => {\r\n        let companies = searchTerm ? searchResults : allCompanies;\r\n\r\n        if (!companies) return [];\r\n\r\n        if (statusFilter !== ": "common.cachekeycompaniessea2",
  ",\r\n            commission: 80\r\n        }\r\n    ];\r\n\r\n    const copyToClipboard = (text: string, type: string) => {\r\n        navigator.clipboard.writeText(text);\r\n        showToast(`${type} copié dans le presse-papier !`, ": "common.commission80constcop1",
  ",\r\n            favorites: [],\r\n            browsingHistory: [],\r\n            messages: [],\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n            last_login: new Date().toISOString(),\r\n            subscription: ": "auth.favoritesbrowsinghis",
  ",\r\n            priceRange: { min: 0, max: 10 },\r\n            moqRange: { min: 0, max: 500 }\r\n        });\r\n    };\r\n\r\n    // Affichage du chargement\r\n    if (loading) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Affichage des erreurs\r\n    if (error) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                    <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\r\n                        Erreur de chargement\r\n                    </h2>\r\n                    <p className=\"text-gray-600 dark:text-gray-400 mb-6\">{error}</p>\r\n                    <button\r\n                        onClick={() => window.location.reload()}\r\n                        className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors\"\r\n                    >\r\n                        Réessayer\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n            {/* Header avec filtres */}\r\n            <div className=\"bg-white dark:bg-gray-800 shadow-lg border-b border-gray-200 dark:border-gray-700 sticky top-0 z-40\">\r\n                <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n                    <div className=\"flex flex-col lg:flex-row lg:items-center justify-between gap-6\">\r\n                        <div>\r\n                            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\r\n                                Catalogue B2B\r\n                            </h1>\r\n                            <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n                                {filteredProducts.length} produits disponibles\r\n                            </p>\r\n                        </div>\r\n\r\n                        <button\r\n                            onClick={() => setShowFilters(!showFilters)}\r\n                            className=\"flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all duration-300 font-medium shadow-lg\"\r\n                        >\r\n                            <Filter size={20} />\r\n                            <span>Filtres</span>\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Filtres */}\r\n                    {showFilters && (\r\n                        <div className=\"mt-6 p-6 bg-gray-50 dark:bg-gray-700 rounded-xl border border-gray-200 dark:border-gray-600\">\r\n                            <div className=\"flex justify-between items-center mb-4\">\r\n                                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Filtres</h3>\r\n                                <button\r\n                                    onClick={clearFilters}\r\n                                    className=\"text-blue-600 hover:text-blue-700 font-medium\"\r\n                                >\r\n                                    Réinitialiser\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n                                {/* Catégorie */}\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        Catégorie\r\n                                    </label>\r\n                                    <select\r\n                                        value={filters.category}\r\n                                        onChange={(e) => updateFilters({ category: e.target.value })}\r\n                                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                    >\r\n                                        {categories.map(category => (\r\n                                            <option key={category} value={category}>{category}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n\r\n                                {/* Prix */}\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        Prix (€)\r\n                                    </label>\r\n                                    <div className=\"flex gap-2\">\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Min\"\r\n                                            value={filters.priceRange.min}\r\n                                            onChange={(e) => updateFilters({\r\n                                                priceRange: { ...filters.priceRange, min: Number(e.target.value) }\r\n                                            })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Max\"\r\n                                            value={filters.priceRange.max}\r\n                                            onChange={(e) => updateFilters({\r\n                                                priceRange: { ...filters.priceRange, max: Number(e.target.value) }\r\n                                            })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* MOQ */}\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        MOQ (Quantité minimum)\r\n                                    </label>\r\n                                    <div className=\"flex gap-2\">\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Min\"\r\n                                            value={moqRange.min}\r\n                                            onChange={(e) => setMoqRange(prev => ({ ...prev, min: Number(e.target.value) }))}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Max\"\r\n                                            value={moqRange.max}\r\n                                            onChange={(e) => setMoqRange(prev => ({ ...prev, max: Number(e.target.value) }))}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Grille de produits */}\r\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                    {filteredProducts.map((product) => {\r\n                        const quantity = getQuantity(product.id);\r\n                        const total = calculateTotal(product, quantity);\r\n                        const hasDiscount = product.discount && quantity >= product.discount.minQty;\r\n\r\n                        return (\r\n                            <div\r\n                                key={product.id}\r\n                                className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border border-gray-200 dark:border-gray-700 overflow-hidden group\"\r\n                            >\r\n                                {/* Image du produit */}\r\n                                <div className=\"relative overflow-hidden\">\r\n                                    <img\r\n                                        src={product.image}\r\n                                        alt={product.name}\r\n                                        className=\"w-full h-48 object-cover transition-transform duration-300 group-hover:scale-110\"\r\n                                    />\r\n\r\n                                    {/* Boutons en overlay */}\r\n                                    <div className=\"absolute top-4 right-4 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\r\n                                        <button\r\n                                            onClick={() => toggleFavorite(product.id)}\r\n                                            className={`p-2 rounded-full transition-all duration-300 ${favorites.has(product.id)\r\n                                                ? ": "forms.pricerangemin0max10m",
  ",\r\n            priceRange: { min: 0, max: 10 },\r\n            moqRange: { min: 0, max: 500 }\r\n        });\r\n    };\r\n\r\n    // Affichage du chargement\r\n    if (loading) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Affichage des erreurs\r\n    if (error) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                    <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">Erreur</h2>\r\n                    <p className=\"text-gray-600 dark:text-gray-400\">{error}</p>\r\n                    <button\r\n                        onClick={() => window.location.reload()}\r\n                        className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\r\n                    >\r\n                        Réessayer\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n            {/* En-tête avec filtres */}\r\n            <div className=\"bg-white dark:bg-gray-800 shadow-sm\">\r\n                <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n                    <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\r\n                        <div>\r\n                            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\r\n                                Produits B2B\r\n                            </h1>\r\n                            <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\r\n                                {filteredProducts.length} produits disponibles\r\n                            </p>\r\n                        </div>\r\n\r\n                        <button\r\n                            onClick={() => setShowFilters(!showFilters)}\r\n                            className=\"inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n                        >\r\n                            <Filter size={20} />\r\n                            Filtres\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Panneau de filtres */}\r\n                    {showFilters && (\r\n                        <div className=\"mt-6 p-6 bg-gray-50 dark:bg-gray-700 rounded-xl\">\r\n                            <div className=\"flex items-center justify-between mb-4\">\r\n                                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                                    Filtres\r\n                                </h3>\r\n                                <button\r\n                                    onClick={() => setShowFilters(false)}\r\n                                    className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\r\n                                >\r\n                                    <X size={20} />\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n                                {/* Catégorie */}\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        Catégorie\r\n                                    </label>\r\n                                    <select\r\n                                        value={filters.category}\r\n                                        onChange={(e) => updateFilters({ category: e.target.value })}\r\n                                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                    >\r\n                                        {categories.map(category => (\r\n                                            <option key={category} value={category}>{category}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n\r\n                                {/* Prix */}\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        Prix (€)\r\n                                    </label>\r\n                                    <div className=\"flex gap-2\">\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Min\"\r\n                                            value={filters.priceRange.min}\r\n                                            onChange={(e) => updateFilters({\r\n                                                priceRange: { ...filters.priceRange, min: Number(e.target.value) }\r\n                                            })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Max\"\r\n                                            value={filters.priceRange.max}\r\n                                            onChange={(e) => updateFilters({\r\n                                                priceRange: { ...filters.priceRange, max: Number(e.target.value) }\r\n                                            })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* MOQ */}\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        MOQ (Quantité minimum)\r\n                                    </label>\r\n                                    <div className=\"flex gap-2\">\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Min\"\r\n                                            value={filters.moqRange?.min || 0}\r\n                                            onChange={(e) => updateFilters({\r\n                                                moqRange: { ...filters.moqRange, min: Number(e.target.value) }\r\n                                            })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Max\"\r\n                                            value={filters.moqRange?.max || 1000}\r\n                                            onChange={(e) => updateFilters({\r\n                                                moqRange: { ...filters.moqRange, max: Number(e.target.value) }\r\n                                            })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Grille de produits */}\r\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                    {filteredProducts.map((product) => {\r\n                        const quantity = getQuantity(product.id!);\r\n                        const total = calculateTotal(product, quantity);\r\n                        const hasDiscount = product.discount && quantity >= product.discount.minQty;\r\n                        const isProductInQuote = getItemQuantity(product.id!) > 0;\r\n\r\n                        return (\r\n                            <div\r\n                                key={product.id}\r\n                                className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border border-gray-200 dark:border-gray-700 overflow-hidden group\"\r\n                            >\r\n                                {/* Image du produit */}\r\n                                <div className=\"relative overflow-hidden\">\r\n                                    <img\r\n                                        src={product.image}\r\n                                        alt={product.name}\r\n                                        className=\"w-full h-48 object-cover transition-transform duration-300 group-hover:scale-110\"\r\n                                    />\r\n\r\n                                    {/* Boutons en overlay */}\r\n                                    <div className=\"absolute top-4 right-4 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\r\n                                        <button\r\n                                            onClick={() => toggleFavorite(product.id!)}\r\n                                            className={`p-2 rounded-full transition-all duration-300 ${isFavorite(product.id!)\r\n                                                ? ": "forms.pricerangemin0max10m1",
  ",\r\n            priceRange: { min: 0, max: 10 },\r\n            moqRange: { min: 0, max: 500 }\r\n        });\r\n    };\r\n\r\n    // Affichage du chargement\r\n    if (loading) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Affichage des erreurs\r\n    if (error) {\r\n        return (\r\n            <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                    <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">Erreur</h2>\r\n                    <p className=\"text-gray-600 dark:text-gray-400\">{error}</p>\r\n                    <button\r\n                        onClick={() => window.location.reload()}\r\n                        className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\r\n                    >\r\n                        Réessayer\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n            {/* En-tête avec filtres */}\r\n            <div className=\"bg-white dark:bg-gray-800 shadow-sm\">\r\n                <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n                    <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\r\n                        <div>\r\n                            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\r\n                                Produits B2B\r\n                            </h1>\r\n                            <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\r\n                                {filteredProducts.length} produits disponibles\r\n                            </p>\r\n                        </div>\r\n\r\n                        <button\r\n                            onClick={() => setShowFilters(!showFilters)}\r\n                            className=\"inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n                        >\r\n                            <Filter size={20} />\r\n                            Filtres\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Panneau de filtres */}\r\n                    {showFilters && (\r\n                        <div className=\"mt-6 p-6 bg-gray-50 dark:bg-gray-700 rounded-xl\">\r\n                            <div className=\"flex items-center justify-between mb-4\">\r\n                                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                                    Filtres\r\n                                </h3>\r\n                                <button\r\n                                    onClick={() => setShowFilters(false)}\r\n                                    className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\r\n                                >\r\n                                    <X size={20} />\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n                                {/* Catégorie */}\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        Catégorie\r\n                                    </label>\r\n                                    <select\r\n                                        value={filters.category}\r\n                                        onChange={(e) => updateFilters({ category: e.target.value })}\r\n                                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                    >\r\n                                        {categories.map(category => (\r\n                                            <option key={category} value={category}>{category}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n\r\n                                {/* Prix */}\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        Prix (€)\r\n                                    </label>\r\n                                    <div className=\"flex gap-2\">\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Min\"\r\n                                            value={filters.priceRange.min}\r\n                                            onChange={(e) => updateFilters({\r\n                                                priceRange: { ...filters.priceRange, min: Number(e.target.value) }\r\n                                            })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Max\"\r\n                                            value={filters.priceRange.max}\r\n                                            onChange={(e) => updateFilters({\r\n                                                priceRange: { ...filters.priceRange, max: Number(e.target.value) }\r\n                                            })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/* MOQ */}\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        MOQ (Quantité minimum)\r\n                                    </label>\r\n                                    <div className=\"flex gap-2\">\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Min\"\r\n                                            value={filters.moqRange?.min || 0}\r\n                                            onChange={(e) => updateFilters({\r\n                                                moqRange: { ...filters.moqRange, min: Number(e.target.value) }\r\n                                            })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            placeholder=\"Max\"\r\n                                            value={filters.moqRange?.max || 1000}\r\n                                            onChange={(e) => updateFilters({\r\n                                                moqRange: { ...filters.moqRange, max: Number(e.target.value) }\r\n                                            })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Grille de produits */}\r\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n                    {filteredProducts.map((product) => {\r\n                        const quantity = getQuantity(product.id!);\r\n                        const total = calculateTotal(product, quantity);\r\n                        const hasDiscount = product.discount && quantity >= product.discount.minQty;\r\n                        const isProductInQuote = getItemQuantity(product.id!) > 0;\r\n\r\n                        return (\r\n                            <div\r\n                                key={product.id}\r\n                                className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border border-gray-200 dark:border-gray-700 overflow-hidden group\"\r\n                            >\r\n                                {/* Image du produit */}\r\n                                <div className=\"relative overflow-hidden\">\r\n                                    <img\r\n                                        src={product.image}\r\n                                        alt={product.name}\r\n                                        className=\"w-full h-48 object-cover transition-transform duration-300 group-hover:scale-110\"\r\n                                    />\r\n\r\n                                    {/* Boutons en overlay */}\r\n                                    <div className=\"absolute top-4 right-4 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                toggleFavorite(product.id!);\r\n                                                const isFav = isFavorite(product.id!);\r\n                                                showToast(\r\n                                                    isFav ? `${product.name} retiré des favoris` : `${product.name} ajouté aux favoris`,\r\n                                                    ": "forms.pricerangemin0max10m2",
  ",\r\n            verified: false\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"space-y-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n                <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                    Rechercher un influenceur\r\n                </h2>\r\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                    {filteredInfluencers.length} résultat(s) trouvé(s)\r\n                </div>\r\n            </div>\r\n\r\n            {/* Barre de recherche */}\r\n            <div className=\"flex gap-4\">\r\n                <div className=\"flex-1 relative\">\r\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Rechercher par nom ou description...\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                        className=\"w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    />\r\n                </div>\r\n                <button\r\n                    onClick={() => setShowFilters(!showFilters)}\r\n                    className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2\"\r\n                >\r\n                    <Filter size={20} />\r\n                    Filtres\r\n                </button>\r\n            </div>\r\n\r\n            {/* Filtres */}\r\n            {showFilters && (\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700\">\r\n                    <div className=\"flex items-center justify-between mb-4\">\r\n                        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                            Filtres de recherche\r\n                        </h3>\r\n                        <button\r\n                            onClick={clearFilters}\r\n                            className=\"text-blue-600 dark:text-blue-400 hover:text-blue-700 text-sm\"\r\n                        >\r\n                            Réinitialiser\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                        <div>\r\n                            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                Catégorie\r\n                            </label>\r\n                            <select\r\n                                value={filters.category}\r\n                                onChange={(e) => setFilters({ ...filters, category: e.target.value })}\r\n                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                            >\r\n                                <option value=\"\">Toutes les catégories</option>\r\n                                {categories.map(cat => (\r\n                                    <option key={cat} value={cat}>{cat}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                Pays\r\n                            </label>\r\n                            <select\r\n                                value={filters.country}\r\n                                onChange={(e) => setFilters({ ...filters, country: e.target.value })}\r\n                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                            >\r\n                                <option value=\"\">Tous les pays</option>\r\n                                {countries.map(country => (\r\n                                    <option key={country} value={country}>{country}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                Followers minimum\r\n                            </label>\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Ex: 50000\"\r\n                                value={filters.minFollowers}\r\n                                onChange={(e) => setFilters({ ...filters, minFollowers: e.target.value })}\r\n                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                Prix maximum (€)\r\n                            </label>\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Ex: 2000\"\r\n                                value={filters.maxPrice}\r\n                                onChange={(e) => setFilters({ ...filters, maxPrice: e.target.value })}\r\n                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"mt-4\">\r\n                        <label className=\"flex items-center gap-2\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={filters.verified}\r\n                                onChange={(e) => setFilters({ ...filters, verified: e.target.checked })}\r\n                                className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                            />\r\n                            <span className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                                Comptes vérifiés uniquement\r\n                            </span>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Résultats */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n                {filteredInfluencers.map((influencer) => (\r\n                    <div\r\n                        key={influencer.id}\r\n                        className=\"bg-white dark:bg-gray-800 rounded-2xl overflow-hidden border border-gray-200 dark:border-gray-700 hover:shadow-xl transition-all duration-300\"\r\n                    >\r\n                        <div className=\"relative\">\r\n                            <img\r\n                                src={influencer.image}\r\n                                alt={influencer.name}\r\n                                className=\"w-full h-48 object-cover\"\r\n                            />\r\n                            {influencer.verified && (\r\n                                <div className=\"absolute top-4 right-4 bg-blue-500 text-white p-2 rounded-full\">\r\n                                    <Star size={16} fill=\"currentColor\" />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className=\"p-6\">\r\n                            <div className=\"mb-3\">\r\n                                <h3 className=\"text-lg font-bold text-gray-900 dark:text-white mb-1\">\r\n                                    {influencer.name}\r\n                                </h3>\r\n                                <div className=\"flex items-center gap-2 text-gray-500 dark:text-gray-400 text-sm\">\r\n                                    <MapPin size={14} />\r\n                                    <span>{influencer.country}</span>\r\n                                    <span className=\"mx-1\">•</span>\r\n                                    <span className=\"bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 px-2 py-1 rounded-full text-xs\">\r\n                                        {influencer.category}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-2\">\r\n                                {influencer.description}\r\n                            </p>\r\n\r\n                            <div className=\"grid grid-cols-3 gap-2 mb-4 text-center\">\r\n                                <div>\r\n                                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">Followers</div>\r\n                                    <div className=\"font-bold text-gray-900 dark:text-white text-sm\">\r\n                                        {formatFollowers(influencer.followers)}\r\n                                    </div>\r\n                                </div>\r\n                                <div>\r\n                                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">Engagement</div>\r\n                                    <div className=\"font-bold text-gray-900 dark:text-white text-sm\">\r\n                                        {influencer.engagement}%\r\n                                    </div>\r\n                                </div>\r\n                                <div>\r\n                                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">Post</div>\r\n                                    <div className=\"font-bold text-blue-600 dark:text-blue-400 text-sm\">\r\n                                        {influencer.pricePerPost}€\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"flex gap-2\">\r\n                                <button className=\"flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm\">\r\n                                    Contacter\r\n                                </button>\r\n                                <button className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-sm\">\r\n                                    Voir plus\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {filteredInfluencers.length === 0 && (\r\n                <div className=\"text-center py-12\">\r\n                    <div className=\"text-gray-400 mb-4\">\r\n                        <Search size={64} className=\"mx-auto\" />\r\n                    </div>\r\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\r\n                        Aucun influenceur trouvé\r\n                    </h3>\r\n                    <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\r\n                        Essayez de modifier vos critères de recherche\r\n                    </p>\r\n                    <button\r\n                        onClick={() => {\r\n                            setSearchTerm(": "forms.verifiedfalsereturnd",
  ",\r\n          maxWidth: 1200,\r\n          maxHeight: 1200,\r\n          quality: 0.8,\r\n          maxSize: 5 // 5MB max par image\r\n        }\r\n      );      const uploadedUrls = results\r\n        .filter(result => result.success)\r\n        .map(result => result.url!)\r\n        .filter(Boolean);\r\n\r\n      // Mettre à jour les images du formulaire\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        images: [...prev.images, ...uploadedUrls]\r\n      }));\r\n\r\n      return uploadedUrls;\r\n    } catch (error) {\r\n      console.error(": "common.maxwidth1200maxheigh1",
  ",\r\n        cacheKey: `profile-${prospect.id}`\r\n    });\r\n\r\n    const profile = useMemo(() => profiles?.[0], [profiles]);\r\n\r\n    const [formData, setFormData] = React.useState(() => ({\r\n        // Informations de base\r\n        name: prospect.name || ": "forms.cachekeyprofileprosp",
  ",\r\n        cacheTTL: 300000 // 5 minutes\r\n    });\r\n\r\n    // Mémorisation des calculs\r\n    const stats = useMemo(() => ({\r\n        activeClientsCount: companies?.length || 0,\r\n        productsCount: products?.length || 0,\r\n        pendingQuotesCount: quotes?.length || 0,\r\n        upcomingAppointmentsCount: appointments?.length || 0\r\n    }), [companies, products, quotes, appointments]);\r\n\r\n    const trends = useMemo(() => ({\r\n        clientsTrend: { value: 12, isPositive: true },\r\n        quotesTrend: { value: 5, isPositive: true },\r\n        appointmentsTrend: { value: 2, isPositive: false }\r\n    }), []);\r\n\r\n    return (\r\n        <div className=": "forms.cachettl3000005minut",
  ",\r\n        cacheTTL: 300000 // 5 minutes\r\n    });\r\n\r\n    // Mémorisation des calculs\r\n    const stats = useMemo(() => ({\r\n        activeClientsCount: companies?.length || 0,\r\n        productsCount: products?.length || 0,\r\n        pendingQuotesCount: quotes?.length || 0,\r\n        upcomingAppointmentsCount: appointments?.length || 0\r\n    }), [companies, products, quotes, appointments]);\r\n\r\n    const trends = useMemo(() => ({\r\n        clientsTrend: { value: 12, isPositive: true },\r\n        quotesTrend: { value: 5, isPositive: true },\r\n        appointmentsTrend: { value: 2, isPositive: false }\r\n    }), []);\r\n\r\n    return (\r\n        <div className=\"p-4 md:p-6 w-full\">\r\n            <div className=\"mb-6\">\r\n                <h1 className=\"text-2xl font-bold text-gray-900\">{t(": "forms.cachettl3000005minut1",
  ",\r\n        cacheTTL: 300000, // 5 minutes\r\n        enableRealtime: true\r\n    });\r\n\r\n    // Recherche avec debounce pour éviter trop de requêtes\r\n    const { data: searchResults } = useDebouncedSearch<Company>(\r\n        ": "common.cachettl3000005minut2",
  ",\r\n        contactPerson: ": "common.contactperson1",
  ",\r\n        contactPerson: prospect.contact_person || ": "common.contactpersonprospec",
  ",\r\n        createdAt: now,\r\n        updatedAt: now,\r\n        created_at: now,\r\n        updated_at: now,\r\n        // Note: mot de passe stocké pour référence (en production, utiliser Admin SDK)\r\n        temporaryPassword: userData.password,\r\n        authType: ": "auth.createdatnowupdateda3",
  ",\r\n        favorites: [],\r\n        browsingHistory: [],\r\n        messages: [],\r\n        subscription: ": "common.favoritesbrowsinghis23",
  ",\r\n        hasLogisticsVehicles: profile?.has_logistics_vehicles || false,\r\n        vehicleCount: profile?.vehicle_count?.toString() || ": "common.haslogisticsvehicles",
  ",\r\n        hasMerchandising: profile?.has_merchandising || false,\r\n        isTopImporter: profile?.is_top_importer || false,\r\n        hasWarehouses: profile?.has_warehouses || false,\r\n        warehouseCount: profile?.warehouse_count?.toString() || ": "common.hasmerchandisingprof",
  ",\r\n        interestedProducts: prospect.interested_products || [],\r\n        businessType: profile?.business_type || ": "ecommerce.interestedproductspr",
  ",\r\n        isRead: false\r\n      }\r\n    ];\r\n\r\n    try {\r\n      await messagesService.createBatch(testMessages);\r\n      console.log(": "common.isreadfalsetryawaitm",
  ",\r\n        longDescription: `Ce chargeur sans fil nouvelle génération offre une charge rapide et sécurisée pour tous vos appareils compatibles Qi.\r\n\r\nAvec sa puissance de 15W, il charge vos smartphones jusqu": "forms.longdescriptioncecha1",
  ",\r\n        longDescription: `Ce sac à dos business combine fonctionnalité et élégance pour répondre aux besoins des professionnels modernes.\r\n\r\nConçu avec un compartiment dédié pour ordinateurs portables jusqu": "common.longdescriptioncesac",
  ",\r\n        longDescription: `Ces écouteurs True Wireless offrent une expérience audio exceptionnelle avec leur technologie de réduction de bruit active et leur qualité sonore premium.\r\n\r\nÉquipés de la dernière puce Bluetooth 5.0, ils garantissent une connexion stable et une latence minimale. L": "auth.longdescriptioncesec",
  ",\r\n        message: `Réponse reçue de ${supplierName}`,\r\n      });\r\n    }, 2000);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`fixed bottom-4 right-4 w-96 bg-white dark:bg-gray-800 rounded-lg shadow-xl transition-all duration-300 ${\r\n        isMinimized ? ": "forms.messagereponserecued1",
  ",\r\n        notes: profile?.notes || ": "common.notesprofilenotes",
  ",\r\n        phone: supplierData.contact.phone,\r\n        email: supplierData.contact.email,\r\n        website: supplierData.contact.website,\r\n        address: `${supplierData.location.address}, ${supplierData.location.city}, ${supplierData.location.country}`,\r\n        logo: supplierData.logo,\r\n        template: ": "auth.phonesupplierdatacon",
  ",\r\n        specifications: {\r\n          connexion: ": "auth.specificationsconnex",
  ",\r\n        timestamp: new Date(),\r\n        isRead: false,\r\n      };\r\n      setMessages((prev) => [...prev, response]);\r\n      addNotification({\r\n        type: ": "forms.timestampnewdateisre",
  ",\r\n        verified: false\r\n    });\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    const influencers: InfluencerProfile[] = [\r\n        {\r\n            id: ": "common.verifiedfalseconstsh",
  ",\r\n        };\r\n    }\r\n  };\r\n\r\n  const styles = getVariantStyles();\r\n\r\n  return (\r\n    <div className={`w-full ${styles.container} mx-auto ${className}`}>\r\n      <form onSubmit={handleSubmit} className=\"relative\">\r\n        <div className=\"flex items-center bg-white dark:bg-gray-700 rounded-lg shadow-sm border border-gray-300 dark:border-gray-500 overflow-hidden transition-all duration-200 hover:shadow-md focus-within:ring-2 focus-within:ring-blue-500 focus-within:border-blue-500\">\r\n          {/* Icône de recherche */}\r\n          <div className=\"pl-4 pr-3\">\r\n            <Search className={`${styles.icon} text-gray-500 dark:text-gray-300`} />\r\n          </div>\r\n          \r\n          {/* Input de recherche */}\r\n          <input\r\n            type=\"text\"\r\n            value={query}\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            placeholder={placeholder || t(": "forms.conststylesgetvarian",
  ",\r\n      actionUrl: request.actionUrl,\r\n      metadata: request.metadata || {}\r\n    };\r\n\r\n    mockNotifications.unshift(newNotification);\r\n    return newNotification;\r\n  }\r\n\r\n  async deleteNotification(notificationId: string): Promise<void> {\r\n    ": "forms.actionurlrequestacti",
  ",\r\n      content: newMessage,\r\n      timestamp: new Date(),\r\n      isRead: false,\r\n    };\r\n\r\n    setMessages((prev) => [...prev, message]);\r\n    setNewMessage(": "common.contentnewmessagetim",
  ",\r\n      to: conversationMessages[0]?.fromType === ": "common.toconversationmessag",
  ",\r\n    contactEmail: ": "auth.contactemail",
  ",\r\n    contactPerson: ": "common.contactperson2",
  ",\r\n    contactPhone: ": "forms.contactphone1",
  ", // Rôle par défaut\r\n                    isActive: true,\r\n                    language: ": "common.rolepardefautisactiv1",
  ", // Rôle par défaut\r\n                isActive: true,\r\n                language: ": "common.rolepardefautisactiv3",
  ", // Rôle par défaut pour les nouveaux utilisateurs\r\n                    isActive: true,\r\n                    language: ": "admin.rolepardefautpourles2",
  ", // Rôle par défaut pour les nouvelles inscriptions Google\n          language: ": "auth.rolepardefautpourles1",
  ", // Sera remplacé par l": "common.seraremplaceparl1",
  ", Array.from(e.target.selectedOptions, option => option.value))}\r\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n            >\r\n              <option value=\"iso9001\">ISO 9001</option>\r\n              <option value=\"iso14001\">ISO 14001</option>\r\n              <option value=\"ce\">CE</option>\r\n            </select>\r\n          </div>\r\n\r\n          {/* Quantité minimale */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">\r\n              {t(": "forms.arrayfrometargetsele",
  ", JSON.stringify(demoUser));\n\n      // Redirection basée sur le rôle déterminé\n      switch (userRole) {\n        case ": "admin.jsonstringifydemouse1",
  ", JSON.stringify(demoUser));\n      \n      // Simuler le login avec le contexte\n      await login(email.trim(), password.trim());\n\n      // Redirection basée sur le rôle sélectionné\n      switch (selectedRole) {\n        case ": "auth.jsonstringifydemouse1",
  ", JSON.stringify(demoUser));\r\n\r\n      // Connexion avec le rôle déterminé\r\n      await login(email, password);\r\n\r\n      ": "auth.jsonstringifydemouse2",
  ", JSON.stringify(demoUser));\r\n\r\n      // Connexion avec le rôle déterminé\r\n      await login(email, password);\r\n\r\n      // Redirection basée sur le rôle\r\n      const redirectRoute = UniversalAuthService.getRedirectRoute(userRole);\r\n      navigate(redirectRoute);\r\n\r\n      console.log(": "auth.jsonstringifydemouse4",
  ", JSON.stringify(demoUser));\r\n\r\n      // Inscription avec le rôle déterminé\r\n      await register(email, password, name, userRole);\r\n\r\n      // Redirection basée sur le rôle\r\n      const redirectRoute = UniversalAuthService.getRedirectRoute(userRole);\r\n      navigate(redirectRoute);\r\n\r\n      console.log(": "auth.jsonstringifydemouse8",
  ", [filters.priceRange[0], Number(e.target.value)])}\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Catégories */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">\r\n              {t(": "forms.filterspricerange0nu",
  ", collabRef.id);\r\n        }\r\n\r\n        // Créer quelques filleuls de test\r\n        const referrals = [\r\n            {\r\n                influencerId: profileRef.id,\r\n                referralCode: ": "common.collabrefidcreerquel",
  ", containerId);\r\n        // En production, ceci ferait un appel API pour supprimer\r\n        alert(": "forms.containeridenproduct",
  ", currentUser.email);\r\n\r\n                const currentUserProfile: AdminUser = {\r\n                    uid: currentUser.uid,\r\n                    id: currentUser.uid,\r\n                    email: currentUser.email || ": "auth.currentuseremailcons",
  ", currentUser.email);\r\n\r\n            // SOLUTION TEMPORAIRE: Créer seulement dans Firestore\r\n            ": "auth.currentuseremailsolu",
  ", document.name);\r\n    \r\n    // Créer un lien de téléchargement fictif\r\n    const link = window.document.createElement(": "forms.documentnamecreerunl2",
  ", document.name);\r\n    \r\n    if (document.url) {\r\n      // Télécharger le vrai fichier\r\n      const link = window.document.createElement(": "forms.documentnameifdocume1",
  ", e.target.value)}\r\n                                placeholder=\"Minimum 6 caractères\"\r\n                                className={`pl-10 pr-10 ${errors.password ? ": "auth.etargetvalueplacehol",
  ", e.target.value)}\r\n                            className=\"w-full px-3 py-2 pr-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                            placeholder=\"Minimum 6 caractères\"\r\n                        />\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setShowPassword(!showPassword)}\r\n                            className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\r\n                        >\r\n                            {showPassword ? <EyeOff className=\"h-4 w-4 text-gray-400\" /> : <Eye className=\"h-4 w-4 text-gray-400\" />}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Boutons d": "auth.etargetvalueclassnam",
  ", e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\r\n            />\r\n          </div>\r\n          \r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n              Téléphone\r\n            </label>\r\n            <input\r\n              type=\"tel\"\r\n              value={settings.company.phone}\r\n              onChange={(e) => handleInputChange(": "forms.etargetvalueclassnam",
  ", e.target.value)}\r\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n        >\r\n          <option value=\"fr\">Français</option>\r\n          <option value=\"en\">English</option>\r\n          <option value=\"zh\">中文</option>\r\n          <option value=\"es\">Español</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div>\r\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n          Devise par défaut\r\n        </label>\r\n        <select\r\n          value={settings.defaultCurrency}\r\n          onChange={(e) => updateSetting(": "forms.etargetvalueclassnam1",
  ", e.target.value)}\r\n          rows={3}\r\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n        <div>\r\n          <h3 className=\"text-sm font-medium text-gray-900 dark:text-white\">Mode maintenance</h3>\r\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n            Désactive l": "forms.etargetvaluerows3cla",
  ", editingContainer.id, formData);\r\n        // En production, ceci ferait un appel API pour mettre à jour\r\n      } else {\r\n        ": "forms.editingcontaineridfo",
  ", editingContainer.id, formData);\r\n        // En production, ceci ferait un appel API pour mettre à jour\r\n      } else {\r\n        // Create new container\r\n        console.log(": "forms.editingcontaineridfo1",
  ", engagementRate);\r\n      }\r\n\r\n      // Log des données fournisseur si nécessaire\r\n      if (selectedRole === ": "ecommerce.engagementratelogdes1",
  ", err);\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    return {\r\n        collaborations,\r\n        loading,\r\n        error,\r\n        updateCollaborationStatus,\r\n        refetch: () => {\r\n            if (user) {\r\n                const fetchCollaborations = async () => {\r\n                    const profile = await influencerService.getInfluencerProfile(user.id);\r\n                    if (profile) {\r\n                        const data = await collaborationService.getCollaborationsByInfluencer(profile.id!);\r\n                        setCollaborations(data);\r\n                    }\r\n                };\r\n                fetchCollaborations();\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n// Hook pour le profil influenceur\r\nexport const useInfluencerProfile = () => {\r\n    const [profile, setProfile] = useState<InfluencerProfile | null>(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const { user } = useAuth();\r\n\r\n    useEffect(() => {\r\n        const fetchProfile = async () => {\r\n            if (!user) return;\r\n\r\n            try {\r\n                setLoading(true);\r\n                setError(null);\r\n\r\n                const data = await influencerService.getInfluencerProfile(user.id);\r\n                setProfile(data);\r\n            } catch (err) {\r\n                console.error(": "admin.errthrowerrreturncol",
  ", err);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Définir comme carte par défaut\r\n    const handleSetDefault = async (cardId: string) => {\r\n        try {\r\n            await updateCard(cardId, { isDefault: true });\r\n        } catch (err) {\r\n            console.error(": "ecommerce.errdefinircommecarte1",
  ", err);\r\n        }\r\n    };\r\n\r\n    // Supprimer une carte\r\n    const handleDelete = async (cardId: string) => {\r\n        if (confirm(": "forms.errsupprimerunecarte",
  ", err);\r\n        }\r\n    };\r\n\r\n    // Télécharger une carte\r\n    const handleDownload = async (card: SavedBusinessCard) => {\r\n        try {\r\n            await updateCard(card.id, { downloads: card.downloads + 1 });\r\n            // Ici on implémenterait le téléchargement réel avec html2canvas\r\n            alert(": "forms.errtelechargerunecar1",
  ", err);\r\n        }\r\n    };\r\n\r\n    if (loading || !isLoaded) {\r\n        return (\r\n            <div className=\"min-h-96 bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                    <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n                    <p className=\"mt-4 text-gray-600 dark:text-gray-400\">Chargement de vos cartes...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"min-h-96 bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                    <div className=\"text-red-500 text-xl mb-4\">⚠️</div>\r\n                    <p className=\"text-red-600 dark:text-red-400\">{error}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\r\n            {/* Header */}\r\n            <div className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\r\n                <div className=\"max-w-7xl mx-auto px-4 py-6\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\r\n                                Mes Cartes de Visite\r\n                            </h1>\r\n                            <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\r\n                                Créez et gérez vos cartes de visite personnalisées\r\n                            </p>\r\n                        </div>\r\n                        <button\r\n                            onClick={handleCreateNew}\r\n                            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors flex items-center space-x-2\"\r\n                        >\r\n                            <Plus className=\"h-5 w-5\" />\r\n                            <span>Nouvelle carte</span>\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Search and filters */}\r\n                    <div className=\"mt-6 flex items-center justify-between\">\r\n                        <div className=\"flex items-center space-x-4\">\r\n                            <div className=\"relative\">\r\n                                <Search className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Rechercher une carte...\"\r\n                                    value={searchQuery}\r\n                                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                                    className=\"pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                />\r\n                            </div>\r\n                            <button className=\"p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\">\r\n                                <Filter className=\"h-5 w-5\" />\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div className=\"flex items-center space-x-2\">\r\n                            <button\r\n                                onClick={() => setViewMode(": "forms.errifloadingisloaded",
  ", err);\r\n      return 0;\r\n    }\r\n  }, []);\r\n\r\n  // Récupérer les notifications récentes\r\n  const fetchRecentNotifications = useCallback(async (limit = 5) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await notificationService.getNotifications(1, limit);\r\n      setNotifications(response.notifications);\r\n      setUnreadCount(response.unreadCount);\r\n      return response;\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : ": "navigation.errreturn0recupererl2",
  ", err);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Ajouter une nouvelle notification (pour les tests)\r\n  const addNotification = useCallback(async (notification: Omit<Notification, ": "navigation.errreturnfalseajoute",
  ", err);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Marquer toutes les notifications comme lues\r\n  const markAllAsRead = useCallback(async () => {\r\n    try {\r\n      await notificationService.markAllAsRead();\r\n      \r\n      ": "navigation.errreturnfalsemarque",
  ", err);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Marquer toutes les notifications comme lues\r\n  const markAllAsRead = useCallback(async () => {\r\n    try {\r\n      await notificationService.markAllAsRead();\r\n      \r\n      // Mettre à jour l": "navigation.errreturnfalsemarque2",
  ", err);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Marquer une notification comme lue\r\n  const markAsRead = useCallback(async (notificationId: string) => {\r\n    try {\r\n      await notificationService.markAsRead([notificationId]);\r\n      \r\n      // Mettre à jour l": "navigation.errreturnnullfinally1",
  ", err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  return { product, loading, error, refetch };\r\n};\r\n\r\n// Hook pour récupérer les produits similaires\r\nexport const useSimilarProducts = (productId: string | undefined, category: string | undefined) => {\r\n  const [products, setProducts] = useState<ProductListItem[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!productId || !category) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const fetchSimilarProducts = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        const similarProducts = await ProductService.getSimilarProducts(productId, category, 3);\r\n        setProducts(similarProducts);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : ": "ecommerce.errfinallysetloading2",
  ", err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSimilarProducts();\r\n  }, [productId, category]);\r\n\r\n  return { products, loading, error };\r\n};\r\n\r\n// Hook pour les filtres de produits (côté client)\r\nexport const useProductFilters = (products: ProductListItem[]) => {\r\n  const [filteredProducts, setFilteredProducts] = useState<ProductListItem[]>(products);\r\n  const [filters, setFilters] = useState({\r\n    category: ": "ecommerce.errfinallysetloading4",
  ", err);\r\n    }\r\n  };\r\n\r\n  // Marquer toutes les notifications comme lues\r\n  const handleMarkAllAsRead = async () => {\r\n    if (markingAllAsRead) return;\r\n\r\n    setMarkingAllAsRead(true);\r\n    try {\r\n      await notificationService.markAllAsRead();\r\n      setNotifications(prev =>\r\n        prev.map(notification => ({ ...notification, isRead: true }))\r\n      );\r\n      setUnreadCount(0);\r\n      onUnreadCountChange(0);\r\n    } catch (err) {\r\n      console.error(": "common.errmarquertouteslesn1",
  ", err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-main-container\">\r\n      {/* Background animé */}\r\n      <div className=\"auth-animated-background\">\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n      </div>\r\n\r\n      <div className=\"auth-card\">\r\n        <div className=\"auth-form-column\">\r\n          <div className=\"auth-form-header\">\r\n            <h2 className=\"auth-form-title\">{t(": "navigation.errfinallysetisloadi",
  ", err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-main-container\">\r\n      {/* Background animé spectaculaire */}\r\n      <div className=\"auth-animated-background\">\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        \r\n        {/* Particules d": "navigation.errfinallysetisloadi1",
  ", err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"auth-main-container\">\r\n      {/* Background animé spectaculaire */}\r\n      <div className=\"auth-animated-background\">\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        <div className=\"floating-shape\"></div>\r\n        \r\n        {/* Particules d": "navigation.errfinallysetisloadi2",
  ", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fermeture avec Échap\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === ": "common.errfinallysetloading3",
  ", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { products, loading, error, refetch };\r\n};\r\n\r\n// Hook pour récupérer un produit par ID\r\nexport const useProduct = (productId: string | undefined) => {\r\n  const [product, setProduct] = useState<Product | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!productId) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const fetchProduct = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        const fetchedProduct = await ProductService.getProductById(productId);\r\n        setProduct(fetchedProduct);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : ": "ecommerce.errfinallysetloading6",
  ", err);\r\n    } finally {\r\n      setMarkingAllAsRead(false);\r\n    }\r\n  };\r\n\r\n  // Gérer le clic sur une notification\r\n  const handleNotificationClick = (notification: Notification) => {\r\n    if (notification.actionUrl) {\r\n      navigate(notification.actionUrl);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  // Rafraîchir les notifications\r\n  const handleRefresh = () => {\r\n    setPage(1);\r\n    loadNotifications(true);\r\n  };\r\n\r\n  ": "common.errfinallysetmarking3",
  ", err);\r\n    } finally {\r\n      setMarkingAllAsRead(false);\r\n    }\r\n  };\r\n\r\n  // Gérer le clic sur une notification\r\n  const handleNotificationClick = (notification: Notification) => {\r\n    if (notification.actionUrl) {\r\n      navigate(notification.actionUrl);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  // Rafraîchir les notifications\r\n  const handleRefresh = () => {\r\n    setPage(1);\r\n    loadNotifications(true);\r\n  };\r\n\r\n  // Gestion des filtres\r\n  const handleFilterChange = (newFilters: Partial<NotificationFilters>) => {\r\n    setFilters(prev => ({ ...prev, ...newFilters }));\r\n    setPage(1);\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setFilters({});\r\n    setPage(1);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <>\r\n      {/* Overlay */}\r\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity duration-300\" />\r\n      \r\n      {/* Notification Center */}\r\n      <div\r\n        ref={notificationCenterRef}\r\n        className={`\r\n          fixed top-0 right-0 h-full w-96 bg-white dark:bg-gray-800 shadow-2xl z-50\r\n          transform transition-transform duration-300 ease-in-out\r\n          ${isOpen ? ": "forms.errfinallysetmarking",
  ", err);\r\n    } finally {\r\n      setMarkingAllAsRead(false);\r\n    }\r\n  };\r\n\r\n  // Gérer le clic sur une notification\r\n  const handleNotificationClick = (notification: Notification) => {\r\n    if (notification.actionUrl) {\r\n      navigate(notification.actionUrl);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  // Rafraîchir les notifications\r\n  const handleRefresh = () => {\r\n    setPage(1);\r\n    loadNotifications(true);\r\n  };\r\n\r\n  // Gestion des filtres\r\n  const handleFilterChange = (newFilters: Partial<NotificationFilters>) => {\r\n    setFilters(prev => ({ ...prev, ...newFilters }));\r\n    setPage(1);\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setFilters({});\r\n    setPage(1);\r\n  };\r\n  if (!isOpen) return null;\r\n\r\n  console.log(": "common.errfinallysetmarking4",
  ", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Met à jour le rôle d": "common.errorthrowerrormetaj1",
  ", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtient les statistiques des utilisateurs\n   *": "admin.errorthrowerrorobtie",
  ", error);\r\n            errors.push(`Erreur générale: ${error.message}`);\r\n\r\n            return {\r\n                success: false,\r\n                deletedCount,\r\n                errors\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer un utilisateur complet (Firebase Auth + Firestore)\r\n     *": "forms.errorerrorspusherreu",
  ", error);\r\n            errors.push(`Erreur générale: ${error.message}`);\r\n\r\n            return {\r\n                success: false,\r\n                deletedCount,\r\n                errors\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer un utilisateur complet (Firebase Auth + Firestore)\r\n     */\r\n    public async createProductionUser(userData: CreateProductionUserData): Promise<{\r\n        success: boolean;\r\n        user?: User;\r\n        firebaseUid?: string;\r\n        error?: string;\r\n    }> {\r\n        console.log(`👤 Création utilisateur production: ${userData.email} (${userData.role})`);\r\n\r\n        try {\r\n            // 1. Validation des données\r\n            const validation = this.validateUserData(userData);\r\n            if (!validation.valid) {\r\n                return { success: false, error: validation.error };\r\n            }\r\n\r\n            // 2. Vérifier si l": "auth.errorerrorspusherreu1",
  ", error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer des utilisateurs de test (pour le développement)\r\n     *": "admin.errorreturncreerdesu1",
  ", error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer des utilisateurs de test (pour le développement)\r\n     */\r\n    async createTestUsers(): Promise<{ success: boolean; count: number; error?: string }> {\r\n        try {\r\n            console.log(": "admin.errorreturncreerdesu2",
  ", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer et sauvegarder un utilisateur dans la base de données\r\n     *": "admin.errorreturnfalsecree",
  ", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer un nouvel utilisateur (Firebase Auth + Firestore)\r\n     *": "admin.errorreturnfalsecree2",
  ", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer un nouvel utilisateur (Firebase Auth + Firestore)\r\n     */\r\n    async createUser(userData: CreateUserData): Promise<{ success: boolean; user?: AdminUser; error?: string }> {\r\n        const currentUser = auth.currentUser;\r\n\r\n        try {\r\n            console.log(": "admin.errorreturnfalsecree3",
  ", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer un nouvel utilisateur (temporairement seulement dans Firestore)\r\n     * Note: En production, il faudrait utiliser Firebase Admin SDK ou Cloud Functions\r\n     *": "admin.errorreturnfalsecree5",
  ", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer un nouvel utilisateur (temporairement seulement dans Firestore)\r\n     * Note: En production, il faudrait utiliser Firebase Admin SDK ou Cloud Functions\r\n     */\r\n    async createUser(userData: CreateUserData): Promise<{ success: boolean; user?: AdminUser; error?: string }> {\r\n        try {\r\n            console.log(": "admin.errorreturnfalsecree6",
  ", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer un nouvel utilisateur SANS déconnecter l": "admin.errorreturnfalsecree7",
  ", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer un utilisateur complet (Firebase Auth + Firestore) SANS déconnecter l": "admin.errorreturnfalsecree8",
  ", error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Déterminer la redirection selon le rôle\r\n     *": "common.errorreturnnulldeter",
  ", error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Déterminer la redirection selon le rôle\r\n     */\r\n    private determineRedirection(role: UserRole): string {\r\n        const redirections: Record<UserRole, string> = {\r\n            admin: ": "admin.errorreturnnulldeter",
  ", error);\r\n            return {\r\n                success: false,\r\n                error: this.formatAuthError(error)\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Déconnexion sécurisée\r\n     *": "auth.errorreturnsuccessfa1",
  ", error);\r\n            return {\r\n                success: false,\r\n                error: this.formatAuthError(error)\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Déconnexion sécurisée\r\n     */\r\n    public async secureLogout(): Promise<void> {\r\n        console.log(": "auth.errorreturnsuccessfa2",
  ", error);\r\n            return {\r\n                success: false,\r\n                error: this.getErrorMessage(error.message)\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer des utilisateurs de test pour le développement\r\n     *": "admin.errorreturnsuccessfa",
  ", error);\r\n            return {\r\n                success: false,\r\n                error: this.getErrorMessage(error.message)\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Récupérer tous les utilisateurs\r\n     *": "admin.errorreturnsuccessfa2",
  ", error);\r\n            return {\r\n                success: false,\r\n                error: this.getErrorMessage(error.message)\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Récupérer tous les utilisateurs\r\n     */\r\n    async getAllUsers(): Promise<SupabaseAdminUser[]> {\r\n        try {\r\n            console.log(": "admin.errorreturnsuccessfa3",
  ", error);\r\n            return {\r\n                success: false,\r\n                error: this.getErrorMessage(error.message)\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Réinitialiser le mot de passe d": "auth.errorreturnsuccessfa4",
  ", error);\r\n            return {\r\n                success: false,\r\n                error: this.getErrorMessage(error.message)\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Supprimer un utilisateur\r\n     *": "forms.errorreturnsuccessfa",
  ", error);\r\n            return {\r\n                success: false,\r\n                message: `Erreur: ${error.message}`\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Vérifier le statut de l": "common.errorreturnsuccessfa1",
  ", error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer un nouvel utilisateur directement (méthode de fallback)\r\n     * Cette méthode crée uniquement le document Firestore\r\n     *": "navigation.errorreturnsuccessfa",
  ", error);\r\n            return { success: false, error: error.message };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Récupérer tous les utilisateurs\r\n     *": "admin.errorreturnsuccessfa4",
  ", error);\r\n            setResult(`❌ Erreur connexion admin: ${error.message}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const logoutAdmin = async () => {\r\n        setLoading(true);\r\n        try {\r\n            await signOut(auth);\r\n            setResult(": "auth.errorsetresulterreur",
  ", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crée les utilisateurs de test SEULEMENT dans Firestore\r\n     *": "admin.errorthrowerrorcreel",
  ", error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\n// Service pour le parrainage\r\nexport const referralService = {\r\n    // Récupérer les filleuls d": "common.errorthrowerrorservi1",
  ", error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\n// Service pour les profils influenceur\r\nexport const influencerService = {\r\n    // Récupérer le profil d": "common.errorthrowerrorservi4",
  ", error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Créer un nouveau filleul\r\n    async createReferral(referral: Omit<ReferralData, ": "common.errorthrowerrorcreer",
  ", error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Créer un profil influenceur\r\n    async createInfluencerProfile(profile: Omit<InfluencerProfile, ": "common.errorthrowerrorcreer1",
  ", error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Créer une nouvelle collaboration\r\n    async createCollaboration(collaboration: Omit<Collaboration, ": "common.errorthrowerrorcreer2",
  ", error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Mettre à jour un profil influenceur\r\n    async updateInfluencerProfile(id: string, updates: Partial<InfluencerProfile>): Promise<void> {\r\n        try {\r\n            const docRef = doc(db, ": "common.errorthrowerrormettr",
  ", error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Supprimer une collaboration\r\n    async deleteCollaboration(id: string): Promise<void> {\r\n        try {\r\n            await deleteDoc(doc(db, ": "forms.errorthrowerrorsuppr",
  ", error);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const adminUserCreationWithAuthService = new AdminUserCreationWithAuthService();\r\n\r\n// Auto-nettoyage lors du déchargement de la page\r\nif (typeof window !== ": "admin.errorexportconstadmi1",
  ", error);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    // Sauvegarder le devis dans le localStorage à chaque changement\r\n    useEffect(() => {\r\n        localStorage.setItem(QUOTE_STORAGE_KEY, JSON.stringify(items));\r\n    }, [items]);\r\n\r\n    const calculateItemPrice = (product: ProductListItem, quantity: number, variants: Record<string, string> = {}) => {\r\n        let unitPrice = product.price;\r\n\r\n        // Ajouter le prix des variantes (si disponibles)\r\n        ": "forms.errorsauvegarderlede",
  ", error);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    // Sauvegarder le devis dans le localStorage à chaque changement\r\n    useEffect(() => {\r\n        localStorage.setItem(QUOTE_STORAGE_KEY, JSON.stringify(items));\r\n    }, [items]);\r\n\r\n    const calculateItemPrice = (product: ProductListItem, quantity: number, variants: Record<string, string> = {}) => {\r\n        let unitPrice = product.price;\r\n\r\n        // Ajouter le prix des variantes (si disponibles)\r\n        // Note: Pour simplifier, on considère que les variantes n": "forms.errorsauvegarderlede2",
  ", error);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    // Sauvegarder les favoris dans le localStorage à chaque changement\r\n    useEffect(() => {\r\n        localStorage.setItem(FAVORITES_STORAGE_KEY, JSON.stringify(Array.from(favorites)));\r\n    }, [favorites]);\r\n\r\n    const addToFavorites = (productId: string) => {\r\n        setFavorites(prev => new Set(prev).add(productId));\r\n    };\r\n\r\n    const removeFromFavorites = (productId: string) => {\r\n        setFavorites(prev => {\r\n            const newFavorites = new Set(prev);\r\n            newFavorites.delete(productId);\r\n            return newFavorites;\r\n        });\r\n    };\r\n\r\n    const toggleFavorite = (productId: string) => {\r\n        if (favorites.has(productId)) {\r\n            removeFromFavorites(productId);\r\n        } else {\r\n            addToFavorites(productId);\r\n        }\r\n    };\r\n\r\n    const isFavorite = (productId: string) => {\r\n        return favorites.has(productId);\r\n    };\r\n\r\n    const getFavoriteProducts = () => {\r\n        return Array.from(favorites);\r\n    };\r\n\r\n    const clearFavorites = () => {\r\n        setFavorites(new Set());\r\n    };\r\n\r\n    const value: FavoritesContextType = {\r\n        favorites,\r\n        addToFavorites,\r\n        removeFromFavorites,\r\n        toggleFavorite,\r\n        isFavorite,\r\n        getFavoriteProducts,\r\n        clearFavorites\r\n    };\r\n\r\n    return (\r\n        <FavoritesContext.Provider value={value}>\r\n            {children}\r\n        <": "forms.errorsauvegarderlesf",
  ", error);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    // Sauvegarder les favoris dans le localStorage à chaque changement\r\n    useEffect(() => {\r\n        localStorage.setItem(FAVORITES_STORAGE_KEY, JSON.stringify(Array.from(favorites)));\r\n    }, [favorites]);\r\n\r\n    const addToFavorites = (productId: string) => {\r\n        setFavorites(prev => new Set(prev).add(productId));\r\n    };\r\n\r\n    const removeFromFavorites = (productId: string) => {\r\n        setFavorites(prev => {\r\n            const newFavorites = new Set(prev);\r\n            newFavorites.delete(productId);\r\n            return newFavorites;\r\n        });\r\n    };\r\n\r\n    const toggleFavorite = (productId: string) => {\r\n        if (favorites.has(productId)) {\r\n            removeFromFavorites(productId);\r\n        } else {\r\n            addToFavorites(productId);\r\n        }\r\n    };\r\n\r\n    const isFavorite = (productId: string) => {\r\n        return favorites.has(productId);\r\n    };\r\n\r\n    const getFavoriteProducts = () => {\r\n        return Array.from(favorites);\r\n    };\r\n\r\n    const clearFavorites = () => {\r\n        setFavorites(new Set());\r\n    };\r\n\r\n    const value: FavoritesContextType = {\r\n        favorites,\r\n        addToFavorites,\r\n        removeFromFavorites,\r\n        toggleFavorite,\r\n        isFavorite,\r\n        getFavoriteProducts,\r\n        clearFavorites\r\n    };\r\n\r\n    return (\r\n        <FavoritesContext.Provider value={value}>\r\n            {children}\r\n        </FavoritesContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useFavorites = () => {\r\n    const context = useContext(FavoritesContext);\r\n    if (!context) {\r\n        throw new Error(": "forms.errorsauvegarderlesf1",
  ", error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        await attemptFetch();\r\n    }, [apiFunction, effectiveCacheKey, enableCache, cacheTTL, retryCount, retryDelay]);\r\n\r\n    // Fetch initial et re-fetch sur changement des dépendances\r\n    useEffect(() => {\r\n        fetchData();\r\n\r\n        return () => {\r\n            if (abortControllerRef.current) {\r\n                abortControllerRef.current.abort();\r\n            }\r\n        };\r\n    }, dependencies);\r\n\r\n    const refetch = useCallback(() => {\r\n        return fetchData(true);\r\n    }, [fetchData]);\r\n\r\n    const isStale = useMemo(() => {\r\n        if (!enableCache) return false;\r\n        const cached = dataCache.get(effectiveCacheKey);\r\n        return !cached || Date.now() - cached.timestamp > cacheTTL;\r\n    }, [effectiveCacheKey, enableCache, cacheTTL, lastFetch]);\r\n\r\n    return {\r\n        data,\r\n        loading,\r\n        error,\r\n        refetch,\r\n        isStale,\r\n        lastFetch: new Date(lastFetch)\r\n    };\r\n}\r\n\r\n// Hook pour recherche avec debounce\r\nexport function useDebouncedSearch<T>(\r\n    searchFunction: (query: string) => Promise<T[]>,\r\n    searchTerm: string,\r\n    delay: number = 300,\r\n    options: UseOptimizedApiOptions = {}\r\n) {\r\n    const debouncedSearchTerm = useDebounce(searchTerm, delay);\r\n\r\n    const searchApi = useCallback(() => {\r\n        if (!debouncedSearchTerm.trim()) {\r\n            return Promise.resolve([]);\r\n        }\r\n        return searchFunction(debouncedSearchTerm);\r\n    }, [searchFunction, debouncedSearchTerm]);\r\n\r\n    return useOptimizedApi<T[]>(\r\n        searchApi,\r\n        [debouncedSearchTerm],\r\n        {\r\n            ...options,\r\n            cacheKey: options.cacheKey || `search-${debouncedSearchTerm}`,\r\n            cacheTTL: options.cacheTTL || 60000 // 1 minute pour les recherches\r\n        }\r\n    );\r\n}\r\n\r\n": "navigation.errorfinallysetloadi",
  ", error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        await attemptFetch();\r\n    }, [apiFunction, effectiveCacheKey, enableCache, cacheTTL, retryCount, retryDelay]);\r\n\r\n    // Fetch initial et re-fetch sur changement des dépendances\r\n    useEffect(() => {\r\n        fetchData();\r\n\r\n        return () => {\r\n            if (abortControllerRef.current) {\r\n                abortControllerRef.current.abort();\r\n            }\r\n        };\r\n    }, dependencies);\r\n\r\n    const refetch = useCallback(() => {\r\n        return fetchData(true);\r\n    }, [fetchData]);\r\n\r\n    const isStale = useMemo(() => {\r\n        if (!enableCache) return false;\r\n        const cached = dataCache.get(effectiveCacheKey);\r\n        return !cached || Date.now() - cached.timestamp > cacheTTL;\r\n    }, [effectiveCacheKey, enableCache, cacheTTL, lastFetch]);\r\n\r\n    return {\r\n        data,\r\n        loading,\r\n        error,\r\n        refetch,\r\n        isStale,\r\n        lastFetch: new Date(lastFetch)\r\n    };\r\n}\r\n\r\n// Hook pour recherche avec debounce\r\nexport function useDebouncedSearch<T>(\r\n    searchFunction: (query: string) => Promise<T[]>,\r\n    searchTerm: string,\r\n    delay: number = 300,\r\n    options: UseOptimizedApiOptions = {}\r\n) {\r\n    const debouncedSearchTerm = useDebounce(searchTerm, delay);\r\n\r\n    const searchApi = useCallback(() => {\r\n        if (!debouncedSearchTerm.trim()) {\r\n            return Promise.resolve([]);\r\n        }\r\n        return searchFunction(debouncedSearchTerm);\r\n    }, [searchFunction, debouncedSearchTerm]);\r\n\r\n    return useOptimizedApi<T[]>(\r\n        searchApi,\r\n        [debouncedSearchTerm],\r\n        {\r\n            ...options,\r\n            cacheKey: options.cacheKey || `search-${debouncedSearchTerm}`,\r\n            cacheTTL: options.cacheTTL || 60000 // 1 minute pour les recherches\r\n        }\r\n    );\r\n}\r\n\r\n// Hook pour mutations optimisées\r\ninterface UseMutationOptions<T> {\r\n    onSuccess?: (data: T) => void;\r\n    onError?: (error: Error) => void;\r\n    invalidateCache?: string | string[];\r\n    optimisticUpdate?: (data: any) => void;\r\n}\r\n\r\nexport function useOptimizedMutation<TData, TVariables>(\r\n    mutationFunction: (variables: TVariables) => Promise<TData>,\r\n    options: UseMutationOptions<TData> = {}\r\n) {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState<Error | null>(null);\r\n\r\n    const mutate = useCallback(async (variables: TVariables) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // Mise à jour optimiste\r\n        if (options.optimisticUpdate) {\r\n            options.optimisticUpdate(variables);\r\n        }\r\n\r\n        try {\r\n            const result = await mutationFunction(variables);\r\n\r\n            ": "navigation.errorfinallysetloadi1",
  ", error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        await attemptFetch();\r\n    }, [apiFunction, effectiveCacheKey, enableCache, cacheTTL, retryCount, retryDelay]);\r\n\r\n    // Fetch initial et re-fetch sur changement des dépendances\r\n    useEffect(() => {\r\n        fetchData();\r\n\r\n        return () => {\r\n            if (abortControllerRef.current) {\r\n                abortControllerRef.current.abort();\r\n            }\r\n        };\r\n    }, dependencies);\r\n\r\n    const refetch = useCallback(() => {\r\n        return fetchData(true);\r\n    }, [fetchData]);\r\n\r\n    const isStale = useMemo(() => {\r\n        if (!enableCache) return false;\r\n        const cached = dataCache.get(effectiveCacheKey);\r\n        return !cached || Date.now() - cached.timestamp > cacheTTL;\r\n    }, [effectiveCacheKey, enableCache, cacheTTL, lastFetch]);\r\n\r\n    return {\r\n        data,\r\n        loading,\r\n        error,\r\n        refetch,\r\n        isStale,\r\n        lastFetch: new Date(lastFetch)\r\n    };\r\n}\r\n\r\n// Hook pour recherche avec debounce\r\nexport function useDebouncedSearch<T>(\r\n    searchFunction: (query: string) => Promise<T[]>,\r\n    searchTerm: string,\r\n    delay: number = 300,\r\n    options: UseOptimizedApiOptions = {}\r\n) {\r\n    const debouncedSearchTerm = useDebounce(searchTerm, delay);\r\n\r\n    const searchApi = useCallback(() => {\r\n        if (!debouncedSearchTerm.trim()) {\r\n            return Promise.resolve([]);\r\n        }\r\n        return searchFunction(debouncedSearchTerm);\r\n    }, [searchFunction, debouncedSearchTerm]);\r\n\r\n    return useOptimizedApi<T[]>(\r\n        searchApi,\r\n        [debouncedSearchTerm],\r\n        {\r\n            ...options,\r\n            cacheKey: options.cacheKey || `search-${debouncedSearchTerm}`,\r\n            cacheTTL: options.cacheTTL || 60000 // 1 minute pour les recherches\r\n        }\r\n    );\r\n}\r\n\r\n// Hook pour mutations optimisées\r\ninterface UseMutationOptions<T> {\r\n    onSuccess?: (data: T) => void;\r\n    onError?: (error: Error) => void;\r\n    invalidateCache?: string | string[];\r\n    optimisticUpdate?: (data: any) => void;\r\n}\r\n\r\nexport function useOptimizedMutation<TData, TVariables>(\r\n    mutationFunction: (variables: TVariables) => Promise<TData>,\r\n    options: UseMutationOptions<TData> = {}\r\n) {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState<Error | null>(null);\r\n\r\n    const mutate = useCallback(async (variables: TVariables) => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // Mise à jour optimiste\r\n        if (options.optimisticUpdate) {\r\n            options.optimisticUpdate(variables);\r\n        }\r\n\r\n        try {\r\n            const result = await mutationFunction(variables);\r\n\r\n            // Invalidation du cache\r\n            if (options.invalidateCache) {\r\n                const cacheKeys = Array.isArray(options.invalidateCache)\r\n                    ? options.invalidateCache\r\n                    : [options.invalidateCache];\r\n\r\n                cacheKeys.forEach(key => {\r\n                    if (key.includes(": "navigation.errorfinallysetloadi2",
  ", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fonction pour tester la récupération des produits\r\nexport const testFirebaseProducts = async (): Promise<void> => {\r\n    console.log(": "ecommerce.errorthrowerrorfonct2",
  ", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Afficher les statistiques utilisateurs\r\n     *": "admin.errorafficherlesstat",
  ", error);\r\n        }\r\n    }\r\n\r\n    private generateId(): string {\r\n        return `card_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    }\r\n\r\n    // Données initiales pour la démo\r\n    private getInitialCards(): SavedBusinessCard[] {\r\n        return [\r\n            {\r\n                id: ": "forms.errorprivategenerate1",
  ", error);\r\n        } finally {\r\n            setBackupLoading(false);\r\n        }\r\n    };\r\n\r\n    const deleteBackup = (backupId: string) => {\r\n        setBackups(prev => prev.filter(backup => backup.id !== backupId));\r\n    };\r\n\r\n    const downloadBackup = (backup: BackupFile) => {\r\n        // Simuler le téléchargement\r\n        console.log(": "navigation.errorfinallysetbacku1",
  ", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Supprimer un fichier\r\n   *": "forms.errorreturnsupprimer",
  ", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validation des fichiers\r\n   */\r\n  private validateFile(file: File, options: UploadOptions): { valid: boolean; error?: string } {\r\n    // Vérifier la taille\r\n    const maxSize = (options.maxSize || 50) * 1024 * 1024; // Convertir MB en bytes\r\n    if (file.size > maxSize) {\r\n      return {\r\n        valid: false,\r\n        error: `Le fichier ${file.name} dépasse la taille maximale de ${options.maxSize || 50}MB`\r\n      };\r\n    }\r\n\r\n    // Vérifier le type\r\n    if (options.allowedTypes && options.allowedTypes.length > 0) {\r\n      const fileExtension = ": "forms.errorreturnfalsevali1",
  ", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Vérifie si un utilisateur existe\r\n   */\r\n  private async checkUserExists(email: string): Promise<boolean> {\r\n    try {\r\n      // Tenter de se connecter pour vérifier l": "auth.errorreturnfalseveri1",
  ", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Crée des fournisseurs de test\r\n   *": "ecommerce.errorthrowerrorcreed",
  ", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Crée tous les utilisateurs de test\r\n   *": "admin.errorthrowerrorcreet",
  ", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Crée tous les utilisateurs de test\r\n   */\r\n  private async createTestUsers(): Promise<Array<{email: string, success: boolean, error?: string}>> {\r\n    const results = [];\r\n    \r\n    for (const testUser of TEST_USERS) {\r\n      try {\r\n        console.log(`Création de l": "auth.errorthrowerrorcreet1",
  ", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Supprimer plusieurs fichiers\r\n   *": "forms.errorthrowerrorsuppr1",
  ", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload multiple fichiers en batch\r\n   */\r\n  async uploadMultipleFiles(\r\n    files: File[],\r\n    basePath: string,\r\n    options: UploadOptions = {}\r\n  ): Promise<BatchUploadResult> {\r\n    const result: BatchUploadResult = {\r\n      successful: [],\r\n      failed: [],\r\n      totalUploaded: 0,\r\n      totalFailed: 0\r\n    };\r\n\r\n    const uploadPromises = files.map(async (file, index) => {\r\n      try {\r\n        const fileName = options.fileName \r\n          ? `${options.fileName}_${index + 1}_${file.name}`\r\n          : `${Date.now()}_${index}_${file.name}`;\r\n        \r\n        const fullPath = `${basePath}/${fileName}`;\r\n        \r\n        const mediaFile = await this.uploadFile(file, fullPath, {\r\n          ...options,\r\n          onProgress: (progress) => {\r\n            // Progress spécifique au fichier\r\n            options.onProgress?.({\r\n              ...progress,\r\n              ": "forms.errorthrowerroruploa",
  ", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload multiple fichiers en batch\r\n   */\r\n  async uploadMultipleFiles(\r\n    files: File[],\r\n    basePath: string,\r\n    options: UploadOptions = {}\r\n  ): Promise<BatchUploadResult> {\r\n    const result: BatchUploadResult = {\r\n      successful: [],\r\n      failed: [],\r\n      totalUploaded: 0,\r\n      totalFailed: 0\r\n    };\r\n\r\n    const uploadPromises = files.map(async (file, index) => {\r\n      try {\r\n        const fileName = options.fileName \r\n          ? `${options.fileName}_${index + 1}_${file.name}`\r\n          : `${Date.now()}_${index}_${file.name}`;\r\n        \r\n        const fullPath = `${basePath}/${fileName}`;\r\n        \r\n        const mediaFile = await this.uploadFile(file, fullPath, {\r\n          ...options,\r\n          onProgress: (progress) => {\r\n            // Progress spécifique au fichier\r\n            options.onProgress?.({\r\n              ...progress,\r\n              // Ajouter l": "forms.errorthrowerroruploa2",
  ", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Créer et exporter l": "common.errorthrowerrorcreer3",
  ", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleDownloadDocument = (document: Document) => {\r\n    // Simulation du téléchargement\r\n    console.log(": "forms.errorthrowerrorconst1",
  ", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleRemoveImage = async (imageUrl: string) => {\r\n    try {\r\n      // Supprimer du serveur si c": "forms.errorthrowerrorconst2",
  ", error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtenir tous les produits (initiaux + ajoutés par fournisseurs)\r\n   *": "ecommerce.errorobtenirtouslesp1",
  ", error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtenir tous les produits (initiaux + ajoutés par fournisseurs)\r\n   */\r\n  getAllProducts(): Product[] {\r\n    try {\r\n      const saved = localStorage.getItem(STORAGE_KEY);\r\n      console.log(": "forms.errorobtenirtouslesp",
  ", error);\r\n    return {\r\n      success: false,\r\n      error: error\r\n    };\r\n  }\r\n};\r\n\r\n// Fonction pour nettoyer les données de test (si nécessaire)\r\nexport const cleanupTestData = async () => {\r\n  try {\r\n    console.log(": "common.errorreturnsuccessfa3",
  ", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\n/**\r\n * Ajoute des produits supplémentaires pour les tests\r\n *": "ecommerce.errorreturnsuccessfa",
  ", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\n/**\r\n * Vérifie l": "common.errorreturnsuccessfa5",
  ", error);\r\n    }\r\n\r\n    // Première fois ou erreur : initialiser avec les produits par défaut\r\n    console.log(": "ecommerce.errorpremierefoisoue2",
  ", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ajouter un nouveau produit\r\n   */\r\n  addProduct(product: Product): void {\r\n    const currentProducts = this.getAllProducts();\r\n    const updatedProducts = [product, ...currentProducts];\r\n    this.saveProducts(updatedProducts);\r\n  }\r\n\r\n  /**\r\n   * Mettre à jour un produit existant\r\n   */\r\n  updateProduct(productId: string, updatedProduct: Partial<Product>): void {\r\n    const currentProducts = this.getAllProducts();\r\n    const updatedProducts = currentProducts.map(p =>\r\n      p.id === productId ? { ...p, ...updatedProduct } : p\r\n    );\r\n    this.saveProducts(updatedProducts);\r\n  }\r\n\r\n  /**\r\n   * Forcer la réinitialisation avec les produits par défaut\r\n   *": "forms.errorajouterunnouvea",
  ", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ajouter un nouveau produit\r\n   */\r\n  addProduct(product: Product): void {\r\n    const currentProducts = this.getAllProducts();\r\n    const updatedProducts = [product, ...currentProducts];\r\n    this.saveProducts(updatedProducts);\r\n  }\r\n\r\n  /**\r\n   * Mettre à jour un produit existant\r\n   */\r\n  updateProduct(productId: string, updatedProduct: Partial<Product>): void {\r\n    const currentProducts = this.getAllProducts();\r\n    const updatedProducts = currentProducts.map(p =>\r\n      p.id === productId ? { ...p, ...updatedProduct } : p\r\n    );\r\n    this.saveProducts(updatedProducts);\r\n  }\r\n\r\n  /**\r\n   * Forcer la réinitialisation avec les produits par défaut\r\n   */\r\n  forceReset(): void {\r\n    localStorage.removeItem(STORAGE_KEY);\r\n    console.log(": "forms.errorajouterunnouvea1",
  ", error);\r\n    }\r\n  }, [productsList]);\r\n\r\n  // Filtrage des produits\r\n  const filteredProducts = productsList.filter(product => {\r\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesCategory = !selectedCategory || product.category === selectedCategory;\r\n    return matchesSearch && matchesCategory;\r\n  });\r\n\r\n  const categories = Array.from(new Set(products.map(p => p.category)));\r\n  \r\n  const handleAddProduct = () => {\r\n    setEditingProduct(null);\r\n    setShowAddModal(true);\r\n  };\r\n\r\n  const handleEditProduct = (product: Product) => {\r\n    setEditingProduct(product);\r\n    setShowAddModal(true);\r\n  };\r\n\r\n  const handleSaveProduct = (productData: any) => {\r\n    try {\r\n      if (editingProduct) {\r\n        // Modifier le produit existant\r\n        setProductsList(prev => prev.map(p => \r\n          p.id === editingProduct.id \r\n            ? { \r\n                ...p, \r\n                name: productData.name, \r\n                category: productData.category,\r\n                images: productData.images || p.images,\r\n                description: {\r\n                  ...p.description,\r\n                  fr: productData.description || (p.description as { fr?: string }).fr || ": "forms.errorproductslistfil",
  ", error);\r\n    }\r\n  }, [productsList]);\r\n\r\n  // Filtrage des produits\r\n  const filteredProducts = productsList.filter(product => {\r\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesCategory = !selectedCategory || product.category === selectedCategory;\r\n    return matchesSearch && matchesCategory;\r\n  });\r\n\r\n  const categories = Array.from(new Set(products.map(p => p.category)));\r\n  \r\n  const handleAddProduct = () => {\r\n    setEditingProduct(null);\r\n    setShowAddModal(true);\r\n  };\r\n\r\n  const handleEditProduct = (product: Product) => {\r\n    setEditingProduct(product);\r\n    setShowAddModal(true);\r\n  };\r\n\r\n  const handleSaveProduct = (productData: any) => {\r\n    try {\r\n      if (editingProduct) {\r\n        // Modifier le produit existant\r\n        setProductsList(prev => prev.map(p => \r\n          p.id === editingProduct.id \r\n            ? { \r\n                ...p, \r\n                name: productData.name, \r\n                category: productData.category,\r\n                images: productData.images || p.images, ": "forms.errorproductslistfil1",
  ", error);\r\n    }\r\n  }, [productsList]);\r\n\r\n  // Filtrage des produits\r\n  const filteredProducts = productsList.filter(product => {\r\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesCategory = !selectedCategory || product.category === selectedCategory;\r\n    return matchesSearch && matchesCategory;\r\n  });\r\n\r\n  const categories = Array.from(new Set(products.map(p => p.category)));\r\n  \r\n  const handleAddProduct = () => {\r\n    setEditingProduct(null);\r\n    setShowAddModal(true);\r\n  };\r\n\r\n  const handleEditProduct = (product: Product) => {\r\n    setEditingProduct(product);\r\n    setShowAddModal(true);\r\n  };\r\n\r\n  const handleSaveProduct = (productData: any) => {\r\n    try {\r\n      if (editingProduct) {\r\n        // Modifier le produit existant\r\n        setProductsList(prev => prev.map(p => \r\n          p.id === editingProduct.id \r\n            ? { \r\n                ...p, \r\n                name: productData.name, \r\n                category: productData.category,\r\n                images: productData.images || p.images, // Conserver les images existantes si pas de nouvelles                description: {\r\n                  ...p.description,\r\n                  fr: productData.description || p.description.fr\r\n                }\r\n              }\r\n            : p\r\n        ));\r\n        success(`Produit \"${productData.name}\" modifié avec succès !`);\r\n      } else {\r\n        // Créer un produit simple pour la démonstration\r\n        const newProduct: Product = {\r\n          ...products[0], // Copier toute la structure existante\r\n          id: `prod_${Date.now()}`,\r\n          name: productData.name,\r\n          category: productData.category,\r\n          description: {\r\n            ...products[0].description,\r\n            french: productData.description || `Description de ${productData.name}`\r\n          },\r\n          images: productData.images && productData.images.length > 0 \r\n            ? productData.images \r\n            : [": "forms.errorproductslistfil2",
  ", error);\r\n    }\r\n  }, [productsList]);\r\n  // Filtrage des produits\r\n  const filteredProducts = productsList.filter(product => {\r\n    const productName = getProductName(product, language);\r\n    const matchesSearch = productName.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesCategory = !selectedCategory || product.category === selectedCategory;\r\n    return matchesSearch && matchesCategory;\r\n  });\r\n\r\n  const categories = Array.from(new Set(products.map(p => p.category)));\r\n  \r\n  const handleAddProduct = () => {\r\n    setEditingProduct(null);\r\n    setShowAddModal(true);\r\n  };\r\n\r\n  const handleEditProduct = (product: Product) => {\r\n    setEditingProduct(product);\r\n    setShowAddModal(true);\r\n  };\r\n\r\n  const handleSaveProduct = (productData: any) => {\r\n    try {\r\n      if (editingProduct) {\r\n        // Modifier le produit existant\r\n        setProductsList(prev => prev.map(p => \r\n          p.id === editingProduct.id \r\n            ? { \r\n                ...p, \r\n                name: productData.name, \r\n                category: productData.category,\r\n                images: productData.images || p.images,\r\n                description: {\r\n                  ...p.description,\r\n                  fr: productData.description || (p.description as any).fr || ": "forms.errorproductslistfil3",
  ", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6\">\r\n      <div className=\"mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\r\n          Démonstration Upload\r\n        </h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">\r\n          Testez les fonctionnalités d": "forms.errorreturndivclassn",
  ", errorMsg);\r\n                }\r\n            });\r\n\r\n            await Promise.all(deletePromises);\r\n\r\n            // Note: Pour supprimer les utilisateurs Firebase Auth, il faudrait utiliser\r\n            ": "forms.errormsgawaitpromise",
  ", filters.verified));\r\n            }\r\n\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            let results = querySnapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n                createdAt: doc.data().createdAt.toDate(),\r\n                updatedAt: doc.data().updatedAt.toDate()\r\n            } as InfluencerProfile));\r\n\r\n            // Filtrer par prix maximum côté client (Firestore ne permet pas les requêtes sur des champs imbriqués)\r\n            if (filters.maxPrice) {\r\n                results = results.filter(profile => profile.pricing.postPrice <= filters.maxPrice!);\r\n            }\r\n\r\n            return results;\r\n        } catch (error) {\r\n            console.error(": "ecommerce.filtersverifiedconst2",
  ", firebaseUser.email);\r\n\r\n            const userProfile: AdminUser = {\r\n                uid: firebaseUser.uid,\r\n                id: firebaseUser.uid,\r\n                email: firebaseUser.email || ": "auth.firebaseuseremailcon",
  ", firebaseUser.email);\r\n                    const user = await this.loadUserProfile(firebaseUser);\r\n\r\n                    if (user) {\r\n                        this.currentUser = user;\r\n                        this.startSessionMonitoring();\r\n                        await this.updateLastActivity();\r\n                        console.log(`✅ Session initialisée pour ${user.name} (${user.role})`);\r\n                    }\r\n\r\n                    resolve(user);\r\n                } else {\r\n                    console.log(": "auth.firebaseuseremailcon1",
  ", firebaseUser.uid), adminUserProfile);\r\n            console.log(": "admin.firebaseuseruidadmin",
  ", firebaseUser.uid), userProfile);\r\n            console.log(`✅ Profil Firestore créé: ${userData.email}`);\r\n\r\n            ": "auth.firebaseuseruiduserp",
  ", firebaseUser.uid), userProfile);\r\n            console.log(`✅ Profil Firestore créé: ${userData.email}`);\r\n\r\n            // 5. Déconnecter l": "auth.firebaseuseruiduserp2",
  ", firebaseUser.uid);\n      const userDoc = await getDoc(userDocRef);\n\n      if (!userDoc.exists()) {\n        // Créer le document utilisateur si c": "admin.firebaseuseruidconst2",
  ", firebaseUser.uid);\r\n\r\n            // 3. Créer le profil admin dans Firestore\r\n            const adminUserProfile = {\r\n                uid: firebaseUser.uid,\r\n                id: firebaseUser.uid,\r\n                email: userData.email,\r\n                name: userData.name,\r\n                role: ": "auth.firebaseuseruid3cree",
  ", firebaseUser.uid);\r\n            const userDoc = await getDoc(userDocRef);\r\n\r\n            if (!userDoc.exists()) {\r\n                console.error(`❌ Profil utilisateur non trouvé: ${firebaseUser.uid}`);\r\n                return null;\r\n            }\r\n\r\n            const userData = userDoc.data() as User;\r\n\r\n            ": "admin.firebaseuseruidconst3",
  ", firebaseUser.uid);\r\n            const userDoc = await getDoc(userDocRef);\r\n\r\n            if (!userDoc.exists()) {\r\n                console.error(`❌ Profil utilisateur non trouvé: ${firebaseUser.uid}`);\r\n                return null;\r\n            }\r\n\r\n            const userData = userDoc.data() as User;\r\n\r\n            // Assurer la cohérence des données\r\n            const user: User = {\r\n                ...userData,\r\n                uid: firebaseUser.uid,\r\n                id: userData.id || firebaseUser.uid,\r\n                email: userData.email || firebaseUser.email || ": "auth.firebaseuseruidconst1",
  ", firebaseUser.uid);\r\n            const userDoc = await getDoc(userDocRef);\r\n\r\n            if (!userDoc.exists()) {\r\n                console.log(`🔄 Synchronisation utilisateur: ${firebaseUser.email}`);\r\n\r\n                const userProfile: User = {\r\n                    uid: firebaseUser.uid,\r\n                    id: firebaseUser.uid,\r\n                    email: firebaseUser.email || ": "auth.firebaseuseruidconst2",
  ", formData);\r\n        // En production, ceci ferait un appel API pour créer\r\n      }\r\n      \r\n      setShowCreateModal(false);\r\n      loadContainers(); ": "ecommerce.formdataenproduction1",
  ", formData);\r\n        // En production, ceci ferait un appel API pour créer\r\n      }\r\n      \r\n      setShowCreateModal(false);\r\n      loadContainers(); // Refresh the list\r\n      \r\n      // Show success message\r\n      alert(editingContainer \r\n        ? ": "forms.formdataenproduction",
  ", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  // Debug des états\r\n  useEffect(() => {\r\n    console.log(": "common.handleclickoutsidede1",
  ", handleClickOutside);\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  // Charger les notifications au montage et lors des changements de filtres\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      loadNotifications(true);\r\n    }\r\n  }, [isOpen, filters]);\r\n\r\n  // Scroll infini\r\n  const handleScroll = () => {\r\n    if (!scrollContainerRef.current || loading || !hasMore) return;\r\n\r\n    const { scrollTop, scrollHeight, clientHeight } = scrollContainerRef.current;\r\n    if (scrollHeight - scrollTop <= clientHeight + 100) {\r\n      loadNotifications();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const scrollContainer = scrollContainerRef.current;\r\n    if (scrollContainer) {\r\n      scrollContainer.addEventListener(": "forms.handleclickoutsideis1",
  ", handleKeyDown);\r\n      // Empêcher le scroll du body\r\n      document.body.style.overflow = ": "common.handlekeydownempeche1",
  ", handleScroll);\r\n    }\r\n  }, [loading, hasMore]);\r\n\r\n  // Marquer une notification comme lue\r\n  const handleMarkAsRead = async (notificationId: string) => {\r\n    try {\r\n      await notificationService.markAsRead([notificationId]);\r\n      setNotifications(prev =>\r\n        prev.map(notification =>\r\n          notification.id === notificationId\r\n            ? { ...notification, isRead: true }\r\n            : notification\r\n        )\r\n      );\r\n      \r\n      const newUnreadCount = Math.max(0, unreadCount - 1);\r\n      setUnreadCount(newUnreadCount);\r\n      onUnreadCountChange(newUnreadCount);\r\n    } catch (err) {\r\n      console.error(": "common.handlescrollloadingh1",
  ", handleStorageChange);\r\n    }, [key, options.syncAcrossTabs]);\r\n\r\n    return [storedValue, setValue] as const;\r\n}\r\n\r\n// Hook pour intersection observer optimisé\r\nexport function useIntersectionObserver(\r\n    ref: React.RefObject<Element>,\r\n    options: IntersectionObserverInit = {}\r\n) {\r\n    const [isIntersecting, setIsIntersecting] = useState(false);\r\n    const [hasIntersected, setHasIntersected] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const element = ref.current;\r\n        if (!element) return;\r\n\r\n        const observer = new IntersectionObserver(([entry]) => {\r\n            setIsIntersecting(entry.isIntersecting);\r\n            if (entry.isIntersecting && !hasIntersected) {\r\n                setHasIntersected(true);\r\n            }\r\n        }, {\r\n            threshold: 0.1,\r\n            rootMargin: ": "common.handlestoragechangek1",
  ", health);\n\n        // Pour les tests : simuler un utilisateur fournisseur connecté\n        // TODO: Retirer cette simulation en production\n        // Code de connexion automatique désactivé pour permettre l": "auth.healthpourlestestssi2",
  ", icon: <Clock size={20} /> }\r\n                  ].map((stat, index) => (\r\n                    <div key={stat.label} className=\"stagger-item interactive-card bg-white dark:bg-gray-800 p-4 rounded-xl border border-gray-200 dark:border-gray-700\">\r\n                      <div className={`w-12 h-12 rounded-lg bg-gradient-to-r ${stat.color} flex items-center justify-center text-white mb-3 animate-float`} style={{ animationDelay: `${index * 0.2}s` }}>\r\n                        {stat.icon}\r\n                      </div>\r\n                      <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-1\">\r\n                        {stat.value}\r\n                      </div>\r\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                        {stat.label}\r\n                      </div>\r\n                      <div className=\"mt-2 h-1 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\r\n                        <div className={`h-full bg-gradient-to-r ${stat.color} rounded-full animate-shimmer`} style={{ width: `${Math.min(stat.value * 10, 100)}%` }}></div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Favoris avec animations améliorées */}\r\n              <Section icon={<Heart className=\"w-5 h-5\" />} title=\"Produits favoris\" collapsible={true}>\r\n                {user.favorites?.length === 0 ? (\r\n                  <div className=\"text-center py-12\">\r\n                    <div className=\"animate-bounce-gentle\">\r\n                      <Heart className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\r\n                    </div>\r\n                    <p className=\"text-lg text-gray-500 dark:text-gray-400 mb-2\">Aucun produit favori</p>\r\n                    <p className=\"text-sm text-gray-400 dark:text-gray-500\">\r\n                      Explorez notre catalogue et ajoutez vos produits préférés !\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n                    {user.favorites?.slice(0, 6).map((id: string, index: number) => {\r\n                      const product = getProductById(id);\r\n                      return product ? (\r\n                        <div key={id} className=\"stagger-item hover-lift\" style={{ animationDelay: `${index * 100}ms` }}>\r\n                          <ProductCard product={product} />\r\n                        </div>\r\n                      ) : null;\r\n                    })}\r\n                  </div>\r\n                )}\r\n              </Section>\r\n\r\n              {/* Messages récents améliorés */}\r\n              <Section icon={<Mail className=\"w-5 h-5\" />} title=\"Messages récents\" collapsible={true}>\r\n                {fakeMessages.length === 0 ? (\r\n                  <div className=\"text-center py-12\">\r\n                    <div className=\"animate-pulse-soft\">\r\n                      <Mail className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\r\n                    </div>\r\n                    <p className=\"text-lg text-gray-500 dark:text-gray-400\">Aucun message</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {fakeMessages.map((msg, index) => (\r\n                      <div\r\n                        key={msg.id}\r\n                        className=\"stagger-item interactive-card p-4 bg-gray-50 dark:bg-gray-700 rounded-xl border border-gray-200 dark:border-gray-600\"\r\n                        style={{ animationDelay: `${index * 100}ms` }}\r\n                      >\r\n                        <div className=\"flex justify-between items-start mb-3\">\r\n                          <div className=\"flex items-center gap-3\">\r\n                            <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-bold\">\r\n                              {msg.from.charAt(0)}\r\n                            </div>\r\n                            <div>\r\n                              <span className=\"font-medium text-gray-900 dark:text-white\">{msg.from}</span>\r\n                              <div className=\"text-xs text-gray-500 flex items-center gap-1 mt-1\">\r\n                                <Clock size={12} />\r\n                                {msg.date}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <span className=\"text-xs text-gray-500 bg-gray-200 dark:bg-gray-600 px-2 py-1 rounded-full\">\r\n                            Nouveau\r\n                          </span>\r\n                        </div>\r\n                        <p className=\"text-gray-700 dark:text-gray-300 text-sm leading-relaxed\">{msg.content}</p>\r\n                        <div className=\"flex gap-2 mt-3\">\r\n                          <button className=\"text-xs px-3 py-1 bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors\">\r\n                            Répondre\r\n                          </button>\r\n                          <button className=\"text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 transition-colors\">\r\n                            Marquer lu\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Section>\r\n\r\n              {/* Activité récente améliorée */}\r\n              <Section icon={<Clock className=\"w-5 h-5\" />} title=\"Activité récente\" collapsible={true} defaultExpanded={false}>\r\n                <div className=\"space-y-3\">\r\n                  {[\r\n                    { action: ": "forms.iconclocksize20mapst",
  ", id);\r\n  };\r\n\r\n  return (\r\n    <AdminLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n            Modération\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Gérez les signalements et modérez le contenu de la plateforme\r\n          </p>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <AlertTriangle className=\"h-8 w-8 text-yellow-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">En attente</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {items.filter(i => i.status === ": "forms.idreturnadminlayoutd",
  ", initError);\n          // Continuer même si l": "common.initerrorcontinuerme1",
  ", maxPrice));\r\n      }\r\n\r\n      // Tri\r\n      q = query(q, orderBy(sortBy, sortOrder));\r\n\r\n      // Pagination\r\n      q = query(q, limit(queryLimit + 1));\r\n\r\n      if (startAfterDoc) {\r\n        q = query(q, startAfter(startAfterDoc));\r\n      }\r\n\r\n      const snapshot = await getDocs(q);\r\n      const docs = snapshot.docs;\r\n      const hasMore = docs.length > queryLimit;\r\n      \r\n      if (hasMore) {\r\n        docs.pop(); // Retirer le document extra utilisé pour la pagination\r\n      }\r\n\r\n      const products: Product[] = docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n        createdAt: doc.data().createdAt?.toDate?.() || new Date(),\r\n        updatedAt: doc.data().updatedAt?.toDate?.() || new Date()\r\n      } as Product));\r\n\r\n      // Filtrage par terme de recherche (côté client pour la compatibilité)\r\n      let filteredProducts = products;\r\n      if (searchTerm) {\r\n        const term = searchTerm.toLowerCase();\r\n        filteredProducts = products.filter(product =>\r\n          product.name.toLowerCase().includes(term) ||\r\n          product.description?.toLowerCase().includes(term) ||\r\n          product.brand.toLowerCase().includes(term) ||\r\n          product.category.toLowerCase().includes(term)\r\n        );\r\n      }\r\n\r\n      return {\r\n        products: filteredProducts,\r\n        hasMore: hasMore && filteredProducts.length === queryLimit,\r\n        lastDoc: hasMore ? docs[docs.length - 1] : undefined\r\n      };\r\n    } catch (error) {\r\n      console.error(": "forms.maxpricetriqqueryqor2",
  ", message: string } | null>(null);\r\n\r\n  // Cast pour accéder aux propriétés étendues non typées\r\n  const user = baseUser as Record<string, any>;\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setEditedUser({ ...user });\r\n    }\r\n  }, [user]);\r\n\r\n  ": "forms.messagestringnullnul",
  ", message: string } | null>(null);\r\n\r\n  // Cast pour accéder aux propriétés étendues non typées\r\n  const user = baseUser as Record<string, any>;\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setEditedUser({ ...user });\r\n    }\r\n  }, [user]);\r\n\r\n  // Animation notification\r\n  useEffect(() => {\r\n    if (notification) {\r\n      const timer = setTimeout(() => {\r\n        setNotification(null);\r\n      }, 4000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [notification]);\r\n\r\n  const showNotification = (type: ": "forms.messagestringnullnul1",
  ", message: string) => {\r\n    setNotification({ type, message });\r\n  };\r\n\r\n  // Fonctions pour la gestion du profil\r\n  const handleClickChangePhoto = () => {\r\n    fileInputRef.current?.click();\r\n  };\r\n\r\n  const handleProfilePicChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    ": "common.messagestringsetnoti",
  ", metadata);\r\n\r\n      // Simuler un délai d": "common.metadatasimulerundel1",
  ", newCurrency);\r\n    setCurrency(newCurrency);\r\n    setIsCurrencyMenuOpen(false);\r\n  };\r\n\r\n  // Fermeture des dropdowns au clic extérieur\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        languageDropdownRef.current &&\r\n        !languageDropdownRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsLanguageMenuOpen(false);\r\n      }\r\n      if (\r\n        currencyDropdownRef.current &&\r\n        !currencyDropdownRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsCurrencyMenuOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(": "navigation.newcurrencysetcurren1",
  ", newLanguage);\r\n    setLanguage(newLanguage);\r\n    setIsLanguageMenuOpen(false);\r\n  };\r\n\r\n  // Fermeture au clic extérieur\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        languageDropdownRef.current &&\r\n        !languageDropdownRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsLanguageMenuOpen(false);\r\n      }\r\n      if (\r\n        currencyDropdownRef.current &&\r\n        !currencyDropdownRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsCurrencyMenuOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(": "navigation.newlanguagesetlangua1",
  ", options.fileName);\r\n      }\r\n\r\n      // XMLHttpRequest pour suivre le progrès\r\n      return new Promise((resolve) => {\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.upload.addEventListener(": "forms.optionsfilenamexmlht1",
  ", parseInt(e.target.value))}\r\n              min=\"1\"\r\n              max=\"1440\"\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n            />\r\n            <p className=\"text-xs text-gray-500 mt-1\">Après échecs de connexion</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6\">\r\n          <div className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n            <div>\r\n              <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">Protection force brute</h4>\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">Détection automatique des attaques</p>\r\n            </div>\r\n            <label className=\"flex items-center cursor-pointer\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.bruteForceProtection}\r\n                onChange={(e) => updateSetting(": "auth.parseintetargetvalue",
  ", parseInt(e.target.value))}\r\n              min=\"15\"\r\n              max=\"480\"\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n            />\r\n            <p className=\"text-xs text-gray-500 mt-1\">Sessions plus courtes pour les comptes administrateur (recommandé: 60 minutes)</p>\r\n          </div>\r\n\r\n          <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <AlertTriangle className=\"w-4 h-4 text-yellow-600 dark:text-yellow-400\" />\r\n              <h4 className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200\">Recommandations de sécurité</h4>\r\n            </div>\r\n            <ul className=\"mt-2 text-xs text-yellow-700 dark:text-yellow-300 space-y-1\">\r\n              <li>• Activez la 2FA pour tous les comptes administrateur</li>\r\n              <li>• Utilisez des mots de passe complexes avec symboles</li>\r\n              <li>• Limitez les tentatives de connexion à 3-5 maximum</li>\r\n              <li>• Activez la liste blanche IP pour l": "auth.parseintetargetvalue1",
  ", parseInt(e.target.value))}\r\n              min=\"3\"\r\n              max=\"10\"\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n            />\r\n            <p className=\"text-xs text-gray-500 mt-1\">Avant verrouillage du compte</p>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n              Durée de verrouillage (minutes)\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              value={settings.lockoutDuration}\r\n              onChange={(e) => updateSetting(": "forms.parseintetargetvalue",
  ", parseInt(e.target.value))}\r\n              min=\"6\"\r\n              max=\"32\"\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n            />\r\n            <p className=\"text-xs text-gray-500 mt-1\">Recommandé: 8 caractères minimum</p>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n              Délai d": "forms.parseintetargetvalue1",
  ", parseInt(e.target.value))}\r\n          min=\"1\"\r\n          max=\"100\"\r\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n          Types de fichiers autorisés\r\n        </label>\r\n        <div className=\"grid grid-cols-3 gap-2\">\r\n          {[": "forms.parseintetargetvalue2",
  ", port USB, matériau imperméable et design ergonomique.',\r\n        variants: ['Noir', 'Gris', 'Bleu Marine'],\r\n        stock: 15000,\r\n        tags: ['USB Port', 'Imperméable', '15.6": "forms.portusbmateriauimper",
  ", profileRef.id);\r\n\r\n        // Créer quelques collaborations de test\r\n        const collaborations = [\r\n            {\r\n                influencerId: profileRef.id,\r\n                brand: ": "common.profilerefidcreerque",
  ", progress: 0 } : img\r\n      ));\r\n\r\n      // Simuler le progrès d": "common.progress0imgsimulerl1",
  ", revenue: 21800, orders: 64 },\r\n              ].map((supplier, index) => (\r\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                  <div className=\"flex items-center\">\r\n                    <div className=\"h-8 w-8 rounded-full bg-gradient-to-r from-red-400 to-red-600 flex items-center justify-center mr-3\">\r\n                      <span className=\"text-white font-medium text-sm\">\r\n                        {supplier.name.charAt(0)}\r\n                      </span>\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                        {supplier.name}\r\n                      </p>\r\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                        {supplier.orders} commandes\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"text-sm font-semibold text-gray-900 dark:text-white\">\r\n                    {formatPrice(supplier.revenue)}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Recent Activity */}\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-6\">\r\n              Activité Récente\r\n            </h3>\r\n            <div className=\"space-y-4\">\r\n              {[\r\n                { text: ": "forms.revenue21800orders64",
  ", searchQuery);\n    }\n  }, [searchQuery]);\n\n  // Mémorisation des catégories pour éviter les re-renders\n  const categories = useMemo(() => [\n    { name: t(": "forms.searchquerysearchque1",
  ", searchQuery);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-gray-900\">\n      {/* Hero Section avec paysage chinois stylisé */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"relative h-[70vh] min-h-[500px] bg-gradient-to-br from-blue-400 via-blue-600 to-purple-800 flex items-center justify-center\">\n          {/* Effet de soleil */}\n          <div \n            className=\"absolute top-16 left-48 w-20 h-20 rounded-full opacity-80\"\n            style={{\n              background: ": "navigation.searchqueryreturndiv",
  ", settings);\r\n    setHasChanges(false);\r\n    // Afficher un toast de succès\r\n  };\r\n\r\n  const tabs = [\r\n    { id: ": "admin.settingssethaschange1",
  ", snapshot.size);\r\n\r\n            setResult(`✅ Connexion Firebase OK\r\nAuth: ${auth.currentUser?.email || ": "auth.snapshotsizesetresul",
  ", stopOpacity: 0.6 }} />\n              </linearGradient>\n            </defs>\n\n            {/* Montagne arrière *": "common.stopopacity06linearg",
  ", stopOpacity: 0.6 }} />\n              </linearGradient>\n            </defs>\n\n            {/* Montagne arrière */}\n            <path d=\"M0,400 L200,180 L400,220 L600,140 L800,160 L1000,100 L1200,140 L1200,400 Z\" fill=\"url(#mountain3)\" />\n\n            {/* Montagne moyenne */}\n            <path d=\"M0,400 L150,200 L350,240 L550,160 L750,180 L950,120 L1200,160 L1200,400 Z\" fill=\"url(#mountain2)\" />\n\n            {/* Montagne avant */}\n            <path d=\"M0,400 L100,220 L300,200 L500,280 L700,150 L900,180 L1100,140 L1200,180 L1200,400 Z\" fill=\"url(#mountain1)\" />\n          </svg>          {/* Logo et titre au centre */}\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center text-center z-20\">\n            <div className={`flex items-center mb-4 transform transition-all duration-1000 delay-300 ${isLoaded ? ": "forms.stopopacity06linearg",
  ", stopOpacity: 0.7}} />\n              </linearGradient>\n            </defs>\n            \n            {/* Montagne arrière *": "common.stopopacity07linearg",
  ", stopOpacity: 0.7}} />\n              </linearGradient>\n            </defs>\n            \n            {/* Montagne arrière */}\n            <path d=\"M0,400 L200,180 L400,220 L600,140 L800,160 L1000,100 L1200,140 L1200,400 Z\" fill=\"url(#mountain3)\" />\n            \n            {/* Montagne moyenne */}\n            <path d=\"M0,400 L150,200 L350,240 L550,160 L750,180 L950,120 L1200,160 L1200,400 Z\" fill=\"url(#mountain2)\" />\n            \n            {/* Montagne avant */}\n            <path d=\"M0,400 L100,220 L300,200 L500,280 L700,150 L900,180 L1100,140 L1200,180 L1200,400 Z\" fill=\"url(#mountain1)\" />\n          </svg>\n\n          {/* Logo et titre au centre */}\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center text-center z-10\">\n            <div className={`flex items-center mb-4 transform transition-all duration-1000 delay-300 ${\n              isLoaded ? ": "forms.stopopacity07linearg",
  ", stopOpacity: 0.7}} />\r\n              </linearGradient>\r\n            </defs>\r\n            \r\n            {/* Montagne arrière *": "common.stopopacity07linearg2",
  ", stopOpacity: 0.7}} />\r\n              </linearGradient>\r\n            </defs>\r\n            \r\n            {/* Montagne arrière */}\r\n            <path d=\"M0,400 L200,180 L400,220 L600,140 L800,160 L1000,100 L1200,140 L1200,400 Z\" fill=\"url(#mountain3)\" />\r\n            \r\n            {/* Montagne moyenne */}\r\n            <path d=\"M0,400 L150,200 L350,240 L550,160 L750,180 L950,120 L1200,160 L1200,400 Z\" fill=\"url(#mountain2)\" />\r\n            \r\n            {/* Montagne avant */}\r\n            <path d=\"M0,400 L100,220 L300,200 L500,280 L700,150 L900,180 L1100,140 L1200,180 L1200,400 Z\" fill=\"url(#mountain1)\" />\r\n          </svg>          {/* Navigation en haut */}\r\n          <div className=\"absolute top-0 left-0 right-0 flex justify-between items-center p-6 z-10 backdrop-blur-sm\">            <div className=\"flex items-center space-x-4\">\r\n              <Menu className=\"h-6 w-6 text-white hover:text-orange-200 transition-colors cursor-pointer\" />\r\n              <span className=\"text-white text-sm font-medium\">Menu</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-8\">\r\n              <div className=\"flex items-center space-x-2 hover:text-orange-200 transition-colors cursor-pointer\">\r\n                <Globe className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 hover:text-orange-200 transition-colors cursor-pointer\">\r\n                <Search className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 hover:text-orange-200 transition-colors cursor-pointer\">\r\n                <Heart className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 hover:text-orange-200 transition-colors cursor-pointer\">\r\n                <Bell className=\"h-5 w-5 text-white\" />\r\n                <span className=\"bg-orange-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center font-bold animate-pulse\">3</span>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 hover:text-orange-200 transition-colors cursor-pointer\">\r\n                <User className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              <button className=\"bg-white text-gray-800 px-6 py-2 rounded-full text-sm font-bold hover:bg-orange-50 hover:text-orange-600 transition-all duration-300 transform hover:scale-105 shadow-lg\">\r\n                S": "navigation.stopopacity07linearg",
  ", stopOpacity: 0.7}} />\r\n              </linearGradient>\r\n            </defs>\r\n            \r\n            {/* Montagne arrière */}\r\n            <path d=\"M0,400 L200,180 L400,220 L600,140 L800,160 L1000,100 L1200,140 L1200,400 Z\" fill=\"url(#mountain3)\" />\r\n            \r\n            {/* Montagne moyenne */}\r\n            <path d=\"M0,400 L150,200 L350,240 L550,160 L750,180 L950,120 L1200,160 L1200,400 Z\" fill=\"url(#mountain2)\" />\r\n            \r\n            {/* Montagne avant */}\r\n            <path d=\"M0,400 L100,220 L300,200 L500,280 L700,150 L900,180 L1100,140 L1200,180 L1200,400 Z\" fill=\"url(#mountain1)\" />\r\n          </svg>          {/* Navigation en haut */}\r\n          <div className=\"absolute top-0 left-0 right-0 flex justify-between items-center p-6 z-10 backdrop-blur-sm\">            <div className=\"flex items-center space-x-4\">\r\n              <Menu className=\"h-6 w-6 text-white hover:text-orange-200 transition-colors cursor-pointer\" />\r\n              <span className=\"text-white text-sm font-medium\">Menu</span>\r\n            </div>\r\n            <div className=\"flex items-center space-x-8\">\r\n              <div className=\"flex items-center space-x-2 hover:text-orange-200 transition-colors cursor-pointer\">\r\n                <Globe className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 hover:text-orange-200 transition-colors cursor-pointer\">\r\n                <Search className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 hover:text-orange-200 transition-colors cursor-pointer\">\r\n                <Heart className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 hover:text-orange-200 transition-colors cursor-pointer\">\r\n                <Bell className=\"h-5 w-5 text-white\" />                <span className=\"bg-orange-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center font-bold animate-pulse\">3</span>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 hover:text-orange-200 transition-colors cursor-pointer\">\r\n                <User className=\"h-5 w-5 text-white\" />\r\n              </div>\r\n              <button className=\"bg-white text-gray-800 px-6 py-2 rounded-full text-sm font-bold hover:bg-orange-50 hover:text-orange-600 transition-all duration-300 transform hover:scale-105 shadow-lg\">\r\n                S": "navigation.stopopacity07linearg1",
  ", tempUser.uid);\r\n\r\n            // 6. Mettre à jour le profil\r\n            await updateProfile(tempUser, {\r\n                displayName: userData.name\r\n            });\r\n\r\n            // 7. Créer le document Firestore (sur l": "forms.tempuseruid6mettreaj",
  ", testUser.email);\r\n            const result = await adminUserServiceFixed.createUser(testUser);\r\n\r\n            if (result.success) {\r\n                setResult(`✅ Succès: Utilisateur créé avec l": "auth.testuseremailconstre1",
  ", uid), userDocument);\r\n\r\n                console.log(`✅ Utilisateur Firestore ${testUser.email} créé avec succès`);\r\n                results.push({ email: testUser.email, success: true });\r\n\r\n                // Délai pour éviter de surcharger Firestore\r\n                await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n            } catch (error: any) {\r\n                console.error(`❌ Erreur Firestore pour ${testUser.email}:`, error);\r\n                results.push({\r\n                    email: testUser.email,\r\n                    success: false,\r\n                    error: error.message\r\n                });\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    ": "auth.uiduserdocumentconso",
  ", uid), userDocument);\r\n\r\n                console.log(`✅ Utilisateur Firestore ${testUser.email} créé avec succès`);\r\n                results.push({ email: testUser.email, success: true });\r\n\r\n                // Délai pour éviter de surcharger Firestore\r\n                await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n            } catch (error: any) {\r\n                console.error(`❌ Erreur Firestore pour ${testUser.email}:`, error);\r\n                results.push({\r\n                    email: testUser.email,\r\n                    success: false,\r\n                    error: error.message\r\n                });\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Affiche les identifiants de test (pour information)\r\n     */\r\n    displayTestCredentials(): void {\r\n        console.log(": "auth.uiduserdocumentconso1",
  ", unreadCount.toString())\r\n              }\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Notifications List *": "common.unreadcounttostrings",
  ", userData);\n      const { error } = await firebaseAuthService.updateUser(user.id, userData);\n\n      if (error) throw error;\n\n      // Mettre à jour l": "admin.userdataconsterroraw1",
  ", userData.email);\r\n\r\n            // 1. Validation des données\r\n            const validation = this.validateAdminData(userData);\r\n            if (!validation.valid) {\r\n                return {\r\n                    success: false,\r\n                    message: validation.message\r\n                };\r\n            }\r\n\r\n            // 2. Créer l": "auth.userdataemail1valida1",
  ", userData.email);\r\n\r\n            // 1. Vérifier l": "auth.userdataemail1verifi2",
  ", userData.email);\r\n\r\n            // Vérification basique de l": "auth.userdataemailverific1",
  ", userData.email);\r\n\r\n            // Vérifier si un admin est connecté\r\n            if (!currentUser) {\r\n                console.error(": "auth.userdataemailverifie1",
  ", userDoc.id)));\r\n            });\r\n\r\n            await Promise.all(deletePromises);\r\n\r\n            setResults(prev => prev + `✅ ${usersSnapshot.size} utilisateur(s) supprimé(s)\\n`);\r\n\r\n            return { success: true, deletedCount: usersSnapshot.size };\r\n\r\n        } catch (error: any) {\r\n            setResults(prev => prev + `❌ Erreur: ${error.message}\\n`);\r\n            return { success: false, error: error.message };\r\n        } finally {\r\n            setIsDeleting(false);\r\n        }\r\n    };\r\n\r\n    const createNewUsers = async () => {\r\n        setIsCreating(true);\r\n        setResults(prev => prev + ": "forms.userdocidawaitpromis1",
  ", userId)\r\n            );\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            if (querySnapshot.empty) return null;\r\n\r\n            const doc = querySnapshot.docs[0];\r\n            return {\r\n                id: doc.id,\r\n                ...doc.data(),\r\n                createdAt: doc.data().createdAt.toDate(),\r\n                updatedAt: doc.data().updatedAt.toDate()\r\n            } as InfluencerProfile;\r\n        } catch (error) {\r\n            console.error(": "admin.useridconstquerysnap",
  ", userId));\n      if (!userDoc.exists()) return null;\n      const data = userDoc.data() as User;\n      return {\n        ...data,\n        favorites: data.favorites || [],\n        messages: data.messages || [],\n        browsingHistory: data.browsingHistory || []\n      };\n    } catch (error) {\n      console.error(": "admin.useridifuserdocexist",
  ", userId);\r\n\r\n            // Supprimer d": "forms.useridsupprimerd",
  ", userId);\r\n\r\n            const userRef = doc(db, this.collectionName, userId);\r\n            const updatePayload = {\r\n                ...updateData,\r\n                updatedAt: new Date().toISOString(),\r\n                updated_at: new Date().toISOString()\r\n            };\r\n\r\n            await updateDoc(userRef, updatePayload);\r\n\r\n            // Récupérer l": "forms.useridconstuserrefdo1",
  ", userRef.id);\r\n\r\n        // Créer le profil influenceur correspondant\r\n        const influencerProfile = {\r\n            userId: userRef.id,\r\n            name: ": "forms.userrefidcreerleprof",
  ", {\r\n      language: isLanguageMenuOpen,\r\n      notification: isNotificationCenterOpen,\r\n      currency: isCurrencyMenuOpen\r\n    });\r\n  }, [isLanguageMenuOpen, isNotificationCenterOpen, isCurrencyMenuOpen]);\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"bg-gradient-to-br from-blue-600 via-blue-500 to-orange-400 shadow-md sticky top-0 z-50\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex justify-between items-center h-16\">\r\n            {/* Logo */}\r\n            <div className=\"flex items-center space-x-4\">\r\n              <Link to=\"/\" className=\"flex items-center\">\r\n                <ShoppingBag className=\"h-8 w-8 text-white\" />\r\n                <span className=\"ml-2 text-xl font-bold text-white font-display\">Chine ton usine</span>\r\n              </Link>\r\n            </div>\r\n\r\n            {/* Navigation */}\r\n            <div className=\"flex items-center space-x-4\">\r\n              {/* Language selector avec isolation complète */}\r\n              <div className=\"relative\" ref={languageDropdownRef}>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleLanguageClick}\r\n                  className=\"flex items-center space-x-2 text-white hover:text-orange-200 transition-colors cursor-pointer p-2 rounded focus:outline-none focus:ring-2 focus:ring-orange-300\"\r\n                  title=\"Changer la langue\"\r\n                  aria-label=\"Sélecteur de langue\"\r\n                >\r\n                  <Globe className=\"h-5 w-5\" />\r\n                </button>\r\n\r\n                {isLanguageMenuOpen && (\r\n                  <div className=\"origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-gray-700 ring-1 ring-black ring-opacity-5 focus:outline-none z-50\">\r\n                    {availableLanguages.map((code) => (\r\n                      <button\r\n                        key={code}\r\n                        type=\"button\"\r\n                        onClick={() => handleLanguageChange(code)}\r\n                        className={`${\r\n                          language === code ? ": "navigation.languageislanguageme",
  "../styles/profile-animations.css": "common.stylesprofileanimati",
  "./styles/notifications.css": "common.stylesnotificationsc1",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Catégorie d": "common.svgdivdivdivcategori",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Catégorie d'influence */}\r\n                <div className=": "forms.svgdivdivdivcategori",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Catégorie de produits *": "ecommerce.svgdivdivdivcategori1",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Catégorie de produits */}\r\n                <div className=": "forms.svgdivdivdivcategori1",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Dépôt de documents *": "common.svgdivdivdivdepotded",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Dépôt de documents */}\r\n                <div className=": "forms.svgdivdivdivdepotded",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Message de présentation *": "common.svgdivdivdivmessaged",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Message de présentation */}\r\n                <div className=": "forms.svgdivdivdivmessaged",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Numéro d": "common.svgdivdivdivnumerod",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Numéro d'enregistrement légal */}\r\n                <div className=": "forms.svgdivdivdivnumerode",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Pays et région de production *": "forms.svgdivdivdivpaysetre",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Pays et région de production */}\r\n                <div className=": "forms.svgdivdivdivpaysetre1",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>                {/* Dépôt de documents *": "common.svgdivdivdivdepotded1",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>                {/* Dépôt de documents */}\r\n                <div className=": "forms.svgdivdivdivdepotded1",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>                {/* Méthodes de contrôle qualité *": "common.svgdivdivdivmethodes",
  "/>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>                {/* Méthodes de contrôle qualité */}\r\n                <div className=": "forms.svgdivdivdivmethodes",
  "/>\r\n                    </svg>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}            {/* Champs spécifiques pour les influenceurs *": "common.svgdivdivdivchampssp",
  "/>\r\n                    </svg>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}            {/* Champs spécifiques pour les influenceurs */}\r\n            {!isLoginMode && selectedRole === 'influencer' && (\r\n              <div className=": "auth.svgdivdivdivchampssp",
  "/>\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Sélecteur de rôle *": "common.svgdivdivdivselecteu",
  "/>\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Sélecteur de rôle */}\r\n            <div className=": "forms.svgdivdivdivselecteu",
  "/>\r\n      </svg>\r\n    )\r\n  }\r\n};\r\n\r\nconst SocialMediaModal: React.FC<SocialMediaModalProps> = ({\r\n  isOpen,\r\n  selectedNetworks,\r\n  existingLinks,\r\n  onClose,\r\n  onSave\r\n}) => {\r\n  const { t } = useLanguage();\r\n  const [links, setLinks] = useState<SocialMediaLink[]>([]);\r\n  const [errors, setErrors] = useState<Record<SocialNetwork, string>>({} as Record<SocialNetwork, string>);\r\n  const modalRef = useRef<HTMLDivElement>(null);\r\n  const firstInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Initialiser les liens avec les valeurs existantes\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      const initialLinks: SocialMediaLink[] = selectedNetworks.map(network => {\r\n        const existingLink = existingLinks.find(link => link.network === network);\r\n        return {\r\n          network,\r\n          url: existingLink?.url || ''\r\n        };\r\n      });\r\n      setLinks(initialLinks);\r\n      setErrors({} as Record<SocialNetwork, string>);\r\n      \r\n      // Focus sur le premier champ après l'animation\r\n      setTimeout(() => {\r\n        firstInputRef.current?.focus();\r\n      }, 150);\r\n    }\r\n  }, [isOpen, selectedNetworks, existingLinks]);\r\n\r\n  // Gestion de l'accessibilité clavier\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape') {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('keydown', handleKeyDown);\r\n      // Empêcher le scroll du body\r\n      document.body.style.overflow = 'hidden';\r\n      \r\n      return () => {\r\n        document.removeEventListener('keydown', handleKeyDown);\r\n        document.body.style.overflow = 'unset';\r\n      };\r\n    }\r\n  }, [isOpen, onClose]);\r\n\r\n  const validateUrl = (url: string, network: SocialNetwork): string => {\r\n    if (!url.trim()) {\r\n      return t('socialMediaModal.urlRequired');\r\n    }\r\n    \r\n    // Validation basique d'URL\r\n    try {\r\n      new URL(url);\r\n    } catch {\r\n      return t('socialMediaModal.urlInvalid');\r\n    }\r\n    \r\n    // Validation spécifique selon le réseau\r\n    const domain = socialNetworkData[network].placeholder.split('/')[2];\r\n    if (!url.includes(domain)) {\r\n      return t('socialMediaModal.urlInvalidDomain');\r\n    }\r\n    \r\n    return '';\r\n  };\r\n\r\n  const handleUrlChange = (network: SocialNetwork, url: string) => {\r\n    setLinks(prev => \r\n      prev.map(link => \r\n        link.network === network ? { ...link, url } : link\r\n      )\r\n    );\r\n    \r\n    // Effacer l'erreur si l'utilisateur tape\r\n    if (errors[network]) {\r\n      setErrors(prev => ({ ...prev, [network]: '' }));\r\n    }\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const newErrors: Record<SocialNetwork, string> = {} as Record<SocialNetwork, string>;\r\n    let hasErrors = false;\r\n\r\n    links.forEach(link => {\r\n      const error = validateUrl(link.url, link.network);\r\n      if (error) {\r\n        newErrors[link.network] = error;\r\n        hasErrors = true;\r\n      }\r\n    });\r\n\r\n    setErrors(newErrors);\r\n\r\n    if (!hasErrors) {\r\n      onSave(links);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleBackdropClick = (e: React.MouseEvent) => {\r\n    if (e.target === modalRef.current) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div \r\n      ref={modalRef}\r\n      className=": "navigation.svgconstsocialmediam",
  "/categories/machinery.svg": "common.categoriesmachinerys",
  "/contact": "common.contact",
  "/cookies": "common.cookies",
  "/profile": "common.profile5",
  "/public/categories/machinery.svg": "common.publiccategoriesmach",
  "/supplier/messages": "ecommerce.suppliermessages3",
  "1 demande de contact fournisseur": "ecommerce.1demandedecontactfou",
  "1 reel de déballage": "common.1reeldedeballage3",
  "1 étoile": "common.1etoile1",
  "1. Recherchez vos produits": "ecommerce.1recherchezvosprodui",
  "123 Rue de la Paix, 75001 Paris, France": "common.123ruedelapaix75001p2",
  "123 Technology Street, Nanshan District, Shenzhen, Chine": "common.123technologystreetn",
  "13mm graphène": "common.13mmgraphene1",
  "2 litiges en attente de résolution": "common.2litigesenattenteder1",
  "2 étoiles": "common.2etoiles1",
  "2. Contact suppliers": "ecommerce.2contactsuppliers",
  "2. Contactez les fournisseurs": "ecommerce.2contactezlesfournis",
  "2FA désactivée. Votre compte est moins sécurisé.": "common.2fadesactiveevotreco1",
  "3 nouveaux messages": "common.3nouveauxmessages1",
  "3 étoiles": "common.3etoiles1",
  "3. Contact": "common.3contact",
  "3. Contactez": "common.3contactez",
  "321 Rue de la Beauté, 33000 Bordeaux, France": "common.321ruedelabeaute33005",
  "4 étoiles": "common.4etoiles1",
  "456 Avenue des Champs, 69000 Lyon, France": "common.456avenuedeschamps692",
  "5 produits en rupture de stock": "ecommerce.5produitsenrupturede",
  "5 étoiles": "common.5etoiles1",
  "5g par écouteur": "common.5gparecouteur1",
  "654 Place du Commerce, 59000 Lille, France": "common.654placeducommerce591",
  "789 Boulevard Industriel, 13000 Marseille, France": "common.789boulevardindustri1",
  ":\n            // Pour les fournisseurs, on affiche un message de confirmation plutôt que de rediriger\n            alert(t(": "ecommerce.pourlesfournisseurso2",
  ":\n            // Pour les sourceurs et influenceurs, on affiche un message de confirmation plutôt que de rediriger\n            alert(t(": "common.pourlessourceursetin1",
  ":\r\n                return <AlertCircle className=\"w-4 h-4\" />;\r\n            default:\r\n                return <Clock className=\"w-4 h-4\" />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <div className=\"space-y-6 p-6\">\r\n                {/* En-tête */}\r\n                <BackButton to=\"/admin/dashboard\" label=\"Retour au tableau de bord\" variant=\"ghost\" />\r\n\r\n                <div>\r\n                    <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                        Gestion de la Base de Données\r\n                    </h1>\r\n                    <p className=\"text-gray-600 dark:text-gray-400\">\r\n                        Surveillez et gérez votre base de données, créez des sauvegardes et analysez les performances\r\n                    </p>\r\n                </div>\r\n\r\n                {/* Statistiques générales */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n                        <div className=\"flex items-center\">\r\n                            <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                                <HardDrive className=\"h-6 w-6 text-blue-600\" />\r\n                            </div>\r\n                            <div className=\"ml-4\">\r\n                                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Taille totale</p>\r\n                                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{stats.totalSize}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n                        <div className=\"flex items-center\">\r\n                            <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                                <Database className=\"h-6 w-6 text-green-600\" />\r\n                            </div>\r\n                            <div className=\"ml-4\">\r\n                                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Tables</p>\r\n                                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{stats.tables}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n                        <div className=\"flex items-center\">\r\n                            <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n                                <Activity className=\"h-6 w-6 text-purple-600\" />\r\n                            </div>\r\n                            <div className=\"ml-4\">\r\n                                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Enregistrements</p>\r\n                                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                                    {stats.records.toLocaleString()}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n                        <div className=\"flex items-center\">\r\n                            <div className=\"p-2 bg-orange-100 rounded-lg\">\r\n                                <Server className=\"h-6 w-6 text-orange-600\" />\r\n                            </div>\r\n                            <div className=\"ml-4\">\r\n                                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Connexions</p>\r\n                                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{stats.connections}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Statut du serveur */}\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n                    <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n                        Statut du Serveur\r\n                    </h2>\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                        <div>\r\n                            <div className=\"flex items-center justify-between py-2\">\r\n                                <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Uptime</span>\r\n                                <span className=\"text-sm text-gray-900 dark:text-white\">{stats.uptime}</span>\r\n                            </div>\r\n                            <div className=\"flex items-center justify-between py-2\">\r\n                                <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Dernière sauvegarde</span>\r\n                                <span className=\"text-sm text-gray-900 dark:text-white\">\r\n                                    {stats.lastBackup.toLocaleString(": "auth.returnalertcirclecla",
  ":\r\n        isValid = value.trim().length >= 2;\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n\r\n    return isValid\r\n      ? <CheckCircle size={16} className=\"text-green-500 absolute right-3 top-1/2 transform -translate-y-1/2\" />\r\n      : <X size={16} className=\"text-red-500 absolute right-3 top-1/2 transform -translate-y-1/2\" />;\r\n  };\r\n\r\n  // Données fictives pour illustration\r\n  const fakeOrders = [\r\n    { id: ": "forms.isvalidvaluetrimleng",
  ":\r\n        return renderCompanySettings(); // Simplifié pour l": "admin.returnrendercompanys3",
  ":\r\n        return renderSecuritySettings();\r\n      default:\r\n        return renderGeneralSettings();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AdminLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n              Paramètres de la Plateforme\r\n            </h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Configurez les paramètres généraux de la plateforme\r\n            </p>\r\n          </div>\r\n          <Button\r\n            onClick={handleSave}\r\n            disabled={loading}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            {loading ? (\r\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\r\n            ) : (\r\n              <Save size={16} />\r\n            )}\r\n            Sauvegarder\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\r\n          {/* Tabs */}\r\n          <div className=\"border-b border-gray-200 dark:border-gray-700\">\r\n            <nav className=\"flex space-x-8 px-6\">\r\n              {tabs.map((tab) => (\r\n                <button\r\n                  key={tab.id}\r\n                  onClick={() => setActiveTab(tab.id)}\r\n                  className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2 transition-colors ${activeTab === tab.id\r\n                      ? ": "forms.returnrendersecurity",
  ":`, error);\r\n    }\r\n  }, [key, storedValue]);\r\n\r\n  return [storedValue, setValue] as const;\r\n};\r\n\r\n// Hook pour throttle (limitation des appels)\r\nexport const useThrottle = <T extends (...args: any[]) => any>(\r\n  callback: T,\r\n  delay: number\r\n): T => {\r\n  const lastCall = useRef<number>(0);\r\n  const timeoutRef = useRef<NodeJS.Timeout>();\r\n\r\n  return useCallback((...args: Parameters<T>) => {\r\n    const now = Date.now();\r\n    \r\n    if (now - lastCall.current >= delay) {\r\n      lastCall.current = now;\r\n      return callback(...args);\r\n    } else {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = setTimeout(() => {\r\n        lastCall.current = Date.now();\r\n        callback(...args);\r\n      }, delay - (now - lastCall.current));\r\n    }\r\n  }, [callback, delay]) as T;\r\n};\r\n\r\n// Hook pour la gestion optimisée des états de formulaire\r\nexport const useFormState = <T extends Record<string, any>>(initialState: T) => {\r\n  const [state, setState] = useState<T>(initialState);\r\n  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});\r\n  const [touched, setTouched] = useState<Partial<Record<keyof T, boolean>>>({});\r\n\r\n  const setValue = useCallback((field: keyof T, value: any) => {\r\n    setState(prev => ({ ...prev, [field]: value }));\r\n    if (errors[field]) {\r\n      setErrors(prev => ({ ...prev, [field]: undefined }));\r\n    }\r\n  }, [errors]);\r\n\r\n  const setError = useCallback((field: keyof T, error: string) => {\r\n    setErrors(prev => ({ ...prev, [field]: error }));\r\n  }, []);\r\n\r\n  const setTouched = useCallback((field: keyof T) => {\r\n    setTouched(prev => ({ ...prev, [field]: true }));\r\n  }, []);\r\n\r\n  const reset = useCallback(() => {\r\n    setState(initialState);\r\n    setErrors({});\r\n    setTouched({});\r\n  }, [initialState]);\r\n\r\n  return {\r\n    state,\r\n    errors,\r\n    touched,\r\n    setValue,\r\n    setError,\r\n    setTouched,\r\n    reset\r\n  };\r\n};\r\n\r\n": "navigation.errorkeystoredvaluer",
  ";\n\n// Exchange rates relative to CNY (Chinese Yuan)\nexport const exchangeRates: ExchangeRates = {\n  CNY: 1.00,   ": "common.exchangeratesrelativ",
  ";\n\nclass FirebaseAuthService {\n  private currentUser: FirebaseUser | null = null;\n\n  constructor() {\n    // Écouter les changements d": "admin.classfirebaseauthser1",
  ";\n\nconst Navbar: React.FC = () => {\n  const { user, logout } = useAuth();\n  const { language, setLanguage, t, getLanguageName, availableLanguages } = useLanguage();\n  const { currency, setCurrency, currencyNames } = useCurrency();\n  const { isDarkMode, toggleTheme } = useTheme();\n\n  // Debug: vérifier l": "auth.constnavbarreactfcco1",
  ";\n\nconst NotFoundPage: React.FC = () => {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center items-center px-4 py-12\">\n      <h1 className=\"text-6xl font-bold text-blue-700\">404</h1>\n      <h2 className=\"mt-4 text-2xl font-bold text-gray-900\">Page non trouvée</h2>\n      <p className=\"mt-2 text-gray-600 text-center max-w-md\">\n        La page que vous recherchez n": "forms.constnotfoundpagerea",
  ";\n\nconst ProductPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const { t, language } = useLanguage();\n  const { user, updateUser } = useAuth();\n  const { currency } = useCurrency();\n  const [product, setProduct] = useState<Product | null>(null);\n  const [activeImage, setActiveImage] = useState(0);\n  const [showContactForm, setShowContactForm] = useState(false);\n  const [showSampleForm, setShowSampleForm] = useState(false);\n  const [message, setMessage] = useState(": "admin.constproductpagereac",
  ";\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: UserRole;\n  language: UserLanguage;\n  currency: string;\n  favorites: string[];\n  browsingHistory: string[];\n  messages: Message[];\n  created_at: string;\n  updated_at: string;\n  last_login?: string;\n  subscription?: string;\n}\n\nexport type Permission = {\n  id: string;\n  name: string;\n  description: string;\n};\n\nexport type Role = {\n  id: string;\n  name: UserRole;\n  description: string;\n  permissions: Permission[];\n};\n\nexport type Product = {\n  id: string;\n  name: string;\n  category: string;\n  description: {\n    chinese: string;\n    english: string;\n    french: string;\n  };\n  images: string[];\n  video?: {\n    url: string;\n    type: ": "auth.exportinterfaceuseri",
  ";\n\nexport type ExchangeRates = {\n  EUR: number;\n  USD: number;\n  GBP: number;\n  CNY: number;\n  AED: number;\n};\n\nexport type Subscription = {\n  id: string;\n  name: string;\n  price: number;\n  currency: UserCurrency;\n  features: string[];\n  isPopular?: boolean;\n};\n\n// Interface pour la compatibilité avec la base de données\nexport type DatabaseUser = {\n  id: string;\n  email: string;\n  name: string | null;\n  role: UserRole;\n  language: UserLanguage;\n  currency: UserCurrency;\n  subscription: SubscriptionTier;\n  favorites: string[]; ": "auth.exporttypeexchangera",
  ";\n\nexport type ExchangeRates = {\n  EUR: number;\n  USD: number;\n  GBP: number;\n  CNY: number;\n  AED: number;\n};\n\nexport type Subscription = {\n  id: string;\n  name: string;\n  price: number;\n  currency: UserCurrency;\n  features: string[];\n  isPopular?: boolean;\n};\n\n// Interface pour la compatibilité avec la base de données\nexport type DatabaseUser = {\n  id: string;\n  email: string;\n  name: string | null;\n  role: UserRole;\n  language: UserLanguage;\n  currency: UserCurrency;\n  subscription: SubscriptionTier;\n  favorites: string[]; // JSON array dans la DB\n  messages: Message[]; ": "auth.exporttypeexchangera1",
  ";\n\nexport type ExchangeRates = {\n  EUR: number;\n  USD: number;\n  GBP: number;\n  CNY: number;\n  AED: number;\n};\n\nexport type Subscription = {\n  id: string;\n  name: string;\n  price: number;\n  currency: UserCurrency;\n  features: string[];\n  isPopular?: boolean;\n};\n\n// Interface pour la compatibilité avec la base de données\nexport type DatabaseUser = {\n  id: string;\n  email: string;\n  name: string | null;\n  role: UserRole;\n  language: UserLanguage;\n  currency: UserCurrency;\n  subscription: SubscriptionTier;\n  favorites: string[]; // JSON array dans la DB\n  messages: Message[]; // JSON array dans la DB\n  browsing_history: string[]; // JSON array dans la DB\n  created_at: string;\n  updated_at: string;\n  last_login?: string;\n};\n\nexport type ContainerStatus = ": "auth.exporttypeexchangera2",
  ";\n\ninterface LanguageContextType {\n  language: UserLanguage;\n  setLanguage: (lang: UserLanguage) => void;\n  t: (key: string, params?: Record<string, any>) => string;\n  availableLanguages: UserLanguage[];\n  getLanguageName: (lang: UserLanguage) => string;\n}\n\nconst translations: Record<UserLanguage, Record<string, string>> = {\n  \"fr\": {\n    \"home\": \"Accueil\",\n    \"search\": \"Rechercher\",\n    \"search.placeholder\": \"Rechercher des produits...\",\n    \"dashboard\": \"Tableau de bord\",\n    \"nav.login\": \"Connexion\",\n    \"logout\": \"Déconnexion\",\n    \"discover\": \"Découvrir\",\n\n    \"notifications.title\": \"Notifications\",\n    \"notifications.noNotifications\": \"Aucune notification\",\n    \"notifications.noNotificationsMessage\": \"Vous n": "auth.interfacelanguagecon",
  ";\nimport { BarChart3, Package, TruckIcon, AlertCircle, DollarSign, Star, MessageSquare, FileText } from ": "common.importbarchart3packa",
  ";\nimport { ChevronLeft, Heart, MessageSquare, Package, ChevronDown, ChevronUp, Play } from ": "common.importchevronlefthea",
  ";\nimport { MessageSquare, Clock, Heart } from ": "common.importmessagesquarec",
  ";\nimport { useNotifications } from ": "common.importusenotificatio",
  ";\r\n\r\n            // Messages d": "common.messagesd",
  ";\r\n\r\n    /**\r\n     * Créer ou mettre à jour l": "common.creeroumettreajourl1",
  ";\r\n\r\n    /**\r\n     * Créer un nouvel utilisateur via Cloud Functions (recommandé)\r\n     * Cette méthode évite de déconnecter l": "admin.creerunnouvelutilisa2",
  ";\r\n\r\n    /**\r\n     * Créer un utilisateur UNIQUEMENT dans Firestore\r\n     * AUCUN appel à Firebase Auth - IMPOSSIBLE de déconnecter\r\n     *": "admin.creerunutilisateurun1",
  ";\r\n\r\n    /**\r\n     * Créer un utilisateur UNIQUEMENT dans Firestore\r\n     * AUCUN appel à Firebase Auth - IMPOSSIBLE de déconnecter\r\n     */\r\n    async createUserFirestoreOnly(userData: CreateUserData): Promise<{\r\n        success: boolean;\r\n        user?: any;\r\n        error?: string;\r\n    }> {\r\n        try {\r\n            console.log(": "admin.creerunutilisateurun2",
  ";\r\n\r\n    /**\r\n     * Récupérer tous les utilisateurs SANS aucune modification\r\n     * Cette méthode ne touche à rien, elle fait juste une lecture\r\n     *": "admin.recuperertouslesutil1",
  ";\r\n\r\n    /**\r\n     * Récupérer tous les utilisateurs SANS aucune modification\r\n     * Cette méthode ne touche à rien, elle fait juste une lecture\r\n     */\r\n    async getAllUsersReadOnly(): Promise<AdminUser[]> {\r\n        try {\r\n            console.log(": "admin.recuperertouslesutil2",
  ";\r\n\r\n    /**\r\n     * Vérifier si un email existe déjà\r\n     *": "auth.verifiersiunemailexi4",
  ";\r\n\r\n    /**\r\n     * Vérifier si un email existe déjà\r\n     */\r\n    private async checkEmailExists(email: string): Promise<boolean> {\r\n        try {\r\n            const q = query(\r\n                collection(db, this.collectionName),\r\n                where(": "auth.verifiersiunemailexi5",
  ";\r\n\r\n    /**\r\n     * Vérifier si un email existe déjà\r\n     */\r\n    private async checkIfEmailExists(email: string): Promise<boolean> {\r\n        try {\r\n            // Cette méthode vérifie seulement dans Firestore\r\n            // En production, utilisez Firebase Admin SDK pour vérifier Auth aussi\r\n            const snapshot = await import(": "auth.verifiersiunemailexi7",
  ";\r\n\r\n    /**\r\n     * Vérifier si un email existe déjà\r\n     */\r\n    private async checkIfEmailExists(email: string): Promise<boolean> {\r\n        try {\r\n            const q = query(\r\n                collection(db, this.collectionName),\r\n                where(": "auth.verifiersiunemailexi9",
  ";\r\n\r\n    // Utiliser le hook pour gérer les cartes\r\n    const { cards, loading, error, saveCard, updateCard, deleteCard } = useBusinessCards(currentSupplierId);\r\n\r\n    const [isEditorOpen, setIsEditorOpen] = useState(false);\r\n    const [editingCard, setEditingCard] = useState<SavedBusinessCard | null>(null);\r\n    const [viewMode, setViewMode] = useState<": "forms.utiliserlehookpourge1",
  ";\r\n\r\n/**\r\n * Hook personnalisé pour gérer la synchronisation automatique des utilisateurs\r\n * Firebase Auth vers Firestore\r\n */\r\nexport const useUserSync = (enabled: boolean = true) => {\r\n    const unsubscribeRef = useRef<(() => void) | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (enabled && !unsubscribeRef.current) {\r\n            // Démarrer la surveillance des connexions utilisateurs\r\n            unsubscribeRef.current = adminUserServiceFixed.startUserSyncMonitoring();\r\n\r\n            console.log(": "auth.hookpersonnalisepour2",
  ";\r\n\r\n/**\r\n * Interface pour les résultats de connexion\r\n *": "auth.interfacepourlesresu1",
  ";\r\n\r\n/**\r\n * Interface pour les résultats de connexion\r\n */\r\nexport interface LoginResult {\r\n    success: boolean;\r\n    user?: User;\r\n    error?: string;\r\n    redirectTo?: string;\r\n}\r\n\r\n/**\r\n * Interface pour la gestion des sessions\r\n */\r\nexport interface SessionInfo {\r\n    user: User;\r\n    loginTime: string;\r\n    lastActivity: string;\r\n    expiresAt: string;\r\n}\r\n\r\n/**\r\n * Service d": "auth.interfacepourlesresu2",
  ";\r\n\r\n/**\r\n * Obtient le nom du produit dans la langue spécifiée\r\n * @param product Le produit\r\n * @param language La langue souhaitée\r\n * @returns Le nom du produit dans la langue demandée ou un fallback\r\n *": "navigation.obtientlenomduprodui",
  ";\r\n\r\n/**\r\n * Obtient le nom du produit dans la langue spécifiée\r\n * @param product Le produit\r\n * @param language La langue souhaitée\r\n * @returns Le nom du produit dans la langue demandée ou un fallback\r\n */\r\nexport const getProductName = (product: any, language: UserLanguage): string => {\r\n  // Si le nom est déjà multilingue\r\n  if (typeof product.name === ": "navigation.obtientlenomduprodui2",
  ";\r\n\r\n/**\r\n * Script de diagnostic pour le problème de redirection admin\r\n * Ce script vérifie et corrige la configuration de l": "admin.scriptdediagnosticpo1",
  ";\r\n\r\n/**\r\n * Service centralisé de gestion des produits\r\n * Permet de synchroniser les produits entre la gestion fournisseur et la découverte\r\n */\r\nclass ProductsService {\r\n  private static instance: ProductsService;\r\n  private listeners: Array<() => void> = [];\r\n\r\n  static getInstance(): ProductsService {\r\n    if (!ProductsService.instance) {\r\n      ProductsService.instance = new ProductsService();\r\n    }\r\n    return ProductsService.instance;\r\n  }\r\n\r\n  /**\r\n   * Écouter les changements dans la liste des produits\r\n   *": "ecommerce.servicecentralisedeg",
  ";\r\n\r\n/**\r\n * Service centralisé de gestion des produits\r\n * Permet de synchroniser les produits entre la gestion fournisseur et la découverte\r\n */\r\nclass ProductsService {\r\n  private static instance: ProductsService;\r\n  private listeners: Array<() => void> = [];\r\n\r\n  static getInstance(): ProductsService {\r\n    if (!ProductsService.instance) {\r\n      ProductsService.instance = new ProductsService();\r\n    }\r\n    return ProductsService.instance;\r\n  }\r\n\r\n  /**\r\n   * Écouter les changements dans la liste des produits\r\n   */\r\n  subscribe(listener: () => void): () => void {\r\n    this.listeners.push(listener);\r\n    // Retourner une fonction pour se désabonner\r\n    return () => {\r\n      this.listeners = this.listeners.filter(l => l !== listener);\r\n    };\r\n  }\r\n\r\n  ": "navigation.servicecentralisedeg",
  ";\r\n\r\n/**\r\n * Service centralisé de gestion des produits\r\n * Permet de synchroniser les produits entre la gestion fournisseur et la découverte\r\n */\r\nclass ProductsService {\r\n  private static instance: ProductsService;\r\n  private listeners: Array<() => void> = [];\r\n\r\n  static getInstance(): ProductsService {\r\n    if (!ProductsService.instance) {\r\n      ProductsService.instance = new ProductsService();\r\n    }\r\n    return ProductsService.instance;\r\n  }\r\n\r\n  /**\r\n   * Écouter les changements dans la liste des produits\r\n   */\r\n  subscribe(listener: () => void): () => void {\r\n    this.listeners.push(listener);\r\n    // Retourner une fonction pour se désabonner\r\n    return () => {\r\n      this.listeners = this.listeners.filter(l => l !== listener);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Notifier tous les listeners d": "navigation.servicecentralisedeg1",
  ";\r\n\r\n/**\r\n * Service pour gérer l": "common.servicepourgererl1",
  ";\r\n\r\n/**\r\n * Service spécialisé pour gérer la redirection admin\r\n *": "admin.servicespecialisepou",
  ";\r\n\r\n/**\r\n * Service spécialisé pour gérer la redirection admin\r\n */\r\nexport class AdminFixService {\r\n    private static readonly ADMIN_EMAIL = ": "auth.servicespecialisepou",
  ";\r\n\r\n// Cache global pour les données\r\nconst dataCache = new Map<string, { data: any; timestamp: number; ttl: number }>();\r\n\r\n// Configuration par défaut\r\nconst DEFAULT_CACHE_TTL = 5 * 60 * 1000; // 5 minutes\r\n\r\n// Utilitaires de cache\r\nexport const cacheUtils = {\r\n    set: (key: string, data: any, ttl: number = DEFAULT_CACHE_TTL) => {\r\n        dataCache.set(key, {\r\n            data,\r\n            timestamp: Date.now(),\r\n            ttl\r\n        });\r\n    },\r\n\r\n    get: (key: string) => {\r\n        const cached = dataCache.get(key);\r\n        if (!cached) return null;\r\n\r\n        if (Date.now() - cached.timestamp > cached.ttl) {\r\n            dataCache.delete(key);\r\n            return null;\r\n        }\r\n\r\n        return cached.data;\r\n    },\r\n\r\n    invalidate: (key: string) => {\r\n        dataCache.delete(key);\r\n    },\r\n\r\n    clear: () => {\r\n        dataCache.clear();\r\n    },\r\n\r\n    clearPattern: (pattern: string) => {\r\n        for (const key of dataCache.keys()) {\r\n            if (key.includes(pattern)) {\r\n                dataCache.delete(key);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// Hook pour debounce optimisé\r\nexport const useDebounce = <T>(value: T, delay: number): T => {\r\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n    useEffect(() => {\r\n        const handler = setTimeout(() => {\r\n            setDebouncedValue(value);\r\n        }, delay);\r\n\r\n        return () => {\r\n            clearTimeout(handler);\r\n        };\r\n    }, [value, delay]);\r\n\r\n    return debouncedValue;\r\n};\r\n\r\n// Hook pour API optimisée avec cache\r\ninterface UseOptimizedApiOptions {\r\n    cacheKey?: string;\r\n    cacheTTL?: number;\r\n    enableCache?: boolean;\r\n    retryCount?: number;\r\n    retryDelay?: number;\r\n}\r\n\r\nexport function useOptimizedApi<T>(\r\n    apiFunction: () => Promise<T>,\r\n    dependencies: any[] = [],\r\n    options: UseOptimizedApiOptions = {}\r\n) {\r\n    const [data, setData] = useState<T | null>(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState<Error | null>(null);\r\n    const [lastFetch, setLastFetch] = useState<number>(0);\r\n\r\n    const abortControllerRef = useRef<AbortController | null>(null);\r\n\r\n    const {\r\n        cacheKey,\r\n        cacheTTL = DEFAULT_CACHE_TTL,\r\n        enableCache = true,\r\n        retryCount = 3,\r\n        retryDelay = 1000\r\n    } = options;\r\n\r\n    // Génération automatique de la clé de cache\r\n    const effectiveCacheKey = useMemo(() => {\r\n        return cacheKey || `api-${JSON.stringify(dependencies)}`;\r\n    }, [cacheKey, dependencies]);\r\n\r\n    const fetchData = useCallback(async (skipCache = false) => {\r\n        // Annuler la requête précédente\r\n        if (abortControllerRef.current) {\r\n            abortControllerRef.current.abort();\r\n        }\r\n\r\n        abortControllerRef.current = new AbortController();\r\n\r\n        // Vérifier le cache d": "navigation.cacheglobalpourlesdo1",
  ";\r\n\r\n// Cette map simule un stockage en mémoire qui serait une base de données en réalité.\r\n": "common.cettemapsimuleunstoc",
  ";\r\n\r\n// Cette map simule un stockage en mémoire qui serait une base de données en réalité.\r\n// Elle permet de modifier l": "forms.cettemapsimuleunstoc1",
  ";\r\n\r\n// Composant principal optimisé\r\nconst OptimizedCompaniesPage: React.FC = memo(() => {\r\n    const [searchTerm, setSearchTerm] = useState(": "common.composantprincipalop1",
  ";\r\n\r\n// Configuration Firebase (même que l": "common.configurationfirebas1",
  ";\r\n\r\n// Convertir un document Firestore en objet Product\r\nconst convertFirestoreProduct = (doc: QueryDocumentSnapshot<DocumentData>): Product => {\r\n    const data = doc.data();\r\n    return {\r\n        id: doc.id,\r\n        ...data,\r\n        createdAt: data.createdAt?.toDate(),\r\n        updatedAt: data.updatedAt?.toDate(),\r\n    } as Product;\r\n};\r\n\r\n// Convertir un Product en données pour Firestore\r\nconst convertProductForFirestore = (product: Omit<Product, ": "ecommerce.convertirundocumentf1",
  ";\r\n\r\n// Données de catégories avec des produits d": "ecommerce.donneesdecategoriesa2",
  ";\r\n\r\n// Données mock à migrer vers Firebase\r\nconst mockProductsData: Omit<Product, ": "ecommerce.donneesmockamigrerve1",
  ";\r\n\r\n// Hook pour debounce (optimisation des recherches)\r\nexport const useDebounce = <T>(value: T, delay: number): T => {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n};\r\n\r\n": "common.hookpourdebounceopti",
  ";\r\n\r\n// Hook pour debounce (optimisation des recherches)\r\nexport const useDebounce = <T>(value: T, delay: number): T => {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n};\r\n\r\n// Hook pour intersection observer (lazy loading optimisé)\r\nexport const useIntersectionObserver = (\r\n  ref: React.RefObject<Element>,\r\n  options: IntersectionObserverInit = {}\r\n) => {\r\n  const [isIntersecting, setIsIntersecting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const element = ref.current;\r\n    if (!element) return;\r\n\r\n    const observer = new IntersectionObserver(([entry]) => {\r\n      setIsIntersecting(entry.isIntersecting);\r\n    }, options);\r\n\r\n    observer.observe(element);\r\n\r\n    return () => {\r\n      observer.unobserve(element);\r\n    };\r\n  }, [ref, options]);\r\n\r\n  return isIntersecting;\r\n};\r\n\r\n": "common.hookpourdebounceopti1",
  ";\r\n\r\n// Hook pour debounce (optimisation des recherches)\r\nexport const useDebounce = <T>(value: T, delay: number): T => {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n};\r\n\r\n// Hook pour intersection observer (lazy loading optimisé)\r\nexport const useIntersectionObserver = (\r\n  ref: React.RefObject<Element>,\r\n  options: IntersectionObserverInit = {}\r\n) => {\r\n  const [isIntersecting, setIsIntersecting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const element = ref.current;\r\n    if (!element) return;\r\n\r\n    const observer = new IntersectionObserver(([entry]) => {\r\n      setIsIntersecting(entry.isIntersecting);\r\n    }, options);\r\n\r\n    observer.observe(element);\r\n\r\n    return () => {\r\n      observer.unobserve(element);\r\n    };\r\n  }, [ref, options]);\r\n\r\n  return isIntersecting;\r\n};\r\n\r\n// Hook pour localStorage avec synchronisation\r\nexport const useLocalStorage = <T>(key: string, initialValue: T) => {\r\n  const [storedValue, setStoredValue] = useState<T>(() => {\r\n    try {\r\n      const item = window.localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      console.error(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  const setValue = useCallback((value: T | ((val: T) => T)) => {\r\n    try {\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      setStoredValue(valueToStore);\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      console.error(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  }, [key, storedValue]);\r\n\r\n  return [storedValue, setValue] as const;\r\n};\r\n\r\n// Hook pour throttle (limitation des appels)\r\nexport const useThrottle = <T extends (...args: any[]) => any>(\r\n  callback: T,\r\n  delay: number\r\n): T => {\r\n  const lastCall = useRef<number>(0);\r\n  const timeoutRef = useRef<NodeJS.Timeout>();\r\n\r\n  return useCallback((...args: Parameters<T>) => {\r\n    const now = Date.now();\r\n    \r\n    if (now - lastCall.current >= delay) {\r\n      lastCall.current = now;\r\n      return callback(...args);\r\n    } else {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = setTimeout(() => {\r\n        lastCall.current = Date.now();\r\n        callback(...args);\r\n      }, delay - (now - lastCall.current));\r\n    }\r\n  }, [callback, delay]) as T;\r\n};\r\n\r\n// Hook pour la gestion optimisée des états de formulaire\r\nexport const useFormState = <T extends Record<string, any>>(initialState: T) => {\r\n  const [state, setState] = useState<T>(initialState);\r\n  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});\r\n  const [touched, setTouched] = useState<Partial<Record<keyof T, boolean>>>({});\r\n\r\n  const setValue = useCallback((field: keyof T, value: any) => {\r\n    setState(prev => ({ ...prev, [field]: value }));\r\n    if (errors[field]) {\r\n      setErrors(prev => ({ ...prev, [field]: undefined }));\r\n    }\r\n  }, [errors]);\r\n\r\n  const setError = useCallback((field: keyof T, error: string) => {\r\n    setErrors(prev => ({ ...prev, [field]: error }));\r\n  }, []);\r\n\r\n  const setTouched = useCallback((field: keyof T) => {\r\n    setTouched(prev => ({ ...prev, [field]: true }));\r\n  }, []);\r\n\r\n  const reset = useCallback(() => {\r\n    setState(initialState);\r\n    setErrors({});\r\n    setTouched({});\r\n  }, [initialState]);\r\n\r\n  return {\r\n    state,\r\n    errors,\r\n    touched,\r\n    setValue,\r\n    setError,\r\n    setTouched,\r\n    reset\r\n  };\r\n};\r\n\r\n// Hook pour la performance de scroll\r\nexport const useScrollPerformance = () => {\r\n  const [isScrolling, setIsScrolling] = useState(false);\r\n  const timeoutRef = useRef<NodeJS.Timeout>();\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      setIsScrolling(true);\r\n      \r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = setTimeout(() => {\r\n        setIsScrolling(false);\r\n      }, 150);\r\n    };\r\n\r\n    window.addEventListener(": "navigation.hookpourdebounceopti",
  ";\r\n\r\n// Hook pour les collaborations\r\nexport const useCollaborations = () => {\r\n    const [collaborations, setCollaborations] = useState<Collaboration[]>([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const { user } = useAuth();\r\n\r\n    useEffect(() => {\r\n        const fetchCollaborations = async () => {\r\n            if (!user) return;\r\n\r\n            try {\r\n                setLoading(true);\r\n                setError(null);\r\n\r\n                // Récupérer d": "admin.hookpourlescollabora1",
  ";\r\n\r\n// Hook pour récupérer tous les produits\r\nexport const useProducts = () => {\r\n  const [products, setProducts] = useState<ProductListItem[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        const fetchedProducts = await ProductService.getAllProducts();\r\n        setProducts(fetchedProducts);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : ": "ecommerce.hookpourrecuperertou2",
  ";\r\n\r\n// Interface pour la création d": "common.interfacepourlacreat1",
  ";\r\n\r\n// Interface pour les données de la carte de visite\r\nexport interface BusinessCardData {\r\n    // Informations de base\r\n    companyName: string;\r\n    tagline: string;\r\n    contactPerson: string;\r\n    position: string;\r\n\r\n    // Contact\r\n    phone: string;\r\n    email: string;\r\n    website: string;\r\n    address: string;\r\n\r\n    ": "auth.interfacepourlesdonn",
  ";\r\n\r\n// Interface pour les données de la carte de visite\r\nexport interface BusinessCardData {\r\n    // Informations de base\r\n    companyName: string;\r\n    tagline: string;\r\n    contactPerson: string;\r\n    position: string;\r\n\r\n    // Contact\r\n    phone: string;\r\n    email: string;\r\n    website: string;\r\n    address: string;\r\n\r\n    // Réseaux sociaux\r\n    linkedin?: string;\r\n    whatsapp?: string;\r\n    wechat?: string;\r\n\r\n    ": "auth.interfacepourlesdonn1",
  ";\r\n\r\n// Interface pour les données de la carte de visite\r\nexport interface BusinessCardData {\r\n    // Informations de base\r\n    companyName: string;\r\n    tagline: string;\r\n    contactPerson: string;\r\n    position: string;\r\n\r\n    // Contact\r\n    phone: string;\r\n    email: string;\r\n    website: string;\r\n    address: string;\r\n\r\n    // Réseaux sociaux\r\n    linkedin?: string;\r\n    whatsapp?: string;\r\n    wechat?: string;\r\n\r\n    // Visuels\r\n    logo: string;\r\n    backgroundImage?: string;\r\n\r\n    // Branding\r\n    primaryColor: string;\r\n    secondaryColor: string;\r\n    textColor: string;\r\n    accentColor: string;\r\n\r\n    // Style et layout\r\n    template: string;\r\n    fontSize: ": "auth.interfacepourlesdonn2",
  ";\r\n\r\n// Interface pour les informations du fournisseur\r\ninterface SupplierProfile {\r\n    id: string;\r\n    name: string;\r\n    logo: string;\r\n    coverImage: string;\r\n    description: string;\r\n    location: {\r\n        city: string;\r\n        country: string;\r\n        address: string;\r\n    };\r\n    contact: {\r\n        phone: string;\r\n        email: string;\r\n        website: string;\r\n    };\r\n    rating: number;\r\n    totalReviews: number;\r\n    yearEstablished: number;\r\n    employeeCount: string;\r\n    specialties: string[];\r\n    certifications: string[];\r\n    products: {\r\n        total: number;\r\n        categories: string[];\r\n    };\r\n    stats: {\r\n        ordersCompleted: number;\r\n        responseTime: string;\r\n        onTimeDelivery: number;\r\n    };\r\n    gallery: string[];\r\n    verified: boolean;\r\n    goldSupplier: boolean;\r\n}\r\n\r\n// Données de test pour le fournisseur\r\nconst mockSupplier: SupplierProfile = {\r\n    id: ": "auth.interfacepourlesinfo2",
  ";\r\n\r\n// Interface pour les produits (même que ProductsPageFixed)\r\ninterface SimpleProduct {\r\n    id: string;\r\n    name: string;\r\n    price: number;\r\n    originalPrice?: number;\r\n    discount?: number;\r\n    brand: string;\r\n    category: string;\r\n    image: string;\r\n    isNew?: boolean;\r\n    isPopular?: boolean;\r\n    features?: string[];\r\n    description?: string;\r\n    rating?: number;\r\n    reviews?: number;\r\n    images?: string[];\r\n    specifications?: { [key: string]: string };\r\n}\r\n\r\n": "forms.interfacepourlesprod",
  ";\r\n\r\n// Interface pour les produits (même que ProductsPageFixed)\r\ninterface SimpleProduct {\r\n    id: string;\r\n    name: string;\r\n    price: number;\r\n    originalPrice?: number;\r\n    discount?: number;\r\n    brand: string;\r\n    category: string;\r\n    image: string;\r\n    isNew?: boolean;\r\n    isPopular?: boolean;\r\n    features?: string[];\r\n    description?: string;\r\n    rating?: number;\r\n    reviews?: number;\r\n    images?: string[];\r\n    specifications?: { [key: string]: string };\r\n}\r\n\r\n// Données étendues pour la page produit\r\nconst getProductById = (id: string): SimpleProduct | null => {\r\n    const products: SimpleProduct[] = [\r\n        {\r\n            id: ": "forms.interfacepourlesprod2",
  ";\r\n\r\n// Interface pour les produits Firebase basique\r\nexport interface Product {\r\n  id?: string;\r\n  name: string;\r\n  price: number;\r\n  originalPrice?: number;\r\n  discount?: number;\r\n  brand: string;\r\n  category: string;\r\n  image: string;\r\n  images?: string[];\r\n  videos?: string[];\r\n  documents?: string[];\r\n  description?: string;\r\n  features?: string[];\r\n  isNew?: boolean;\r\n  isPopular?: boolean;\r\n  stock?: number;\r\n  rating?: number;\r\n  reviewCount?: number;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n}\r\n\r\nexport interface ProductQueryOptions {\r\n  category?: string;\r\n  brand?: string;\r\n  minPrice?: number;\r\n  maxPrice?: number;\r\n  searchTerm?: string;\r\n  sortBy?: ": "forms.interfacepourlesprod3",
  ";\r\n\r\n// Interface pour une carte de visite sauvegardée\r\nexport interface SavedBusinessCard {\r\n    id: string;\r\n    name: string;\r\n    data: BusinessCardData;\r\n    supplierId: string;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    isDefault: boolean;\r\n    isPublic: boolean;\r\n    downloads: number;\r\n    shares: number;\r\n    tags: string[];\r\n}\r\n\r\n// Service pour gérer les cartes de visite\r\nclass BusinessCardService {\r\n    private storageKey = ": "forms.interfacepourunecart1",
  ";\r\n\r\n// Lazy loading des composants pour réduire la taille du bundle initial\r\nconst HomePage = React.lazy(() => import(": "navigation.lazyloadingdescompos3",
  ";\r\n\r\n// Liste des catégories (clé, nom, icône, description courte)\r\nconst categories = [\r\n  { key: ": "forms.listedescategoriescl1",
  ";\r\n\r\n// Mock product data - Version simplifiée et corrigée\r\nexport const products: Product[] = [\r\n  {\r\n    id: ": "ecommerce.mockproductdataversi1",
  ";\r\n\r\n// Script pour créer un utilisateur influenceur de test\r\nexport const createTestInfluencer = async () => {\r\n    try {\r\n        // Créer un utilisateur influenceur\r\n        const testUser = {\r\n            email: ": "auth.scriptpourcreerunuti2",
  ";\r\n\r\n// Stockage des notifications (vide par défaut)\r\nlet mockNotifications: Notification[] = [];\r\n\r\nclass NotificationService {\r\n  async getNotifications(\r\n    page: number = 1,\r\n    limit: number = 20,\r\n    filters?: NotificationFilters\r\n  ): Promise<NotificationResponse> {\r\n    ": "common.stockagedesnotificat1",
  ";\r\n\r\n// Stockage des notifications (vide par défaut)\r\nlet mockNotifications: Notification[] = [];\r\n\r\nclass NotificationService {\r\n  async getNotifications(\r\n    page: number = 1,\r\n    limit: number = 20,\r\n    filters?: NotificationFilters\r\n  ): Promise<NotificationResponse> {\r\n    // Simulation d": "common.stockagedesnotificat2",
  ";\r\n\r\n// Types pour la gestion des fichiers média\r\nexport interface MediaFile {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  type: ": "forms.typespourlagestionde1",
  ";\r\n\r\n// Types pour les données influenceur\r\nexport interface Collaboration {\r\n    id?: string;\r\n    influencerId: string;\r\n    brand: string;\r\n    campaign: string;\r\n    status: ": "common.typespourlesdonneesi1",
  ";\r\n\r\n// Types pour les produits (identiques à ceux utilisés dans les pages)\r\nexport interface ProductImage {\r\n    id: string;\r\n    url: string;\r\n    alt: string;\r\n}\r\n\r\nexport interface ProductVariant {\r\n    id: string;\r\n    name: string;\r\n    type: ": "forms.typespourlesproduits2",
  ";\r\n\r\n// Types temporaires (à adapter selon votre structure)\r\ninterface Company {\r\n    id: string;\r\n    name: string;\r\n    country: string;\r\n    email: string;\r\n    phone: string;\r\n    contact_person: string;\r\n    preferred_currency: string;\r\n    interested_products: string[];\r\n    website: string;\r\n}\r\n\r\ninterface CompanyProfile {\r\n    id: string;\r\n    company_id: string;\r\n    monthly_sales_volume: string;\r\n    has_merchandising: boolean;\r\n    is_top_importer: boolean;\r\n    has_warehouses: boolean;\r\n    warehouse_count: number;\r\n    has_logistics_vehicles: boolean;\r\n    vehicle_count: number;\r\n    business_type: string;\r\n    notes: string;\r\n}\r\n\r\n": "auth.typestemporairesaada",
  ";\r\n\r\n// Types temporaires (à adapter selon votre structure)\r\ninterface Company {\r\n    id: string;\r\n    name: string;\r\n    country: string;\r\n    email: string;\r\n    phone: string;\r\n    contact_person: string;\r\n    preferred_currency: string;\r\n    interested_products: string[];\r\n    website: string;\r\n}\r\n\r\ninterface CompanyProfile {\r\n    id: string;\r\n    company_id: string;\r\n    monthly_sales_volume: string;\r\n    has_merchandising: boolean;\r\n    is_top_importer: boolean;\r\n    has_warehouses: boolean;\r\n    warehouse_count: number;\r\n    has_logistics_vehicles: boolean;\r\n    vehicle_count: number;\r\n    business_type: string;\r\n    notes: string;\r\n}\r\n\r\n// Composants UI simplifiés pour la démo\r\nconst Button: React.FC<any> = ({ children, ...props }) => (\r\n    <button {...props} className={`px-4 py-2 rounded ${props.className || ": "auth.typestemporairesaada2",
  ";\r\n\r\n// 🛠️ Scripts de maintenance pour Firebase\r\n\r\n/**\r\n * Réinitialise complètement la base de données produits\r\n *": "ecommerce.scriptsdemaintenance1",
  ";\r\n\r\n// 🛠️ Scripts de maintenance pour Firebase\r\n\r\n/**\r\n * Réinitialise complètement la base de données produits\r\n */\r\nexport const resetProductsDatabase = async () => {\r\n  try {\r\n    console.log(": "ecommerce.scriptsdemaintenance2",
  ";\r\n\r\nconst ContainersManagementPage: React.FC = () => {\r\n  const { t } = useLanguage();\r\n  const [containers, setContainers] = useState<Container[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showCreateModal, setShowCreateModal] = useState(false);\r\n  const [editingContainer, setEditingContainer] = useState<Container | null>(null);\r\n\r\n  // Nouvel état pour le formulaire de création/édition\r\n  const [formData, setFormData] = useState({\r\n    name: ": "forms.constcontainersmanag1",
  ";\r\n\r\nconst NavbarSimple: React.FC = () => {\r\n  const { user, logout } = useAuth();\r\n  const { language, setLanguage, t, getLanguageName, availableLanguages } = useLanguage();\r\n  const { currency, setCurrency, currencyNames } = useCurrency();\r\n  const { isDarkMode, toggleTheme } = useTheme();\r\n\r\n  const [isLanguageMenuOpen, setIsLanguageMenuOpen] = useState(false);\r\n  const [isCurrencyMenuOpen, setIsCurrencyMenuOpen] = useState(false);\r\n  const [isNotificationCenterOpen, setIsNotificationCenterOpen] = useState(false);\r\n\r\n  // Refs pour éviter les conflits\r\n  const languageDropdownRef = useRef<HTMLDivElement>(null);\r\n  const currencyDropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  const { unreadCount, refresh: refreshNotifications } = useNotifications({\r\n    pollInterval: user ? 30000 : 0,\r\n    autoRefresh: !!user\r\n  });\r\n\r\n  ": "auth.constnavbarsimplerea",
  ";\r\n\r\nconst NavbarSimple: React.FC = () => {\r\n  const { user, logout } = useAuth();\r\n  const { language, setLanguage, t, getLanguageName, availableLanguages } = useLanguage();\r\n  const { currency, setCurrency, currencyNames } = useCurrency();\r\n  const { isDarkMode, toggleTheme } = useTheme();\r\n\r\n  const [isLanguageMenuOpen, setIsLanguageMenuOpen] = useState(false);\r\n  const [isCurrencyMenuOpen, setIsCurrencyMenuOpen] = useState(false);\r\n  const [isNotificationCenterOpen, setIsNotificationCenterOpen] = useState(false);\r\n\r\n  // Refs pour éviter les conflits\r\n  const languageDropdownRef = useRef<HTMLDivElement>(null);\r\n  const currencyDropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  const { unreadCount, refresh: refreshNotifications } = useNotifications({\r\n    pollInterval: user ? 30000 : 0,\r\n    autoRefresh: !!user\r\n  });\r\n\r\n  // Gestion avec événements isolés\r\n  const handleLanguageClick = (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    console.log(": "auth.constnavbarsimplerea2",
  ";\r\n\r\nconst ProductDetailPageB2B: React.FC = () => {\r\n    const { id } = useParams<{ id: string }>();\r\n    const { product, loading, error } = useProduct(id);\r\n    const { products: similarProducts, loading: similarLoading } = useSimilarProducts(id, product?.category);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n    const { showToast } = useToast();\r\n\r\n    ": "forms.constproductdetailpa",
  ";\r\n\r\nconst ProductDetailPageB2B: React.FC = () => {\r\n    const { id } = useParams<{ id: string }>();\r\n    const { product, loading, error } = useProduct(id);\r\n    const { products: similarProducts, loading: similarLoading } = useSimilarProducts(id, product?.category);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n    const { showToast } = useToast();\r\n\r\n    // États pour l": "forms.constproductdetailpa2",
  ";\r\n\r\nconst ProductRecommendations: React.FC = () => {\r\n  const { t } = useLanguage();\r\n  const [currentIndex, setCurrentIndex] = useState(0);  const [isAutoPlaying, setIsAutoPlaying] = useState(true);\r\n  const touchStartX = useRef<number>(0);\r\n  const touchEndX = useRef<number>(0);\r\n  \r\n  // Sélectionner 8 produits recommandés (mélange des premiers produits)\r\n  const recommendedProducts = products.slice(0, 8);\r\n  \r\n  ": "admin.constproductrecommen",
  ";\r\n\r\nconst ProductRecommendations: React.FC = () => {\r\n  const { t } = useLanguage();\r\n  const [currentIndex, setCurrentIndex] = useState(0);  const [isAutoPlaying, setIsAutoPlaying] = useState(true);\r\n  const touchStartX = useRef<number>(0);\r\n  const touchEndX = useRef<number>(0);\r\n  \r\n  // Sélectionner 8 produits recommandés (mélange des premiers produits)\r\n  const recommendedProducts = products.slice(0, 8);\r\n  \r\n  // Nombre de produits visibles selon la taille d": "forms.constproductrecommen1",
  ";\r\n\r\nconst ProductsPagePlaceholder: React.FC = () => {\r\n    return (\r\n        <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-900 dark:to-purple-900 flex items-center justify-center\">\r\n            <div className=\"max-w-2xl mx-auto px-4 text-center\">\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-3xl shadow-2xl p-12 border border-gray-200 dark:border-gray-700\">\r\n                    <div className=\"text-6xl mb-6\">🚧</div>\r\n\r\n                    <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\r\n                        Nouvelle Page Produits\r\n                    </h1>\r\n\r\n                    <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 leading-relaxed\">\r\n                        Cette page est en cours de développement pour vous offrir une expérience personnalisée.\r\n                    </p>\r\n\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\r\n                        <div className=\"flex items-center gap-3 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-xl\">\r\n                            <ShoppingBag className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\r\n                            <span className=\"text-blue-800 dark:text-blue-200 font-medium\">Catalogue personnalisé</span>\r\n                        </div>\r\n\r\n                        <div className=\"flex items-center gap-3 p-4 bg-green-50 dark:bg-green-900/20 rounded-xl\">\r\n                            <Search className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\r\n                            <span className=\"text-green-800 dark:text-green-200 font-medium\">Recherche avancée</span>\r\n                        </div>\r\n\r\n                        <div className=\"flex items-center gap-3 p-4 bg-purple-50 dark:bg-purple-900/20 rounded-xl\">\r\n                            <Star className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\r\n                            <span className=\"text-purple-800 dark:text-purple-200 font-medium\">Interface moderne</span>\r\n                        </div>\r\n\r\n                        <div className=\"flex items-center gap-3 p-4 bg-orange-50 dark:bg-orange-900/20 rounded-xl\">\r\n                            <Users className=\"w-6 h-6 text-orange-600 dark:text-orange-400\" />\r\n                            <span className=\"text-orange-800 dark:text-orange-200 font-medium\">Expérience utilisateur</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"space-y-4\">\r\n                        <Link\r\n                            to=\"/\"\r\n                            className=\"inline-flex items-center gap-2 px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-2xl font-semibold text-lg shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300\"\r\n                        >\r\n                            Retour à l": "navigation.constproductspagepla",
  ";\r\n\r\nconst QuickLogout: React.FC = () => {\r\n    const { user, logout } = useAuth();\r\n\r\n    const handleQuickLogout = async () => {\r\n        try {\r\n            await logout();\r\n            // Si la déconnexion normale ne fonctionne pas, rediriger manuellement\r\n            setTimeout(() => {\r\n                if (window.location.pathname !== ": "auth.constquicklogoutreac2",
  ";\r\n\r\nconst SearchPagePlaceholder: React.FC = () => {\r\n    return (\r\n        <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 dark:from-gray-900 dark:to-green-900 flex items-center justify-center\">\r\n            <div className=\"max-w-2xl mx-auto px-4 text-center\">\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-3xl shadow-2xl p-12 border border-gray-200 dark:border-gray-700\">\r\n                    <div className=\"text-6xl mb-6\">🔍</div>\r\n\r\n                    <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\r\n                        Nouvelle Page Recherche\r\n                    </h1>\r\n\r\n                    <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 leading-relaxed\">\r\n                        Cette page est en cours de développement pour vous offrir des fonctionnalités de recherche avancées.\r\n                    </p>\r\n\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\r\n                        <div className=\"flex items-center gap-3 p-4 bg-green-50 dark:bg-green-900/20 rounded-xl\">\r\n                            <Search className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\r\n                            <span className=\"text-green-800 dark:text-green-200 font-medium\">Recherche intelligente</span>\r\n                        </div>\r\n\r\n                        <div className=\"flex items-center gap-3 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-xl\">\r\n                            <Filter className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\r\n                            <span className=\"text-blue-800 dark:text-blue-200 font-medium\">Filtres personnalisés</span>\r\n                        </div>\r\n\r\n                        <div className=\"flex items-center gap-3 p-4 bg-purple-50 dark:bg-purple-900/20 rounded-xl\">\r\n                            <SortAsc className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\r\n                            <span className=\"text-purple-800 dark:text-purple-200 font-medium\">Tri avancé</span>\r\n                        </div>\r\n\r\n                        <div className=\"flex items-center gap-3 p-4 bg-orange-50 dark:bg-orange-900/20 rounded-xl\">\r\n                            <Globe className=\"w-6 h-6 text-orange-600 dark:text-orange-400\" />\r\n                            <span className=\"text-orange-800 dark:text-orange-200 font-medium\">Recherche globale</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"space-y-4\">\r\n                        <Link\r\n                            to=\"/\"\r\n                            className=\"inline-flex items-center gap-2 px-8 py-4 bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-2xl font-semibold text-lg shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300\"\r\n                        >\r\n                            Retour à l": "navigation.constsearchpageplace",
  ";\r\n\r\nconst StatsSection: React.FC = () => {\r\n    // Données pour les graphiques\r\n    const viewsData = [\r\n        { month: ": "common.conststatssectionrea1",
  ";\r\n\r\nconst SupplierProductsPage: React.FC = () => {\r\n  // Charger les produits depuis localStorage ou utiliser les données par défaut\r\n  const [productsList, setProductsList] = useState<Product[]>(() => {\r\n    try {\r\n      const saved = localStorage.getItem(STORAGE_KEY);\r\n      if (saved) {\r\n        const parsedProducts = JSON.parse(saved);\r\n        ": "forms.constsupplierproduct",
  ";\r\n\r\nconst SupplierProductsPage: React.FC = () => {\r\n  // Charger les produits depuis localStorage ou utiliser les données par défaut\r\n  const [productsList, setProductsList] = useState<Product[]>(() => {\r\n    try {\r\n      const saved = localStorage.getItem(STORAGE_KEY);\r\n      if (saved) {\r\n        const parsedProducts = JSON.parse(saved);\r\n        // Vérifier que les données sont valides\r\n        if (Array.isArray(parsedProducts) && parsedProducts.length > 0) {\r\n          return parsedProducts;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(": "forms.constsupplierproduct2",
  ";\r\n\r\nconst SupplierProductsPage: React.FC = () => {\r\n  const { t } = useLanguage();\r\n  \r\n  // Charger les produits depuis localStorage ou utiliser les données par défaut\r\n  const [productsList, setProductsList] = useState<Product[]>(() => {\r\n    try {\r\n      const saved = localStorage.getItem(STORAGE_KEY);\r\n      if (saved) {\r\n        const parsedProducts = JSON.parse(saved);\r\n        ": "forms.constsupplierproduct3",
  ";\r\n\r\nconst SupplierProductsPage: React.FC = () => {\r\n  const { t } = useLanguage();\r\n  \r\n  // Charger les produits depuis localStorage ou utiliser les données par défaut\r\n  const [productsList, setProductsList] = useState<Product[]>(() => {\r\n    try {\r\n      const saved = localStorage.getItem(STORAGE_KEY);\r\n      if (saved) {\r\n        const parsedProducts = JSON.parse(saved);\r\n        // Vérifier que les données sont valides\r\n        if (Array.isArray(parsedProducts) && parsedProducts.length > 0) {\r\n          return parsedProducts;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(": "forms.constsupplierproduct5",
  ";\r\n\r\nconst SupplierProductsPage: React.FC = () => {\r\n  const { t, language } = useLanguage();\r\n  // Charger les produits depuis localStorage ou utiliser les données par défaut\r\n  const [productsList, setProductsList] = useState<Product[]>(() => {\r\n    try {\r\n      const saved = localStorage.getItem(STORAGE_KEY);\r\n      if (saved) {\r\n        const parsedProducts = JSON.parse(saved);\r\n        ": "forms.constsupplierproduct6",
  ";\r\n\r\nconst SupplierProductsPage: React.FC = () => {\r\n  const { t, language } = useLanguage();\r\n  // Charger les produits depuis localStorage ou utiliser les données par défaut\r\n  const [productsList, setProductsList] = useState<Product[]>(() => {\r\n    try {\r\n      const saved = localStorage.getItem(STORAGE_KEY);\r\n      if (saved) {\r\n        const parsedProducts = JSON.parse(saved);\r\n        // Vérifier que les données sont valides\r\n        if (Array.isArray(parsedProducts) && parsedProducts.length > 0) {\r\n          return parsedProducts;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(": "forms.constsupplierproduct8",
  ";\r\n\r\nexport interface CreateAdminUserData {\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n}\r\n\r\n/**\r\n * Service pour créer un nouveau compte administrateur\r\n */\r\nexport class AdminCreationService {\r\n\r\n    /**\r\n     * Créer un nouveau compte admin complet\r\n     *": "auth.exportinterfacecreat2",
  ";\r\n\r\nexport interface CreateAdminUserData {\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n}\r\n\r\n/**\r\n * Service pour créer un nouveau compte administrateur\r\n */\r\nexport class AdminCreationService {\r\n\r\n    /**\r\n     * Créer un nouveau compte admin complet\r\n     */\r\n    static async createNewAdminAccount(userData: CreateAdminUserData): Promise<{\r\n        success: boolean;\r\n        message: string;\r\n        uid?: string;\r\n    }> {\r\n        try {\r\n            console.log(": "auth.exportinterfacecreat3",
  ";\r\n\r\nexport interface CreateProductionUserData {\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    role: UserRole;\r\n    isActive?: boolean;\r\n    additionalData?: {\r\n        phone?: string;\r\n        company?: string;\r\n        address?: string;\r\n    };\r\n}\r\n\r\nexport interface ProductionUserSummary {\r\n    total: number;\r\n    byRole: Record<UserRole, number>;\r\n    active: number;\r\n    inactive: number;\r\n}\r\n\r\n/**\r\n * Service de gestion des utilisateurs pour l": "auth.exportinterfacecreat4",
  ";\r\n\r\nexport interface CreateUserData {\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    role: UserRole;\r\n    isActive?: boolean;\r\n}\r\n\r\nexport interface AdminUser extends User {\r\n    uid: string;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    isActive: boolean;\r\n    lastLogin?: string;\r\n}\r\n\r\n/**\r\n * Service de création d": "auth.exportinterfacecreat6",
  ";\r\n\r\nexport interface CreateUserData {\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    role: UserRole;\r\n    isActive?: boolean;\r\n}\r\n\r\nexport interface SavedUser {\r\n    uid: string;\r\n    id: string;\r\n    email: string;\r\n    name: string;\r\n    role: UserRole;\r\n    isActive: boolean;\r\n    language: string;\r\n    currency: string;\r\n    favorites: any[];\r\n    browsingHistory: any[];\r\n    messages: any[];\r\n    subscription: string;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\n": "auth.exportinterfacecreat7",
  ";\r\n\r\nexport interface CreateUserData {\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    role: UserRole;\r\n    isActive?: boolean;\r\n}\r\n\r\nexport interface SavedUser {\r\n    uid: string;\r\n    id: string;\r\n    email: string;\r\n    name: string;\r\n    role: UserRole;\r\n    isActive: boolean;\r\n    language: string;\r\n    currency: string;\r\n    favorites: any[];\r\n    browsingHistory: any[];\r\n    messages: any[];\r\n    subscription: string;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\n/**\r\n * Service de création d": "auth.exportinterfacecreat9",
  ";\r\n\r\nexport interface SafeTestUser {\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    role: UserRole;\r\n    company?: string;\r\n}\r\n\r\n// Utilisateurs de test à créer pour chaque rôle (Firestore seulement)\r\nexport const SAFE_TEST_USERS: SafeTestUser[] = [\r\n    {\r\n        email: ": "auth.exportinterfacesafet2",
  ";\r\n\r\nexport interface TestUser {\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  role: UserRole;\r\n  company?: string;\r\n}\r\n\r\n// Utilisateurs de test à créer pour chaque rôle\r\nexport const TEST_USERS: TestUser[] = [\r\n  {\r\n    email: ": "auth.exportinterfacetestu2",
  ";\r\n\r\ninterface BusinessCardGalleryProps {\r\n    supplierId?: string;\r\n}\r\n\r\nconst BusinessCardGallery: React.FC<BusinessCardGalleryProps> = ({ supplierId }) => {\r\n    // Utiliser les données d": "ecommerce.interfacebusinesscar1",
  ";\r\n\r\ninterface ContextProvidersProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\n// Composant optimisé pour regrouper tous les providers\r\n// et éviter les re-renders inutiles\r\nconst ContextProviders: React.FC<ContextProvidersProps> = ({ children }) => {\r\n  // Mémorisation de la structure des providers pour éviter les re-renders\r\n  const providers = useMemo(() => [\r\n    AuthProvider,\r\n    LanguageProvider,\r\n    CurrencyProvider,\r\n    ThemeProvider,\r\n    ToastProvider,\r\n    NotificationProvider\r\n  ], []);\r\n\r\n  // Réduction des providers en une seule structure\r\n  return providers.reduceRight(\r\n    (acc, Provider) => <Provider>{acc}<": "common.interfacecontextprov",
  ";\r\n\r\ninterface FooterProps {\r\n  inAdminLayout?: boolean;\r\n}\r\n\r\nconst Footer: React.FC<FooterProps> = ({ inAdminLayout = false }) => {\r\n  const { t } = useLanguage();\r\n  const currentYear = new Date().getFullYear();\r\n  const location = useLocation();\r\n\r\n  // Vérifier si on est dans l": "admin.interfacefooterprops1",
  ";\r\n\r\ninterface ImageUploadProps {\r\n  onImageSelect?: (files: File[]) => void;\r\n  onUpload?: (files: File[]) => Promise<string[]>; // retourne les URLs des images uploadées\r\n  maxImages?: number;\r\n  maxSizePerImage?: number; ": "navigation.interfaceimageupload",
  ";\r\n\r\ninterface ImageUploadProps {\r\n  onImageSelect?: (files: File[]) => void;\r\n  onUpload?: (files: File[]) => Promise<string[]>; // retourne les URLs des images uploadées\r\n  maxImages?: number;\r\n  maxSizePerImage?: number; // en MB\r\n  className?: string;\r\n  existingImages?: string[]; // URLs des images existantes\r\n  onRemoveExisting?: (imageUrl: string) => void;\r\n}\r\n\r\ninterface UploadImage {\r\n  file?: File;\r\n  id: string;\r\n  preview: string;\r\n  status: ": "navigation.interfaceimageupload1",
  ";\r\n\r\ninterface InfluencerProfile {\r\n    id: string;\r\n    name: string;\r\n    image: string;\r\n    followers: number;\r\n    country: string;\r\n    category: string;\r\n    pricePerPost: number;\r\n    pricePerStory: number;\r\n    engagement: number;\r\n    verified: boolean;\r\n    languages: string[];\r\n    description: string;\r\n}\r\n\r\nconst SearchSection: React.FC = () => {\r\n    const [searchTerm, setSearchTerm] = useState(": "forms.interfaceinfluencerp",
  ";\r\n\r\ninterface InfluencerStar {\r\n    id: string;\r\n    name: string;\r\n    image: string;\r\n    followers: number;\r\n    country: string;\r\n    category: string;\r\n    pricePerPost: number;\r\n    pricePerStory: number;\r\n    engagement: number;\r\n    verified: boolean;\r\n    description: string;\r\n}\r\n\r\nconst StarsSection: React.FC = () => {\r\n    const [selectedInfluencer, setSelectedInfluencer] = useState<InfluencerStar | null>(null);\r\n    const [showContactModal, setShowContactModal] = useState(false);\r\n\r\n    const influencerStars: InfluencerStar[] = [\r\n        {\r\n            id: ": "forms.interfaceinfluencers",
  ";\r\n\r\ninterface InfluencerTopbarProps {\r\n    setSidebarOpen: (open: boolean) => void;\r\n}\r\n\r\nconst InfluencerTopbar: React.FC<InfluencerTopbarProps> = ({ setSidebarOpen }) => {\r\n    const [showUserMenu, setShowUserMenu] = useState(false);\r\n    const [notifications] = useState(3); // Nombre de notifications non lues\r\n    const { user, logout } = useAuth();\r\n\r\n    return (\r\n        <div className=": "auth.interfaceinfluencert",
  ";\r\n\r\ninterface Message {\r\n  id: string;\r\n  sender: string;\r\n  content: string;\r\n  timestamp: Date;\r\n  isRead: boolean;\r\n}\r\n\r\ninterface ChatWindowProps {\r\n  supplierId: string;\r\n  supplierName: string;\r\n  onClose: () => void;\r\n}\r\n\r\nconst ChatWindow: React.FC<ChatWindowProps> = ({ supplierName, onClose }) => {\r\n  const [isMinimized, setIsMinimized] = useState(false);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [newMessage, setNewMessage] = useState(": "forms.interfacemessageidst",
  ";\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: NotificationType;\r\n  message: string;\r\n  title?: string;\r\n  timestamp: Date;\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[];\r\n  addNotification: (notification: Omit<Notification, ": "forms.interfacenotificatio",
  ";\r\n\r\ninterface NotificationCenterProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onUnreadCountChange: (count: number) => void;\r\n}\r\n\r\nconst NotificationCenter: React.FC<NotificationCenterProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onUnreadCountChange\r\n}) => {\r\n  const { t } = useLanguage();\r\n  const navigate = useNavigate();\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [page, setPage] = useState(1);\r\n  const [filters, setFilters] = useState<NotificationFilters>({});\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [markingAllAsRead, setMarkingAllAsRead] = useState(false);\r\n\r\n  const notificationCenterRef = useRef<HTMLDivElement>(null);\r\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Charger les notifications\r\n  const loadNotifications = async (resetPage = false) => {\r\n    if (loading) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const currentPage = resetPage ? 1 : page;\r\n      const response = await notificationService.getNotifications(currentPage, 20, filters);\r\n      \r\n      if (resetPage) {\r\n        setNotifications(response.notifications);\r\n        setPage(2);\r\n      } else {\r\n        setNotifications(prev => [...prev, ...response.notifications]);\r\n        setPage(prev => prev + 1);\r\n      }\r\n      \r\n      setHasMore(response.hasMore);\r\n      setUnreadCount(response.unreadCount);\r\n      onUnreadCountChange(response.unreadCount);\r\n    } catch (err) {\r\n      setError(": "admin.interfacenotificatio1",
  ";\r\n\r\ninterface NotificationPreviewProps {\r\n  notifications: Notification[];\r\n  unreadCount: number;\r\n  onViewAll: () => void;\r\n  onNotificationClick: (notification: Notification) => void;\r\n  isVisible: boolean;\r\n}\r\n\r\nconst NotificationPreview: React.FC<NotificationPreviewProps> = ({\r\n  notifications,\r\n  unreadCount,\r\n  onViewAll,\r\n  onNotificationClick,\r\n  isVisible\r\n}) => {\r\n  const { t } = useLanguage();\r\n\r\n  const formatTimeAgo = (date: Date) => {\r\n    const now = new Date();\r\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) ": "common.interfacenotificatio",
  ";\r\n\r\ninterface PlatformSettings {\r\n  siteName: string;\r\n  siteDescription: string;\r\n  maintenanceMode: boolean;\r\n  registrationEnabled: boolean;\r\n  emailNotifications: boolean;\r\n  smsNotifications: boolean;\r\n  defaultLanguage: string;\r\n  defaultCurrency: string;\r\n  maxFileSize: number;\r\n  allowedFileTypes: string[];\r\n  commissionRate: number;\r\n  minOrderAmount: number;\r\n  // Nouveaux paramètres de sécurité\r\n  passwordMinLength: number;\r\n  passwordRequireUppercase: boolean;\r\n  passwordRequireNumbers: boolean;\r\n  passwordRequireSymbols: boolean;\r\n  sessionTimeout: number;\r\n  maxLoginAttempts: number;\r\n  lockoutDuration: number;\r\n  twoFactorRequired: boolean;\r\n  ipWhitelistEnabled: boolean;\r\n  allowedIPs: string[];\r\n  sslRequired: boolean;\r\n  securityAlertsEnabled: boolean;\r\n  bruteForceProtection: boolean;\r\n  captchaEnabled: boolean;\r\n  adminSessionTimeout: number;\r\n}\r\n\r\nconst SettingsPage: React.FC = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(": "auth.interfaceplatformset2",
  ";\r\n\r\ninterface ProductRecommendationCardProps {\r\n  product: Product;\r\n  index: number;\r\n}\r\n\r\nconst ProductRecommendationCard: React.FC<ProductRecommendationCardProps> = ({ product, index }) => {\r\n  const { t } = useLanguage();\r\n  const { currency } = useCurrency();\r\n\r\n  const convertedPrice = convertCurrency(product.price.cny, currency);\r\n  const formattedPrice = formatPrice(convertedPrice, currency);\r\n\r\n  return (\r\n    <div \r\n      className=\"group relative bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-2xl transform hover:-translate-y-2 transition-all duration-500 overflow-hidden border border-gray-100 dark:border-gray-700 animate-fade-in-up\"\r\n      style={{ animationDelay: `${index * 100}ms` }}\r\n    >      {/* Image Container */}\r\n      <div className=\"relative overflow-hidden rounded-t-2xl aspect-square\">\r\n        <img\r\n          src={product.images[0]}\r\n          alt={product.name}\r\n          loading=\"lazy\"\r\n          decoding=\"async\"\r\n          className=\"w-full h-full object-cover transition-transform duration-700 group-hover:scale-110\"\r\n        />\r\n        \r\n        {/* Overlay avec gradient */}\r\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\r\n        \r\n        {/* Badge CE si certifié */}\r\n        {product.certifiedCE && (\r\n          <div className=\"absolute top-3 left-3 bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full\">\r\n            CE\r\n          </div>\r\n        )}\r\n        \r\n        {/* Actions flottantes */}\r\n        <div className=\"absolute top-3 right-3 flex flex-col space-y-2 opacity-0 group-hover:opacity-100 transition-all duration-300 translate-x-4 group-hover:translate-x-0\">\r\n          <button className=\"w-8 h-8 bg-white/90 dark:bg-gray-800/90 rounded-full flex items-center justify-center hover:bg-white dark:hover:bg-gray-700 transition-colors shadow-lg\">\r\n            <Heart className=\"w-4 h-4 text-gray-600 dark:text-gray-300 hover:text-red-500\" />\r\n          </button>\r\n          <button className=\"w-8 h-8 bg-white/90 dark:bg-gray-800/90 rounded-full flex items-center justify-center hover:bg-white dark:hover:bg-gray-700 transition-colors shadow-lg\">\r\n            <Eye className=\"w-4 h-4 text-gray-600 dark:text-gray-300 hover:text-blue-500\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Contenu de la carte */}\r\n      <div className=\"p-5\">\r\n        {/* Nom du produit */}\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300 font-display\">\r\n          {product.name}\r\n        </h3>\r\n\r\n        {/* Fournisseur */}\r\n        <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-3 font-reading\">\r\n          {product.supplier.name}\r\n        </p>\r\n\r\n        {/* Prix */}\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <div className=\"flex flex-col\">\r\n            <span className=\"text-2xl font-bold text-blue-600 dark:text-blue-400 font-display\">\r\n              {formattedPrice}\r\n            </span>\r\n            {product.moq > 1 && (\r\n              <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                MOQ: {product.moq}\r\n              </span>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Rating étoiles */}\r\n          <div className=\"flex items-center space-x-1\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <Star\r\n                key={i}\r\n                className={`w-4 h-4 ${\r\n                  i < 4 \r\n                    ? ": "forms.interfaceproductreco",
  ";\r\n\r\ninterface SearchFilters {\r\n  priceRange: [number, number];\r\n  categories: string[];\r\n  certifications: string[];\r\n  moqRange: [number, number];\r\n  location: string;\r\n}\r\n\r\nexport const Home: React.FC = () => {\r\n  const { t, language } = useLanguage();\r\n  const [searchResults, setSearchResults] = useState<Product[]>([]);\r\n  const [allProducts, setAllProducts] = useState<Product[]>([]);\r\n  const [comparisonProducts, setComparisonProducts] = useState<Product[]>([]);\r\n  // Charger tous les produits au montage (incluant ceux ajoutés par les fournisseurs)\r\n  useEffect(() => {\r\n    const loadProducts = () => {\r\n      const products = productsService.getAllProducts();\r\n      setAllProducts(products);\r\n      // Afficher les 6 premiers produits par défaut\r\n      setSearchResults(products.slice(0, 6));\r\n    };\r\n    \r\n    ": "navigation.interfacesearchfilte",
  ";\r\n\r\ninterface SearchFilters {\r\n  priceRange: [number, number];\r\n  categories: string[];\r\n  certifications: string[];\r\n  moqRange: [number, number];\r\n  location: string;\r\n}\r\n\r\nexport const Home: React.FC = () => {\r\n  const { t, language } = useLanguage();\r\n  const [searchResults, setSearchResults] = useState<Product[]>([]);\r\n  const [allProducts, setAllProducts] = useState<Product[]>([]);\r\n  const [comparisonProducts, setComparisonProducts] = useState<Product[]>([]);\r\n  // Charger tous les produits au montage (incluant ceux ajoutés par les fournisseurs)\r\n  useEffect(() => {\r\n    const loadProducts = () => {\r\n      const products = productsService.getAllProducts();\r\n      setAllProducts(products);\r\n      // Afficher les 6 premiers produits par défaut\r\n      setSearchResults(products.slice(0, 6));\r\n    };\r\n    \r\n    // Charger les produits initialement\r\n    loadProducts();\r\n    \r\n    ": "navigation.interfacesearchfilte1",
  ";\r\n\r\ninterface SearchFilters {\r\n  priceRange: [number, number];\r\n  categories: string[];\r\n  certifications: string[];\r\n  moqRange: [number, number];\r\n  location: string;\r\n}\r\n\r\nexport const Home: React.FC = () => {\r\n  const { t, language } = useLanguage();\r\n  const [searchResults, setSearchResults] = useState<Product[]>([]);\r\n  const [allProducts, setAllProducts] = useState<Product[]>([]);\r\n  const [comparisonProducts, setComparisonProducts] = useState<Product[]>([]);\r\n  // Charger tous les produits au montage (incluant ceux ajoutés par les fournisseurs)\r\n  useEffect(() => {\r\n    const loadProducts = () => {\r\n      const products = productsService.getAllProducts();\r\n      setAllProducts(products);\r\n      // Afficher les 6 premiers produits par défaut\r\n      setSearchResults(products.slice(0, 6));\r\n    };\r\n    \r\n    // Charger les produits initialement\r\n    loadProducts();\r\n    \r\n    // S": "navigation.interfacesearchfilte2",
  ";\r\n\r\ninterface SupplierBusinessCardProps {\r\n    supplierData: {\r\n        name: string;\r\n        logo: string;\r\n        contact: {\r\n            phone: string;\r\n            email: string;\r\n            website: string;\r\n        };\r\n        location: {\r\n            address: string;\r\n            city: string;\r\n            country: string;\r\n        };\r\n    };\r\n    isOwner?: boolean;\r\n    onManageCards?: () => void;\r\n}\r\n\r\nconst SupplierBusinessCard: React.FC<SupplierBusinessCardProps> = ({\r\n    supplierData,\r\n    isOwner = false,\r\n    onManageCards\r\n}) => {\r\n    ": "auth.interfacesupplierbus",
  ";\r\n\r\ninterface SupplierBusinessCardProps {\r\n    supplierData: {\r\n        name: string;\r\n        logo: string;\r\n        contact: {\r\n            phone: string;\r\n            email: string;\r\n            website: string;\r\n        };\r\n        location: {\r\n            address: string;\r\n            city: string;\r\n            country: string;\r\n        };\r\n    };\r\n    isOwner?: boolean;\r\n    onManageCards?: () => void;\r\n}\r\n\r\nconst SupplierBusinessCard: React.FC<SupplierBusinessCardProps> = ({\r\n    supplierData,\r\n    isOwner = false,\r\n    onManageCards\r\n}) => {\r\n    // Convertir les données du fournisseur en format carte de visite\r\n    const businessCardData: BusinessCardData = {\r\n        ...defaultBusinessCardData,\r\n        companyName: supplierData.name,\r\n        tagline: ": "auth.interfacesupplierbus2",
  ";\r\n\r\ninterface SupplierSettings {\r\n  company: {\r\n    name: string;\r\n    email: string;\r\n    phone: string;\r\n    address: string;\r\n    city: string;\r\n    postalCode: string;\r\n    country: string;\r\n    website: string;\r\n    description: string;\r\n  };\r\n  profile: {\r\n    contactName: string;\r\n    contactEmail: string;\r\n    contactPhone: string;\r\n    position: string;\r\n  };\r\n  notifications: {\r\n    emailOrders: boolean;\r\n    emailMessages: boolean;\r\n    emailReviews: boolean;\r\n    emailMarketing: boolean;\r\n    pushOrders: boolean;\r\n    pushMessages: boolean;\r\n    pushReviews: boolean;\r\n  };\r\n  security: {\r\n    twoFactorAuth: boolean;\r\n    passwordExpiry: number;\r\n    sessionTimeout: number;\r\n  };\r\n  billing: {\r\n    companyName: string;\r\n    taxId: string;\r\n    billingEmail: string;\r\n    paymentMethod: string;\r\n  };\r\n}\r\n\r\nconst initialSettings: SupplierSettings = {\r\n  company: {\r\n    name: ": "auth.interfacesupplierset",
  ";\r\n\r\ninterface UseNotificationsOptions {\r\n  pollInterval?: number;\r\n  autoRefresh?: boolean;\r\n}\r\n\r\nexport const useNotifications = (options: UseNotificationsOptions = {}) => {\r\n  const { pollInterval = 30000, autoRefresh = true } = options;\r\n  \r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Récupérer le nombre de notifications non lues\r\n  const fetchUnreadCount = useCallback(async () => {\r\n    try {\r\n      const count = await notificationService.getUnreadCount();\r\n      setUnreadCount(count);\r\n      return count;\r\n    } catch (err) {\r\n      console.error(": "navigation.interfaceusenotifica2",
  ";\r\n    \r\n    switch (type) {\r\n      case 'success':\r\n        return <CheckCircle className={`${iconClass} text-green-500`} />;\r\n      case 'warning':\r\n        return <AlertTriangle className={`${iconClass} text-yellow-500`} />;\r\n      case 'error':\r\n        return <XCircle className={`${iconClass} text-red-500`} />;\r\n      case 'info':\r\n        return <Info className={`${iconClass} text-blue-500`} />;\r\n      case 'order':\r\n        return <ShoppingBag className={`${iconClass} text-purple-500`} />;\r\n      case 'payment':\r\n        return <CreditCard className={`${iconClass} text-green-500`} />;\r\n      case 'shipment':\r\n        return <Truck className={`${iconClass} text-blue-500`} />;\r\n      case 'system':\r\n        return <Settings className={`${iconClass} text-gray-500`} />;\r\n      default:\r\n        return <Info className={`${iconClass} text-gray-500`} />;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: Notification['priority']) => {\r\n    switch (priority) {\r\n      case 'urgent':\r\n        return 'border-l-red-500';\r\n      case 'high':\r\n        return 'border-l-orange-500';\r\n      case 'medium':\r\n        return 'border-l-yellow-500';\r\n      case 'low':\r\n        return 'border-l-gray-400';\r\n      default:\r\n        return 'border-l-gray-400';\r\n    }\r\n  };\r\n\r\n  const formatTimeAgo = (date: Date) => {\r\n    const now = new Date();\r\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n    \r\n    if (diffInSeconds < 60) {\r\n      return 'À l\\'instant';\r\n    } else if (diffInSeconds < 3600) {\r\n      const minutes = Math.floor(diffInSeconds / 60);\r\n      return `Il y a ${minutes} min`;\r\n    } else if (diffInSeconds < 86400) {\r\n      const hours = Math.floor(diffInSeconds / 3600);\r\n      return `Il y a ${hours}h`;\r\n    } else if (diffInSeconds < 604800) {\r\n      const days = Math.floor(diffInSeconds / 86400);\r\n      return `Il y a ${days}j`;\r\n    } else {\r\n      return date.toLocaleDateString('fr-FR', {\r\n        day: '2-digit',\r\n        month: '2-digit',\r\n        year: '2-digit'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (!notification.isRead) {\r\n      onMarkAsRead(notification.id);\r\n    }\r\n    onNotificationClick(notification);\r\n  };\r\n\r\n  const handleMarkAsReadClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    onMarkAsRead(notification.id);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`\r\n        relative p-4 border-l-4 ${getPriorityColor(notification.priority)}\r\n        ${notification.isRead \r\n          ? 'bg-white dark:bg-gray-800' \r\n          : 'bg-blue-50 dark:bg-blue-900/20'\r\n        }\r\n        hover:bg-gray-50 dark:hover:bg-gray-700\r\n        transition-all duration-200 cursor-pointer\r\n        border-b border-gray-200 dark:border-gray-600\r\n      `}\r\n      onClick={handleClick}\r\n    >\r\n      {/* Indicateur de notification non lue */}\r\n      {!notification.isRead && (\r\n        <div className=": "forms.switchtypecasesucces",
  ";\r\n                            }}\r\n                        />\r\n                    )}\r\n                </div>\r\n\r\n                {/* Contact Person *": "common.divcontactperson",
  ";\r\n            const fileName = options.fileName || `${timestamp}-${randomId}.${extension}`;\r\n            \r\n            resolve({\r\n              success: true,\r\n              url: `https://example.com/${folder}/${fileName}`,\r\n              progress: 100\r\n            });\r\n          }\r\n        } else {\r\n          onProgress?.(progress);\r\n        }\r\n      }, 150 + Math.random() * 200); // Délai variable pour simuler la réalité\r\n    });\r\n  }\r\n\r\n  ": "forms.constfilenameoptions",
  ";\r\n            const fileName = options.fileName || `${timestamp}-${randomId}.${extension}`;\r\n            \r\n            resolve({\r\n              success: true,\r\n              url: `https://example.com/${folder}/${fileName}`,\r\n              progress: 100\r\n            });\r\n          }\r\n        } else {\r\n          onProgress?.(progress);\r\n        }\r\n      }, 150 + Math.random() * 200); // Délai variable pour simuler la réalité\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Redimensionner une image\r\n   */\r\n  private resizeImage(\r\n    file: File,\r\n    options: { maxWidth: number; maxHeight: number; quality: number }\r\n  ): Promise<File> {\r\n    return new Promise((resolve, reject) => {\r\n      const canvas = document.createElement(": "forms.constfilenameoptions1",
  ";\r\n            }\r\n\r\n            return { success: false, error: errorMessage };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Récupérer tous les utilisateurs\r\n     *": "admin.returnsuccessfalseer1",
  ";\r\n            }\r\n\r\n            return { success: false, error: errorMessage };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Récupérer tous les utilisateurs\r\n     */\r\n    async getAllUsers(): Promise<AdminUser[]> {\r\n        try {\r\n            console.log(": "admin.returnsuccessfalseer2",
  ";\r\n            }\r\n\r\n            setMessage(`❌ ${errorMessage}: ${error.message}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const currentUser = auth.currentUser;\r\n\r\n    return (\r\n        <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200 mb-4\">\r\n            <h4 className=\"font-semibold text-blue-800 mb-2\">Connexion Admin Rapide</h4>\r\n\r\n            {currentUser ? (\r\n                <div className=\"text-green-600\">\r\n                    ✅ Connecté en tant que: {currentUser.email}\r\n                </div>\r\n            ) : (\r\n                <div className=\"space-y-2\">\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\r\n                        <Input\r\n                            type=\"email\"\r\n                            placeholder=\"Email admin\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                        <Input\r\n                            type=\"password\"\r\n                            placeholder=\"Mot de passe\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <Button onClick={handleLogin} disabled={loading} size=\"sm\">\r\n                        {loading ? ": "auth.setmessageerrormessa",
  ";\r\n            } else if (error.message) {\r\n                errorMessage = error.message;\r\n            }\r\n\r\n            return {\r\n                success: false,\r\n                message: errorMessage\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Valider les données de création d": "common.elseiferrormessageer1",
  ";\r\n            } else if (error.message) {\r\n                errorMessage = error.message;\r\n            }\r\n\r\n            return { success: false, error: errorMessage };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Créer plusieurs utilisateurs de production en batch\r\n     */\r\n    public async createProductionUsersBatch(users: CreateProductionUserData[]): Promise<{\r\n        success: boolean;\r\n        created: User[];\r\n        failed: Array<{ email: string; error: string }>;\r\n        summary: ProductionUserSummary;\r\n    }> {\r\n        console.log(`🚀 === CRÉATION BATCH DE ${users.length} UTILISATEURS ===`);\r\n\r\n        const created: User[] = [];\r\n        const failed: Array<{ email: string; error: string }> = [];\r\n\r\n        for (const userData of users) {\r\n            try {\r\n                console.log(`⏳ Création: ${userData.email}...`);\r\n\r\n                const result = await this.createProductionUser(userData);\r\n\r\n                if (result.success && result.user) {\r\n                    created.push(result.user);\r\n                    console.log(`✅ ${userData.email} créé avec succès`);\r\n                } else {\r\n                    failed.push({\r\n                        email: userData.email,\r\n                        error: result.error || ": "auth.elseiferrormessageer",
  ";\r\n            } else if (error.message) {\r\n                errorMessage = error.message;\r\n            }\r\n\r\n            return { success: false, error: errorMessage };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Récupérer tous les utilisateurs\r\n     *": "admin.elseiferrormessageer",
  ";\r\n        setError(errorMessage);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchContainers();\r\n    // Refresh data every 10 seconds to simulate real-time updates\r\n    const interval = setInterval(fetchContainers, 10000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  const handlePreorder = (container: Container) => {\r\n    setSelectedContainer(container);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleReserveSpace = (container: Container) => {\r\n    setReservationContainer(container);\r\n    setIsReservationModalOpen(true);\r\n  };\r\n\r\n  const handleReservationSubmit = async (containerId: string, quantity: number, estimatedPrice: number) => {\r\n    try {\r\n      // In a real app, this would make an API call to create the reservation\r\n      console.log(`Reservation for container ${containerId}: ${quantity} CBM at ${estimatedPrice}€`);\r\n      alert(`Réservation confirmée!\\n${quantity} CBM réservés pour ${estimatedPrice}€`);\r\n      \r\n      ": "ecommerce.seterrorerrormessage",
  ";\r\n        setError(errorMessage);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchContainers();\r\n    // Refresh data every 10 seconds to simulate real-time updates\r\n    const interval = setInterval(fetchContainers, 10000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  const handlePreorder = (container: Container) => {\r\n    setSelectedContainer(container);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleReserveSpace = (container: Container) => {\r\n    setReservationContainer(container);\r\n    setIsReservationModalOpen(true);\r\n  };\r\n\r\n  const handleReservationSubmit = async (containerId: string, quantity: number, estimatedPrice: number) => {\r\n    try {\r\n      // In a real app, this would make an API call to create the reservation\r\n      console.log(`Reservation for container ${containerId}: ${quantity} CBM at ${estimatedPrice}€`);\r\n      alert(`Réservation confirmée!\\n${quantity} CBM réservés pour ${estimatedPrice}€`);\r\n      \r\n      // Refresh containers to get updated data\r\n      const data = await containerService.getContainers();\r\n      setContainers(data);\r\n      setIsReservationModalOpen(false);\r\n      setReservationContainer(null);\r\n    } catch (err) {\r\n      console.error(": "ecommerce.seterrorerrormessage1",
  ";\r\n        }\r\n\r\n        const updatedContainer = {\r\n          ...container,\r\n          usedCapacity: newUsedCapacity,\r\n          status: newStatus,\r\n        };\r\n\r\n        currentContainers.set(containerId, updatedContainer);\r\n        resolve(updatedContainer);\r\n      }, 300); // Simule un délai réseau\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Ajoute un article à un conteneur.\r\n   * @param containerId L": "common.constupdatedcontaine1",
  ";\r\n        }\r\n\r\n        setErrors(newErrors);\r\n        return Object.keys(newErrors).length === 0;\r\n    };\r\n\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        // Vérifier si un admin est connecté\r\n        if (!auth.currentUser) {\r\n            setErrors({ general: ": "admin.seterrorsnewerrorsre1",
  ";\r\n    commission: number;\r\n    joinDate: Date;\r\n}\r\n\r\n// Service pour les collaborations\r\nexport const collaborationService = {\r\n    // Récupérer toutes les collaborations d": "common.commissionnumberjoin1",
  ";\r\n    created_at: string;\r\n}\r\n\r\n// Composant mémorisé pour chaque item de la liste\r\nconst CompanyItem = memo(({ company }: { company: Company }) => (\r\n    <div className=": "forms.createdatstringcompo",
  ";\r\n    created_at: string;\r\n}\r\n\r\n// Composant mémorisé pour chaque item de la liste\r\nconst CompanyItem = memo(({ company }: { company: Company }) => (\r\n    <div className=\"flex items-center p-4 bg-white border-b border-gray-100 hover:bg-gray-50 transition-colors duration-150\">\r\n        <div className=\"flex-shrink-0 w-12 h-12 mr-4\">\r\n            <OptimizedImage\r\n                src={company.logo || ": "forms.createdatstringcompo1",
  ";\r\n    isActive?: boolean;\r\n}\r\n\r\nexport interface SupabaseAdminUser {\r\n    id: string;\r\n    email: string;\r\n    name: string;\r\n    role: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n    last_login?: string;\r\n}\r\n\r\nclass SupabaseAdminUserService {\r\n    /**\r\n     * Créer un nouvel utilisateur directement dans la table users\r\n     * Note: En production, il faudrait utiliser Supabase Auth avec les bonnes permissions\r\n     *": "auth.isactivebooleanexpor1",
  ";\r\n    isActive?: boolean;\r\n}\r\n\r\nexport interface SupabaseAdminUser {\r\n    id: string;\r\n    email: string;\r\n    name: string;\r\n    role: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n    last_login?: string;\r\n}\r\n\r\nclass SupabaseAdminUserService {\r\n    /**\r\n     * Créer un nouvel utilisateur directement dans la table users\r\n     * Note: En production, il faudrait utiliser Supabase Auth avec les bonnes permissions\r\n     */\r\n    async createUser(userFormData: CreateUserData): Promise<{ success: boolean; user?: SupabaseAdminUser; error?: string }> {\r\n        try {\r\n            console.log(": "auth.isactivebooleanexpor2",
  ";\r\n    private secondaryApp: any = null;\r\n    private secondaryAuth: any = null;\r\n    private secondaryDb: any = null;\r\n\r\n    /**\r\n     * Initialise une instance Firebase secondaire pour la création d": "common.privatesecondaryappa1",
  ";\r\n    startDate: string;\r\n    endDate: string;\r\n    budget: number;\r\n    description: string;\r\n    requirements: string[];\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n}\r\n\r\nexport interface InfluencerProfile {\r\n    id?: string;\r\n    userId: string;\r\n    name: string;\r\n    email: string;\r\n    avatar?: string;\r\n    bio: string;\r\n    followers: number;\r\n    country: string;\r\n    category: string;\r\n    languages: string[];\r\n    socialMedia: {\r\n        instagram?: string;\r\n        tiktok?: string;\r\n        youtube?: string;\r\n        twitter?: string;\r\n    };\r\n    pricing: {\r\n        postPrice: number;\r\n        storyPrice: number;\r\n        reelPrice: number;\r\n    };\r\n    engagement: number;\r\n    verified: boolean;\r\n    stats: {\r\n        totalViews: number;\r\n        totalEngagement: number;\r\n        totalClicks: number;\r\n        totalEarnings: number;\r\n    };\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n}\r\n\r\nexport interface ReferralData {\r\n    id?: string;\r\n    influencerId: string;\r\n    referralCode: string;\r\n    referredUserId: string;\r\n    referredUserEmail: string;\r\n    status: ": "auth.startdatestringendda",
  ";\r\n    value: string;\r\n    price?: number;\r\n    available: boolean;\r\n}\r\n\r\nexport interface Supplier {\r\n    id: string;\r\n    name: string;\r\n    location: string;\r\n    rating: number;\r\n    verified: boolean;\r\n    responseTime: string;\r\n    avatar?: string;\r\n}\r\n\r\nexport interface Product {\r\n    id?: string; // Optionnel car généré par Firebase\r\n    name: string;\r\n    description: string;\r\n    longDescription: string;\r\n    price: number;\r\n    moq: number;\r\n    category: string;\r\n    images: ProductImage[];\r\n    variants: ProductVariant[];\r\n    supplier: Supplier;\r\n    stock: number;\r\n    tags: string[];\r\n    deliveryTime: {\r\n        min: number;\r\n        max: number;\r\n        unit: ": "forms.valuestringpricenumb1",
  ";\r\n    }\r\n\r\n    /**\r\n     * Mettre à jour la dernière connexion\r\n     *": "auth.mettreajourladernier1",
  ";\r\n    }\r\n\r\n    /**\r\n     * Mettre à jour la dernière connexion\r\n     */\r\n    private async updateLastLogin(userId: string): Promise<void> {\r\n        try {\r\n            const userDocRef = doc(db, ": "auth.mettreajourladernier2",
  ";\r\n    }\r\n\r\n    /**\r\n     * Valider les données de connexion\r\n     *": "auth.validerlesdonneesdec1",
  ";\r\n    }\r\n\r\n    /**\r\n     * Valider les données de connexion\r\n     */\r\n    private validateLoginInput(email: string, password: string): { valid: boolean; error?: string } {\r\n        if (!email || !email.trim()) {\r\n            return { valid: false, error: ": "auth.validerlesdonneesdec2",
  ";\r\n    }\r\n\r\n    // Sinon, attribuer le rôle par défaut\r\n    return this.DEFAULT_ROLE;\r\n  }\r\n\r\n  /**\r\n   * Vérifie si un email correspond à un administrateur\r\n   * @param email - L": "auth.sinonattribuerlerole1",
  ";\r\n    }\r\n  }\r\n  /**\r\n   * Crée un utilisateur démo pour les tests\r\n   * @param email - L": "auth.creeunutilisateurdem1",
  ";\r\n    }\r\n  };\r\n  return (\r\n    <AdminLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Bouton retour */}\r\n        <BackButton to=\"/admin/dashboard\" label=\"Retour au tableau de bord admin\" variant=\"ghost\" />\r\n\r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n              Gestion des Utilisateurs\r\n            </h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Gérez tous les utilisateurs de la plateforme\r\n            </p>\r\n          </div>          <div className=\"flex gap-2\">\r\n            <Button onClick={() => setIsCreateModalOpen(true)} className=\"flex items-center gap-2\">\r\n              <Plus size={16} />\r\n              Nouvel utilisateur\r\n            </Button>\r\n            <Button\r\n              onClick={handleSyncUsers}\r\n              variant=\"outline\"\r\n              className=\"flex items-center gap-2\"\r\n              disabled={syncLoading}\r\n            >\r\n              <RefreshCw size={16} className={syncLoading ? ": "navigation.returnadminlayoutdiv",
  ";\r\n    };\r\n\r\n    // Fermer avec la touche Échap\r\n    React.useEffect(() => {\r\n        const handleEscape = (e: KeyboardEvent) => {\r\n            if (e.key === ": "common.fermeraveclatoucheec3",
  ";\r\n    };\r\n\r\n    // Fonction pour ajouter au devis\r\n    const handleAddToQuote = (product: ProductListItem) => {\r\n        const quantity = getQuantity(product.id!);\r\n        addToQuote(product, quantity);\r\n\r\n        ": "forms.fonctionpourajoutera1",
  ";\r\n    };\r\n\r\n    // Fonction pour ajouter au devis\r\n    const handleAddToQuote = (product: ProductListItem) => {\r\n        const quantity = getQuantity(product.id!);\r\n        addToQuote(product, quantity);\r\n\r\n        // Notification de succès\r\n        showToast(`${product.name} ajouté au devis (${quantity} unités)`, ": "forms.fonctionpourajoutera3",
  ";\r\n    };\r\n\r\n    // Fonction pour ajouter au devis\r\n    const handleAddToQuote = (product: ProductListItem) => {\r\n        const quantity = getQuantity(product.id!);\r\n        addToQuote(product, quantity);\r\n\r\n        // Notification de succès (optionnel)\r\n        console.log(`Produit ${product.name} ajouté au devis avec quantité: ${quantity}`);\r\n    };\r\n\r\n    // Fermer avec la touche Échap\r\n    React.useEffect(() => {\r\n        const handleEscape = (e: KeyboardEvent) => {\r\n            if (e.key === ": "forms.fonctionpourajoutera5",
  ";\r\n    };\r\n    specifications: Record<string, string>;\r\n    discount?: {\r\n        minQty: number;\r\n        percentage: number;\r\n    };\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n    active?: boolean; // Pour masquer/afficher des produits\r\n}\r\n\r\n// Interface simplifiée pour la liste des produits\r\nexport interface ProductListItem {\r\n    id: string;\r\n    name: string;\r\n    price: number;\r\n    moq: number;\r\n    category: string;\r\n    image: string; ": "forms.specificationsrecord1",
  ";\r\n    };\r\n    specifications: Record<string, string>;\r\n    discount?: {\r\n        minQty: number;\r\n        percentage: number;\r\n    };\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n    active?: boolean; // Pour masquer/afficher des produits\r\n}\r\n\r\n// Interface simplifiée pour la liste des produits\r\nexport interface ProductListItem {\r\n    id: string;\r\n    name: string;\r\n    price: number;\r\n    moq: number;\r\n    category: string;\r\n    image: string; // URL de l": "forms.specificationsrecord2",
  ";\r\n    };\r\n  }, [isOpen]);\r\n\r\n  // Validation en temps réel\r\n  useEffect(() => {\r\n    if (quantity > availableCapacity) {\r\n      setError(`Quantité maximale disponible: ${availableCapacity} CBM`);\r\n    } else if (quantity <= 0) {\r\n      setError(": "common.isopenvalidationente1",
  ";\r\n  downloadCount: number;\r\n  category: string;\r\n  url?: string; // URL du fichier uploadé\r\n}\r\n\r\nconst mockDocuments: Document[] = [\r\n  {\r\n    id: ": "common.downloadcountnumberc1",
  ";\r\n  favorites: string[];\r\n  browsingHistory: string[];\r\n  messages: any[];\r\n  stripeCustomerId?: string;\r\n  subscriptionId?: string;\r\n  language?: UserLanguage;\r\n  currency?: UserCurrency;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  last_login?: string;\r\n  createdAt?: string; // Alias pour created_at\r\n  updatedAt?: string; // Alias pour updated_at\r\n  lastLogin?: string; // Alias pour last_login\r\n  isActive?: boolean; // Statut actif/inactif\r\n  phone?: string; // Numéro de téléphone\r\n  address?: string; // Adresse\r\n}\r\n\r\nexport interface Supplier {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  location: string;\r\n  rating?: number;\r\n  verified?: boolean;\r\n  products?: string[];\r\n  email?: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: string;\r\n  name: Record<UserLanguage, string>;\r\n  description: Record<UserLanguage, string>;\r\n  price: { cny: number; unitCny: number; };\r\n  images: string[];\r\n  category: string;\r\n  supplier: Supplier;\r\n  moq: number;\r\n  certifiedCE: boolean;\r\n  origin?: string;\r\n  material?: string;\r\n  brand?: string;\r\n  modelNumber?: string;\r\n  application?: string;\r\n  style?: string;\r\n  specifications?: Record<string, string | number | boolean>;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n  // Nouvelles propriétés pour le UI amélioré\r\n  discount?: number; // Pourcentage de remise\r\n  featured?: string[]; // Liste des fonctionnalités/caractéristiques\r\n  isPopular?: boolean; ": "auth.favoritesstringbrows",
  ";\r\n  favorites: string[];\r\n  browsingHistory: string[];\r\n  messages: any[];\r\n  stripeCustomerId?: string;\r\n  subscriptionId?: string;\r\n  language?: UserLanguage;\r\n  currency?: UserCurrency;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  last_login?: string;\r\n  createdAt?: string; // Alias pour created_at\r\n  updatedAt?: string; // Alias pour updated_at\r\n  lastLogin?: string; // Alias pour last_login\r\n  isActive?: boolean; // Statut actif/inactif\r\n  phone?: string; // Numéro de téléphone\r\n  address?: string; // Adresse\r\n}\r\n\r\nexport interface Supplier {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  location: string;\r\n  rating?: number;\r\n  verified?: boolean;\r\n  products?: string[];\r\n  email?: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: string;\r\n  name: Record<UserLanguage, string>;\r\n  description: Record<UserLanguage, string>;\r\n  price: { cny: number; unitCny: number; };\r\n  images: string[];\r\n  category: string;\r\n  supplier: Supplier;\r\n  moq: number;\r\n  certifiedCE: boolean;\r\n  origin?: string;\r\n  material?: string;\r\n  brand?: string;\r\n  modelNumber?: string;\r\n  application?: string;\r\n  style?: string;\r\n  specifications?: Record<string, string | number | boolean>;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n  // Nouvelles propriétés pour le UI amélioré\r\n  discount?: number; // Pourcentage de remise\r\n  featured?: string[]; // Liste des fonctionnalités/caractéristiques\r\n  isPopular?: boolean; // Produit populaire\r\n  isNew?: boolean; // Nouveau produit\r\n  rating?: number; ": "auth.favoritesstringbrows1",
  ";\r\n  favorites: string[];\r\n  browsingHistory: string[];\r\n  messages: any[];\r\n  stripeCustomerId?: string;\r\n  subscriptionId?: string;\r\n  language?: UserLanguage;\r\n  currency?: UserCurrency;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  last_login?: string;\r\n  createdAt?: string; // Alias pour created_at\r\n  updatedAt?: string; // Alias pour updated_at\r\n  lastLogin?: string; // Alias pour last_login\r\n  isActive?: boolean; // Statut actif/inactif\r\n  phone?: string; // Numéro de téléphone\r\n  address?: string; // Adresse\r\n}\r\n\r\nexport interface Supplier {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  location: string;\r\n  rating?: number;\r\n  verified?: boolean;\r\n  products?: string[];\r\n  email?: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: string;\r\n  name: Record<UserLanguage, string>;\r\n  description: Record<UserLanguage, string>;\r\n  price: { cny: number; unitCny: number; };\r\n  images: string[];\r\n  category: string;\r\n  supplier: Supplier;\r\n  moq: number;\r\n  certifiedCE: boolean;\r\n  origin?: string;\r\n  material?: string;\r\n  brand?: string;\r\n  modelNumber?: string;\r\n  application?: string;\r\n  style?: string;\r\n  specifications?: Record<string, string | number | boolean>;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n  // Nouvelles propriétés pour le UI amélioré\r\n  discount?: number; // Pourcentage de remise\r\n  featured?: string[]; // Liste des fonctionnalités/caractéristiques\r\n  isPopular?: boolean; // Produit populaire\r\n  isNew?: boolean; // Nouveau produit\r\n  rating?: number; // Note du produit\r\n  reviewCount?: number; // Nombre d": "auth.favoritesstringbrows2",
  ";\r\n  limitCount?: number;\r\n  startAfterDoc?: QueryDocumentSnapshot;\r\n}\r\n\r\nexport interface PaginatedResult<T> {\r\n  data: T[];\r\n  lastDoc?: QueryDocumentSnapshot;\r\n  hasMore: boolean;\r\n  total?: number;\r\n}\r\n\r\n/**\r\n * Service CRUD générique pour toutes les collections Firestore\r\n */\r\nexport class FirestoreCrudService<T extends { id?: string }> {\r\n  constructor(private collectionName: string) {}\r\n\r\n  /**\r\n   * Crée un nouveau document\r\n   *": "forms.limitcountnumberstar1",
  ";\r\n  limitCount?: number;\r\n  startAfterDoc?: QueryDocumentSnapshot;\r\n}\r\n\r\nexport interface PaginatedResult<T> {\r\n  data: T[];\r\n  lastDoc?: QueryDocumentSnapshot;\r\n  hasMore: boolean;\r\n  total?: number;\r\n}\r\n\r\n/**\r\n * Service CRUD générique pour toutes les collections Firestore\r\n */\r\nexport class FirestoreCrudService<T extends { id?: string }> {\r\n  constructor(private collectionName: string) {}\r\n\r\n  /**\r\n   * Crée un nouveau document\r\n   */\r\n  async create(data: Omit<T, ": "forms.limitcountnumberstar2",
  ";\r\n  preview?: string;\r\n}\r\n\r\nconst FileUpload: React.FC<FileUploadProps> = ({\r\n  onFileSelect,\r\n  onUpload,\r\n  maxFiles = 10,\r\n  maxSizePerFile = 50, // 50MB par défaut\r\n  acceptedTypes = [": "common.previewstringconstfi1",
  ";\r\n  size: number;\r\n  uploadedAt: Date;\r\n  path: string;\r\n  metadata?: {\r\n    width?: number;\r\n    height?: number;\r\n    duration?: number; // pour les vidéos\r\n    contentType?: string;\r\n  };\r\n}\r\n\r\nexport interface UploadProgress {\r\n  bytesTransferred: number;\r\n  totalBytes: number;\r\n  progress: number; ": "common.sizenumberuploadedat",
  ";\r\n  size: number;\r\n  uploadedAt: Date;\r\n  path: string;\r\n  metadata?: {\r\n    width?: number;\r\n    height?: number;\r\n    duration?: number; // pour les vidéos\r\n    contentType?: string;\r\n  };\r\n}\r\n\r\nexport interface UploadProgress {\r\n  bytesTransferred: number;\r\n  totalBytes: number;\r\n  progress: number; // 0-100\r\n  state: ": "common.sizenumberuploadedat1",
  ";\r\n  url?: string;\r\n  progress?: number;\r\n}\r\n\r\nconst ImageUpload: React.FC<ImageUploadProps> = ({\r\n  onImageSelect,\r\n  onUpload,\r\n  maxImages = 10,\r\n  maxSizePerImage = 10, // 10MB par défaut\r\n  className = ": "forms.urlstringprogressnum1",
  ";\r\n  }\r\n\r\n  /**\r\n   * Déterminer le type de fichier à partir du chemin\r\n   *": "common.determinerletypedefi",
  ";\r\n  }\r\n\r\n  /**\r\n   * Déterminer le type de fichier à partir du chemin\r\n   */\r\n  private getFileTypeFromPath(path: string): ": "common.determinerletypedefi1",
  ";\r\n  }\r\n\r\n  /**\r\n   * Extraire les métadonnées du fichier\r\n   *": "common.extrairelesmetadonne",
  ";\r\n  }\r\n\r\n  /**\r\n   * Extraire les métadonnées du fichier\r\n   */\r\n  private async extractMetadata(file: File): Promise<any> {\r\n    const metadata: any = {\r\n      contentType: file.type\r\n    };\r\n\r\n    if (file.type.startsWith(": "common.extrairelesmetadonne1",
  ";\r\n  }\r\n  \r\n  // Si le nom est encore une chaîne simple, utiliser les traductions prédéfinies\r\n  const productNameTranslations: Record<string, Record<UserLanguage, string>> = {\r\n    ": "forms.silenomestencoreunec1",
  ";\r\n  };\r\n\r\n  const getTotalRevenue = () => {\r\n    return customers.reduce((sum, customer) => sum + customer.totalSpent, 0);\r\n  };\r\n  return (\r\n    <SupplierLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Bouton retour */}\r\n        <BackButton to=\"/supplier/dashboard\" label=\"Retour au tableau de bord\" variant=\"ghost\" />\r\n\r\n        {/* Header */}\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n            Mes Clients\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            Gérez vos relations clients et suivez leur activité\r\n          </p>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Users className=\"h-8 w-8 text-blue-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total clients</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{customers.length}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Users className=\"h-8 w-8 text-green-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Clients actifs</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {customers.filter(c => c.status === ": "navigation.constgettotalrevenue",
  ";\r\n  };\r\n\r\n  const getTypeIcon = (fromType: string) => {\r\n    const icons = {\r\n      customer: <User size={16} />,\r\n      supplier: <MessageSquare size={16} ": "admin.constgettypeiconfrom",
  ";\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <AdminLayout>\r\n        <div className=\"flex justify-center items-center h-64\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\r\n        </div>\r\n      </AdminLayout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AdminLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* En-tête */}\r\n        <div className=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n              {t(": "forms.ifloadingreturnadmin",
  ";\r\n// Imports Firebase pour la création manuelle\r\nimport { db, auth } from ": "common.importsfirebasepourl1",
  ";\r\n// Types pour la création d": "common.typespourlacreationd1",
  ";\r\n// 🚨 COMPOSANTS DE TEST DÉSACTIVÉS - ils utilisent des services avec Auth Firebase\r\n": "common.composantsdetestdesa",
  ";\r\n// 🚨 COMPOSANTS DE TEST DÉSACTIVÉS - ils utilisent des services avec Auth Firebase\r\n// import UserCreationTest from ": "admin.composantsdetestdesa",
  ";\r\n// 🚨 IMPORTS DE SERVICES SÉCURISÉS UNIQUEMENT (Firestore seulement, pas Auth)\r\nimport { finalUserCreationService } from ": "admin.importsdeservicessec1",
  ";\r\nimport UserProfile from ": "admin.importuserprofilefro1",
  ";\r\nimport {\r\n    collaborationService,\r\n    influencerService,\r\n    referralService,\r\n    Collaboration,\r\n    InfluencerProfile,\r\n    ReferralData\r\n} from ": "common.importcollaborations",
  ";\r\nimport { \r\n  Home, \r\n  Package, \r\n  BarChart3, \r\n  MessageSquare, \r\n  FileText, \r\n  Settings,\r\n  Users,\r\n  Star\r\n} from ": "navigation.importhomepackagebar",
  ";\r\nimport { \r\n  productsService, \r\n  ordersService, \r\n  suppliersService, \r\n  messagesService,\r\n  FirestoreProduct,\r\n  FirestoreOrder,\r\n  FirestoreSupplier,\r\n  FirestoreMessage\r\n} from ": "ecommerce.importproductsservic",
  ";\r\nimport { MessageSquare, Search, Plus, Send, Paperclip, MoreVertical, User } from ": "admin.importmessagesquares",
  ";\r\nimport { Shield, Eye, CheckCircle, XCircle, AlertTriangle, MessageSquare, User, Package } from ": "admin.importshieldeyecheck",
  ";\r\nimport { Star, Search, MessageSquare, ThumbsUp, Calendar, User, Package } from ": "admin.importstarsearchmess",
  ";\r\nimport { Users, Search, Eye, MessageSquare, MapPin, Calendar, Mail, Phone, ShoppingBag } from ": "forms.importuserssearcheye",
  ";\r\nimport { getAuth, createUserWithEmailAndPassword, updateProfile, signOut } from ": "auth.importgetauthcreateu",
  ";\r\nimport { notificationService } from ": "common.importnotificationse3",
  ";\r\nimport { useNotifications } from ": "common.importusenotificatio2",
  ";\r\n}\r\n\r\n// Templates prédéfinis\r\nexport const businessCardTemplates = [\r\n    {\r\n        id: ": "common.templatespredefinise1",
  ";\r\n}\r\n\r\ninterface Conversation {\r\n  id: string;\r\n  participants: string[];\r\n  lastMessage: Message;\r\n  unreadCount: number;\r\n  subject: string;\r\n}\r\n\r\n// Mock data for demonstration (moved outside component)\r\nconst mockMessages: Message[] = [\r\n  {\r\n    id: ": "common.interfaceconversatio",
  ";\r\n};\r\n\r\n// Fonction à appeler si l": "common.fonctionaappelersil1",
  "</li>\r\n                    <li>4. Déconnectez-vous et reconnectez-vous pour tester<": "common.lili4deconnectezvous",
  ">\n                      {category.name}\n                    </span>\n                  </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section des cartes produits - Déplacée en haut *": "forms.categorynamespanlink1",
  ">\n                      {category.name}\n                    </span>\n                  </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section des cartes produits - Déplacée en haut */}\n      <div className=": "forms.categorynamespanlink2",
  ">\n                      {t('supplier.registration.validation')}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Message personnalisé pour les sourceurs avec animation */}\n            {role === 'sourcer' && (\n              <div \n                className=": "forms.tsupplierregistratio",
  ">\n                  {Object.entries(currencyNames).map(([code, name]) => (\n                    <button\n                      key={code}\n                      onClick={() => handleCurrencyChange(code as UserCurrency)}\n                      className={`${currency === code ? 'bg-gray-100 dark:bg-gray-600' : ''} block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 w-full text-left hover:bg-gray-100 dark:hover:bg-gray-600`}\n                    >\n                      {name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Notifications - Affiché uniquement pour les utilisateurs connectés */}\n            {user && (\n              <>\n                <div\n                  className=": "forms.objectentriescurrenc",
  ">\n                  {category.name}\n                </span>\n              </Link>\n            ))}\n          </div>          </div>        </div>\n      </div>\n\n      {/* Section Recommandations - Positionnée avant les cartes de catégories *": "forms.categorynamespanlink3",
  ">\n                  {category.name}\n                </span>\n              </Link>\n            ))}\n          </div>          </div>        </div>\n      </div>\n\n      {/* Section Recommandations - Positionnée avant les cartes de catégories */}\n      <div className=": "forms.categorynamespanlink4",
  ">\n                  {t('homepage.optimize.manage.description')}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section Découvrez tous nos fournisseurs - Repositionnée et améliorée */}\n      <div className=": "navigation.thomepageoptimizeman1",
  ">\n                  {t('homepage.optimize.pay.description')}\n                </p>\n              </div>\n            </div>\n\n            {/* Gérez facilement */}\n            <div className=": "navigation.thomepageoptimizepay1",
  ">\n                <MessageSquare className=": "forms.messagesquareclassna2",
  ">\n                Explorez par catégorie\n              <": "common.explorezparcategorie",
  ">\n                Explorez par catégorie\n              </h3>\n              <p className=": "forms.explorezparcategorie",
  ">\n                Réseau global\n              <": "common.reseauglobal1",
  ">\n                Réseau global\n              </span>\n            </div>\n          </div>\n\n          <h2 className=": "forms.reseauglobalspandivd",
  ">\n                Réseau global\n              </span>\n            </div>\n          </div>\n          \n          <h2 className=": "forms.reseauglobalspandivd1",
  ">\n                {/* Effet de brillance animé *": "common.effetdebrillanceanim1",
  ">\n                {/* Effet de brillance animé */}\n                <div className=": "forms.effetdebrillanceanim1",
  ">\n                {role === 'customer' && t('role.customerDescription')}\n                {role === 'supplier' && t('role.supplierDescription')}\n                {role === 'sourcer' && t('role.sourcerDescription')}\n                {role === 'influencer' && t('role.sourcerDescription')} {/* Utilise la même description que sourceur */}\n              </p>\n            </div>\n\n            {/* Message personnalisé pour les fournisseurs avec animation */}\n            {role === 'supplier' && (\n              <div \n                className=": "forms.rolecustomertrolecus",
  ">\n                {role === 'customer' && t('role.customerTitle')}\n                {role === 'supplier' && t('role.supplierTitle')}\n                {role === 'sourcer' && t('role.sourcerTitle')}\n                {role === 'influencer' && t('role.sourcerTitle')} {/* Utilise le même titre que sourceur */}\n              </h4>\n              <p className=": "forms.rolecustomertrolecus1",
  ">\n                {t('homepage.how.cta')}\n              </Button>\n            </Link>\n          </div>\n\n          {/* Section Recommandations intégrée */}\n          <ProductRecommendations />\n        </div>\n      </div>\n\n      {/* Optimisez vos commandes */}\n      <div className=": "navigation.thomepagehowctabutto",
  ">\n                {t('homepage.how.step1.description')}\n              </p>\n            </div>\n\n            {/* Étape 2 */}\n            <div className=": "navigation.thomepagehowstep1des1",
  ">\n                {t('homepage.how.step2.description')}\n              </p>\n            </div>\n\n            {/* Étape 3 */}\n            <div className=": "navigation.thomepagehowstep2des1",
  ">\n                {user.messages.map((message: Message) => {\n                  const product = getProductById(message.supplierId);\n                  return (\n                    <div key={message.id} className=": "forms.usermessagesmapmessa",
  ">\n              Explorez par catégorie\n            <": "common.explorezparcategorie1",
  ">\n              Explorez par catégorie\n            </h3>\n            <p className=": "forms.explorezparcategorie1",
  ">\n              Êtes-vous sûr de vouloir supprimer l": "forms.etesvoussurdevouloir3",
  ">\n              Êtes-vous sûr de vouloir supprimer l'utilisateur <span className=": "forms.etesvoussurdevouloir5",
  ">\n            Retour à l": "navigation.retoural4",
  ">\n            {/* Carte Électronique *": "ecommerce.carteelectronique1",
  ">\n            {/* Carte Électronique */}\n            <div className={`bg-gradient-to-br from-blue-200 via-blue-300 to-orange-300 rounded-xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-3 hover:rotate-1 cursor-pointer group relative ${\n              visibleCards >= 1 ? 'translate-y-0 opacity-100 scale-100' : 'translate-y-8 opacity-0 scale-95'\n            }`}\n            style={{ transitionDelay: '200ms' }}>\n              <div className=": "forms.carteelectroniquediv",
  ">\n            {/* Carte Électronique */}\n            <div className={`bg-gradient-to-br from-blue-200 via-blue-300 to-orange-300 rounded-xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-3 hover:rotate-1 cursor-pointer group relative ${visibleCards >= 1 ? 'translate-y-0 opacity-100 scale-100' : 'translate-y-8 opacity-0 scale-95'\n              }`}\n              style={{ transitionDelay: '200ms' }}>\n              <div className=": "forms.carteelectroniquediv1",
  ">\n            {/* Recherchez des offres *": "common.recherchezdesoffres1",
  ">\n            {/* Étape 1 *": "common.etape11",
  ">\n            {/* Étape 1 */}\n            <div className=": "forms.etape1divclassname1",
  ">\n            {user.messages.length > 0 ? (\n              <div className=": "forms.usermessageslength0d",
  ">\n          Recommandé\n        <": "common.recommande",
  ">\n          Recommandé\n        </div>\n      )}\n      \n      {isCurrentPlan && (\n        <div className=": "forms.recommandediviscurre",
  ">\n          {/* Système de particules flottantes *": "common.systemedeparticulesf",
  ">\n          {/* Système de particules flottantes */}\n          <React.Suspense fallback={null}>\n            <ParticleSystem particleCount={60} className=": "navigation.systemedeparticulesf",
  ">\n        La page que vous recherchez n": "common.lapagequevousrecherc",
  ">\n        La page que vous recherchez n'existe pas ou a été déplacée.\n      </p>\n      <div className=": "forms.lapagequevousrecherc",
  ">\n        {/* Éléments décoratifs de fond *": "common.elementsdecoratifsde1",
  ">\n        {/* Éléments décoratifs de fond */}\n        <div className=": "forms.elementsdecoratifsde1",
  ">\n      {/* Hero Section avec paysage chinois stylisé *": "forms.herosectionavecpaysa1",
  ">\n      {/* Hero Section avec paysage chinois stylisé */}\n      <div className=": "forms.herosectionavecpaysa2",
  ">\n      {/* Hero Section avec vidéo background et paysage chinois stylisé *": "navigation.herosectionavecvideo1",
  ">\n      {/* Hero Section avec vidéo background et paysage chinois stylisé */}\n      <div className=": "navigation.herosectionavecvideo2",
  ">\r\n                                                            Créée le {card.createdAt.toLocaleDateString()} • Modifiée le {card.updatedAt.toLocaleDateString()}\r\n                                                        <": "common.creeelecardcreatedat",
  ">\r\n                                                            Créée le {card.createdAt.toLocaleDateString()} • Modifiée le {card.updatedAt.toLocaleDateString()}\r\n                                                        </p>\r\n                                                    </div>\r\n\r\n                                                    {/* Actions */}\r\n                                                    <div className=": "forms.creeelecardcreatedat",
  ">\r\n                                                            Nouveau\r\n                                                        <": "common.nouveau",
  ">\r\n                                                            {card.data.companyName} • {card.data.contactPerson}\r\n                                                        <": "forms.carddatacompanynamec",
  ">\r\n                                                        <span>{card.downloads} téléchargements<": "common.spancarddownloadstel",
  ">\r\n                                                        <span>{card.downloads} téléchargements</span>\r\n                                                        <span>{card.shares} partages</span>\r\n                                                        <span>Template: {card.data.template}</span>\r\n                                                    </div>\r\n                                                    {!card.isDefault && (\r\n                                                        <button\r\n                                                            onClick={() => handleSetDefault(card.id)}\r\n                                                            className=": "forms.spancarddownloadstel",
  ">\r\n                                                        Répondre\r\n                                                    <": "common.repondre",
  ">\r\n                                                        Répondre\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Sidebar */}\r\n                    <div className=": "forms.repondrebuttondivdiv",
  ">\r\n                                                        {card.data.contactPerson} • {card.data.position}\r\n                                                    <": "common.carddatacontactperso",
  ">\r\n                                                    +{variant.price.toFixed(2)}€\r\n                                                </span>\r\n                                            )}\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n\r\n                        {/* Sélecteur de quantité *": "ecommerce.variantpricetofixed2",
  ">\r\n                                                    +{variant.price.toFixed(2)}€\r\n                                                </span>\r\n                                            )}\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n\r\n                        {/* Sélecteur de quantité */}\r\n                        <div className=": "forms.variantpricetofixed2",
  ">\r\n                                                    Excellent fournisseur ! Qualité des produits irréprochable et livraison très rapide. Je recommande vivement.\r\n                                                <": "ecommerce.excellentfournisseur1",
  ">\r\n                                                    Excellent fournisseur ! Qualité des produits irréprochable et livraison très rapide. Je recommande vivement.\r\n                                                </p>\r\n                                                <div className=": "forms.excellentfournisseur",
  ">\r\n                                                    {product.supplier.rating}\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Sélecteur de quantité *": "ecommerce.productsupplierratin2",
  ">\r\n                                                    {product.supplier.rating}\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Sélecteur de quantité */}\r\n                                    <div className=": "forms.productsupplierratin2",
  ">\r\n                                                <Shield size={12} />\r\n                                                Vérifié\r\n                                            <": "common.shieldsize12verifie",
  ">\r\n                                                <Shield size={12} />\r\n                                                Vérifié\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=": "forms.shieldsize12verified",
  ">\r\n                                                <span>Modifiée le {card.updatedAt.toLocaleDateString()}<": "common.spanmodifieelecardup",
  ">\r\n                                                <span>Modifiée le {card.updatedAt.toLocaleDateString()}</span>\r\n                                                <div className=": "forms.spanmodifieelecardup",
  ">\r\n                                                Commandes réalisées\r\n                                            <": "ecommerce.commandesrealisees1",
  ">\r\n                                                Commandes réalisées\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=": "forms.commandesrealiseesdi",
  ">\r\n                                                Livraison à temps\r\n                                            <": "common.livraisonatemps",
  ">\r\n                                                Livraison à temps\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {activeTab === 'products' && (\r\n                            <div className=": "forms.livraisonatempsdivdi",
  ">\r\n                                                MOQ: {product.moq}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Informations fournisseur *": "ecommerce.moqproductmoqdivdivd2",
  ">\r\n                                                Réduction de {product.discount!.percentage}% appliquée\r\n                                            <": "ecommerce.reductiondeproductdi2",
  ">\r\n                                                Réduction de {product.discount!.percentage}% appliquée\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    {/* Boutons d'action */}\r\n                                    <div className=": "forms.reductiondeproductdi2",
  ">\r\n                                                Temps de réponse\r\n                                            <": "common.tempsdereponse",
  ">\r\n                                                Temps de réponse\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=": "forms.tempsdereponsedivdiv",
  ">\r\n                                                Téléphone\r\n                                            <": "forms.telephone",
  ">\r\n                                                Téléphone\r\n                                            </div>\r\n                                            <div className=": "forms.telephonedivdivclass",
  ">\r\n                                                {supplier.contact.email}\r\n                                            <": "auth.suppliercontactemail",
  ">\r\n                                                {supplier.contact.phone}\r\n                                            <": "forms.suppliercontactphone",
  ">\r\n                                                {supplier.contact.website}\r\n                                            <": "ecommerce.suppliercontactwebsi",
  ">\r\n                                            -{product.discount!.percentage}%\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {/* Badge vérifié *": "ecommerce.productdiscountperce2",
  ">\r\n                                            -{product.discount!.percentage}%\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {/* Badge vérifié */}\r\n                                    {product.supplier.verified && (\r\n                                        <div className=": "forms.productdiscountperce2",
  ">\r\n                                            <Clock size={14} />\r\n                                            Répond en {product.supplier.responseTime}\r\n                                        <": "ecommerce.clocksize14repondenp",
  ">\r\n                                            <Clock size={14} />\r\n                                            Répond en {product.supplier.responseTime}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Variantes */}\r\n                        {Object.entries(variantsByType).map(([type, variants]) => (\r\n                            <div key={type} className=": "forms.clocksize14repondenp",
  ">\r\n                                            <MessageCircle size={16} />\r\n                                            Contacter\r\n                                        <": "common.messagecirclesize16c2",
  ">\r\n                                            <Shield size={12} />\r\n                                            Vérifié\r\n                                        <": "common.shieldsize12verifie3",
  ">\r\n                                            <Shield size={12} />\r\n                                            Vérifié\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                {/* Contenu de la carte */}\r\n                                <div className=": "forms.shieldsize12verified3",
  ">\r\n                                            <SupplierBusinessCard\r\n                                                supplierData={{\r\n                                                    name: supplier.name,\r\n                                                    logo: supplier.logo,\r\n                                                    contact: supplier.contact,\r\n                                                    location: supplier.location\r\n                                                }}\r\n                                                isOwner={isOwner}\r\n                                            ": "forms.supplierbusinesscard",
  ">\r\n                                            <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${backup.status === 'completed'\r\n                                                    ? 'bg-green-100 text-green-800'\r\n                                                    : backup.status === 'failed'\r\n                                                        ? 'bg-red-100 text-red-800'\r\n                                                        : 'bg-yellow-100 text-yellow-800'\r\n                                                }`}>\r\n                                                {backup.status === 'completed' ? 'Terminé' :\r\n                                                    backup.status === 'failed' ? 'Échec' : 'En cours'}\r\n                                            </span>\r\n                                        </td>\r\n                                        <td className=": "navigation.spanclassnameinlinef",
  ">\r\n                                            Ajouter au devis\r\n                                        <": "forms.ajouteraudevis3",
  ">\r\n                                            Caractéristiques\r\n                                        <": "common.caracteristiques",
  ">\r\n                                            Caractéristiques\r\n                                        </h4>\r\n                                        <div className=": "forms.caracteristiquesh4di",
  ">\r\n                                            Contacter\r\n                                        <": "common.contacter",
  ">\r\n                                            Nom de contact\r\n                                        <": "forms.nomdecontact",
  ">\r\n                                            Quantité\r\n                                        <": "common.quantite2",
  ">\r\n                                            Quantité\r\n                                        </label>\r\n                                        <div className=": "forms.quantitelabeldivclas2",
  ">\r\n                                            Rôle *\r\n                                        <": "common.role",
  ">\r\n                                            Rôle *\r\n                                        </label>\r\n                                        <select\r\n                                            value={newUser.role}\r\n                                            onChange={(e) => setNewUser({ ...newUser, role: e.target.value as any })}\r\n                                            className=": "forms.rolelabelselectvalue",
  ">\r\n                                            Téléphone\r\n                                        <": "forms.telephone2",
  ">\r\n                                            Téléphone\r\n                                        </label>\r\n                                        <input\r\n                                            type=": "forms.telephonelabelinputt1",
  ">\r\n                                        -{product.discount!.percentage}% dès {product.discount!.minQty} pcs\r\n                                    <": "ecommerce.productdiscountperce3",
  ">\r\n                                        -{product.discount!.percentage}% dès {product.discount!.minQty} pcs\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                            <p className=": "forms.productdiscountperce3",
  ">\r\n                                        <button\r\n                                            onClick={() => handleAddToQuote(product)}\r\n                                            className={`w-full py-3 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center gap-2 ${isProductInQuote\r\n                                                    ? 'bg-green-600 text-white hover:bg-green-700'\r\n                                                    : 'bg-blue-600 text-white hover:bg-blue-700'\r\n                                                }`}\r\n                                        >\r\n                                            <ShoppingCart size={18} />\r\n                                            {isProductInQuote ? 'Déjà dans le devis' : 'Ajouter au devis'}\r\n                                        </button>\r\n\r\n                                        <button className=": "forms.buttononclickhandlea1",
  ">\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                toggleFavorite(product.id!);\r\n                                                const isFav = isFavorite(product.id!);\r\n                                                showToast(\r\n                                                    isFav ? `${product.name} retiré des favoris` : `${product.name} ajouté aux favoris`,\r\n                                                    ": "forms.buttononclicktogglef1",
  ">\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                toggleFavorite(product.id!);\r\n                                                const isFav = isFavorite(product.id!);\r\n                                                showToast(\r\n                                                    isFav ? `${product.name} retiré des favoris` : `${product.name} ajouté aux favoris`,\r\n                                                    'success',\r\n                                                    'heart'\r\n                                                );\r\n                                            }}\r\n                                            className={`p-2 rounded-full transition-all duration-300 ${isFavorite(product.id!)\r\n                                                ? 'bg-red-500 text-white'\r\n                                                : 'bg-white text-gray-600 hover:bg-red-50 hover:text-red-500'\r\n                                                }`}\r\n                                        >\r\n                                            <Heart size={18} fill={isFavorite(product.id!) ? 'currentColor' : 'none'} />\r\n                                        </button>\r\n\r\n                                        <button\r\n                                            onClick={() => openQuickView(product)}\r\n                                            className=": "forms.buttononclicktogglef2",
  ">\r\n                                        Catégorie\r\n                                    <": "common.categorie2",
  ">\r\n                                        Catégorie\r\n                                    </label>\r\n                                    <select\r\n                                        value={filters.category}\r\n                                        onChange={(e) => updateFilters({ category: e.target.value })}\r\n                                        className=": "forms.categorielabelselect2",
  ">\r\n                                        Dernière mise à jour\r\n                                    <": "common.dernieremiseajour",
  ">\r\n                                        Dernière mise à jour\r\n                                    </th>\r\n                                    <th className=": "forms.dernieremiseajourtht",
  ">\r\n                                        MOQ (Quantité minimum)\r\n                                    <": "common.moqquantiteminimum2",
  ">\r\n                                        MOQ (Quantité minimum)\r\n                                    </label>\r\n                                    <div className=": "forms.moqquantiteminimumla2",
  ">\r\n                                        Produits ({supplier.products.total})\r\n                                    <": "ecommerce.produitssupplierprod",
  ">\r\n                                        Spécialités\r\n                                    <": "common.specialites",
  ">\r\n                                        Spécialités\r\n                                    </h2>\r\n                                    <div className=": "forms.specialitesh2divclas",
  ">\r\n                                        {isOwner\r\n                                            ? 'Créez et personnalisez vos cartes de visite professionnelles. Partagez-les facilement avec vos clients et partenaires.'\r\n                                            : 'Découvrez les cartes de visite de ce fournisseur et téléchargez-les pour vos contacts.'\r\n                                        }\r\n                                    </p>\r\n                                </div>\r\n\r\n                                {/* Affichage conditionnel selon les permissions */}\r\n                                {canManageCards ? (\r\n                                    <BusinessCardGallery supplierId={supplierId} />\r\n                                ) : (\r\n                                    <div className=": "forms.isownercreezetperson",
  ">\r\n                                        À propos de l": "common.aproposdel1",
  ">\r\n                                        À propos de l'entreprise\r\n                                    </h2>\r\n                                    <p className=": "forms.aproposdelentreprise",
  ">\r\n                                        ✨ Nouveau\r\n                                    <": "common.nouveau1",
  ">\r\n                                    (Données en cache)\r\n                                <": "common.donneesencache",
  ">\r\n                                    (Données en cache)\r\n                                </span>\r\n                            )}\r\n                        </h1>\r\n                        <p className=": "forms.donneesencachespanh1",
  ">\r\n                                    <Instagram size={16} />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Modal de contact */}\r\n            {showContactModal && selectedInfluencer && (\r\n                <div className=": "forms.instagramsize16butto",
  ">\r\n                                    <option>Post Instagram</option>\r\n                                    <option>Story Instagram</option>\r\n                                    <option>Campagne complète<": "common.optionpostinstagramo",
  ">\r\n                                    <option>Post Instagram</option>\r\n                                    <option>Story Instagram</option>\r\n                                    <option>Campagne complète</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <label className=": "forms.optionpostinstagramo",
  ">\r\n                                    <strong>🔗 Prochaines étapes :<": "common.strongprochainesetap",
  ">\r\n                                    <strong>🔗 Prochaines étapes :</strong>\r\n                                    <br />\r\n                                    1. Connectez-vous sur <code className=": "forms.strongprochainesetap",
  ">\r\n                                    Budget proposé\r\n                                <": "common.budgetpropose",
  ">\r\n                                    Budget proposé\r\n                                </label>\r\n                                <input\r\n                                    type=": "common.budgetproposelabelin",
  ">\r\n                                    Caractéristiques principales\r\n                                <": "common.caracteristiquesprin",
  ">\r\n                                    Caractéristiques principales\r\n                                </h3>\r\n                                <div className=": "forms.caracteristiquesprin",
  ">\r\n                                    Contacter\r\n                                <": "common.contacter1",
  ">\r\n                                    Informations de contact\r\n                                <": "common.informationsdecontac",
  ">\r\n                                    Informations entreprise\r\n                                <": "common.informationsentrepri",
  ">\r\n                                    Période\r\n                                <": "common.periode",
  ">\r\n                                    Période\r\n                                </h4>\r\n                                <div className=": "forms.periodeh4divclassnam",
  ">\r\n                                    Quantité souhaitée\r\n                                <": "common.quantitesouhaitee",
  ">\r\n                                    Quantité souhaitée\r\n                                </label>\r\n                                <input\r\n                                    type=": "common.quantitesouhaiteelab",
  ">\r\n                                    Réduction de {product.discount!.percentage}% appliquée\r\n                                <": "ecommerce.reductiondeproductdi3",
  ">\r\n                                    Réduction de {product.discount!.percentage}% appliquée\r\n                                </div>\r\n                            )}\r\n                            <div className=": "forms.reductiondeproductdi3",
  ">\r\n                                    {notifications}\r\n                                <": "common.notifications",
  ">\r\n                                    {type === 'color' ? 'Couleur' : type === 'size' ? 'Taille' : 'Matériau'}\r\n                                </h3>\r\n                                <div className=": "forms.typecolorcouleurtype",
  ">\r\n                                <Eye size={16} />\r\n                                Voir détails\r\n                            <": "common.eyesize16voirdetails",
  ">\r\n                                <Eye size={16} />\r\n                                Voir détails\r\n                            </button>\r\n                            {collab.status === 'pending' && (\r\n                                <>\r\n                                    <button className=": "forms.eyesize16voirdetails",
  ">\r\n                                <Share2 size={16} />\r\n                                Partager\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Liste des filleuls récents *": "common.share2size16partager1",
  ">\r\n                                <Share2 size={16} />\r\n                                Partager\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Liste des filleuls récents */}\r\n            <div className=": "forms.share2size16partager",
  ">\r\n                                <button\r\n                                    onClick={() => handleContact(influencer)}\r\n                                    className=": "forms.buttononclickhandlec",
  ">\r\n                                <button\r\n                                    onClick={() => setShowContactForm(true)}\r\n                                    className=": "forms.buttononclicksetshow",
  ">\r\n                                Aperçu rapide\r\n                            <": "common.apercurapide",
  ">\r\n                                Aperçu rapide\r\n                            </h2>\r\n                            <button\r\n                                onClick={closeQuickView}\r\n                                className=": "forms.apercurapideh2button",
  ">\r\n                                Carte de visite en temps réel\r\n                            <": "ecommerce.cartedevisiteentemps",
  ">\r\n                                Carte de visite en temps réel\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div className=": "forms.cartedevisiteentemps",
  ">\r\n                                Catégorie\r\n                            <": "common.categorie3",
  ">\r\n                                Catégorie\r\n                            </label>\r\n                            <select\r\n                                value={filters.category}\r\n                                onChange={(e) => setFilters({ ...filters, category: e.target.value })}\r\n                                className=": "forms.categorielabelselect3",
  ">\r\n                                ChineTonUsine\r\n                            <": "common.chinetonusine2",
  ">\r\n                                Comptes créés ({createdAccounts.length})\r\n                            <": "common.comptescreescreateda",
  ">\r\n                                Comptes créés ({createdAccounts.length})\r\n                            </h3>\r\n                            <div className=": "forms.comptescreescreateda",
  ">\r\n                                Comptes vérifiés uniquement\r\n                            </span>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Résultats *": "common.comptesverifiesuniqu",
  ">\r\n                                Comptes vérifiés uniquement\r\n                            </span>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Résultats */}\r\n            <div className=": "forms.comptesverifiesuniqu",
  ">\r\n                                Contacter le fournisseur\r\n                            </h3>\r\n                            <button\r\n                                onClick={() => setShowContactForm(false)}\r\n                                className=": "forms.contacterlefournisse1",
  ">\r\n                                Créez et gérez vos cartes de visite personnalisées\r\n                            <": "ecommerce.creezetgerezvoscarte",
  ">\r\n                                Créez et gérez vos cartes de visite personnalisées\r\n                            </p>\r\n                        </div>\r\n                        <button\r\n                            onClick={handleCreateNew}\r\n                            className=": "forms.creezetgerezvoscarte",
  ">\r\n                                Interface sécurisée pour la gestion des comptes utilisateurs\r\n                            <": "admin.interfacesecuriseepo1",
  ">\r\n                                Interface sécurisée pour la gestion des comptes utilisateurs\r\n                            </p>\r\n                        </div>\r\n                        <div className=": "forms.interfacesecuriseepo",
  ">\r\n                                Produits B2B\r\n                            <": "ecommerce.produitsb2b1",
  ">\r\n                                Produits d": "ecommerce.produitsd",
  ">\r\n                                Produits d'intérêt\r\n                            </label>\r\n                            <div className=": "forms.produitsdinteretlabe",
  ">\r\n                                Prévisualisation\r\n                            <": "common.previsualisation1",
  ">\r\n                                Prévisualisation\r\n                            </h3>\r\n                            <p className=": "forms.previsualisationh3pc",
  ">\r\n                                Quantité (MOQ: {product.moq})\r\n                            <": "ecommerce.quantitemoqproductmo",
  ">\r\n                                Quantité (MOQ: {product.moq})\r\n                            </h3>\r\n                            <div className=": "forms.quantitemoqproductmo",
  ">\r\n                                Votre connexion est protégée par un chiffrement SSL et des règles de sécurité strictes.\r\n                            <": "auth.votreconnexionestpro1",
  ">\r\n                                Votre connexion est protégée par un chiffrement SSL et des règles de sécurité strictes.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Lien retour */}\r\n                <div className=": "auth.votreconnexionestpro2",
  ">\r\n                                {(totalPrice / quantity).toFixed(2)}€ par unité\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Délai de livraison *": "ecommerce.totalpricequantityto",
  ">\r\n                                {(totalPrice / quantity).toFixed(2)}€ par unité\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Délai de livraison */}\r\n                        <div className=": "forms.totalpricequantityto",
  ">\r\n                                {/* Catégorie *": "common.categorie6",
  ">\r\n                                {/* Catégorie */}\r\n                                <div>\r\n                                    <label className=": "forms.categoriedivlabelcla2",
  ">\r\n                                {alerts.length === 0 ? 'Aucune alerte pour le moment.' : 'Aucune alerte ne correspond aux filtres appliqués.'}\r\n                            </p>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=": "forms.alertslength0aucunea",
  ">\r\n                                {filteredProducts.length} produits disponibles\r\n                            <": "ecommerce.filteredproductsleng2",
  ">\r\n                                {item.product.name} - {item.quantity} unités\r\n                            <": "forms.itemproductnameitemq",
  ">\r\n                                {item.product.name} - {item.quantity} unités\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* LocalStorage info */}\r\n            <div className=": "forms.itemproductnameitemq1",
  ">\r\n                                {paragraph.trim()}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Spécifications *": "common.paragraphtrimpdivdiv",
  ">\r\n                                {paragraph.trim()}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Spécifications */}\r\n                <div className=": "forms.paragraphtrimpdivdiv",
  ">\r\n                                {product.description}\r\n                            </p>\r\n                        )}\r\n\r\n                        {/* Caractéristiques *": "ecommerce.productdescriptionpc",
  ">\r\n                                {product.description}\r\n                            </p>\r\n                        )}\r\n\r\n                        {/* Caractéristiques */}\r\n                        {product.features && (\r\n                            <div>\r\n                                <h3 className=": "forms.productdescriptionpc",
  ">\r\n                                {searchQuery\r\n                                    ? 'Essayez de modifier votre recherche'\r\n                                    : 'Créez votre première carte de visite personnalisée'\r\n                                }\r\n                            </p>\r\n                            {!searchQuery && (\r\n                                <button\r\n                                    onClick={handleCreateNew}\r\n                                    className=": "forms.searchqueryessayezde",
  ">\r\n                                {searchQuery ? 'Aucune carte trouvée' : 'Aucune carte de visite'}\r\n                            </h3>\r\n                            <p className=": "forms.searchqueryaucunecar",
  ">\r\n                                🎉 Système configuré avec succès !\r\n                                <span className=": "forms.systemeconfigureavec1",
  ">\r\n                                💡 Rechargez la page et réessayez, ou utilisez la console du navigateur.\r\n                            <": "common.rechargezlapageetree",
  ">\r\n                              <Clock size={12} />\r\n                              Livraison prévue: {formatDate(shipment.estimatedDelivery)}\r\n                            <": "common.clocksize12livraison",
  ">\r\n                              <Clock size={12} />\r\n                              Livraison prévue: {formatDate(shipment.estimatedDelivery)}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </td>\r\n                      <td className=": "forms.clocksize12livraison",
  ">\r\n                              <Truck size={12} />\r\n                              Expédiée: {formatDate(shipment.shippedAt)}\r\n                            <": "common.trucksize12expedieef",
  ">\r\n                              <Truck size={12} />\r\n                              Expédiée: {formatDate(shipment.shippedAt)}\r\n                            </div>\r\n                          )}\r\n                          {shipment.estimatedDelivery && (\r\n                            <div className=": "forms.trucksize12expedieef",
  ">\r\n                            <Bell size={20} />\r\n                            {notifications > 0 && (\r\n                                <span className=": "forms.bellsize20notificati",
  ">\r\n                            <Calendar size={12} />\r\n                            Créée: {formatDate(shipment.createdAt)}\r\n                          <": "common.calendarsize12creeef",
  ">\r\n                            <Calendar size={12} />\r\n                            Créée: {formatDate(shipment.createdAt)}\r\n                          </div>\r\n                          {shipment.shippedAt && (\r\n                            <div className=": "forms.calendarsize12creeef",
  ">\r\n                            <Download size={12} />\r\n                            {doc.downloads} téléchargements\r\n                          <": "common.downloadsize12docdow",
  ">\r\n                            <Download size={12} />\r\n                            {doc.downloads} téléchargements\r\n                          </span>\r\n                          <span className=": "forms.downloadsize12docdow",
  ">\r\n                            <ShoppingBag size={12} />\r\n                            Dernière commande: {formatDate(customer.lastOrderDate)}\r\n                          <": "ecommerce.shoppingbagsize12der",
  ">\r\n                            <ShoppingBag size={12} />\r\n                            Dernière commande: {formatDate(customer.lastOrderDate)}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div className=": "forms.shoppingbagsize12der",
  ">\r\n                            <Truck size={20} />\r\n                            <span>\r\n                                Livraison estimée: {product.deliveryTime.min}-{product.deliveryTime.max} {product.deliveryTime.unit === ": "ecommerce.trucksize20spanlivra",
  ">\r\n                            <Truck size={20} />\r\n                            <span>\r\n                                Livraison estimée: {product.deliveryTime.min}-{product.deliveryTime.max} {product.deliveryTime.unit === 'days' ? 'jours' : 'semaines'}\r\n                            </span>\r\n                        </div>\r\n\r\n                        {/* Boutons d'action */}\r\n                        <div className=": "forms.trucksize20spanlivra",
  ">\r\n                            <button\r\n                                onClick={handleAddToQuote}\r\n                                className={`w-full py-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg flex items-center justify-center gap-2 ${isProductInQuote\r\n                                        ? 'bg-green-600 text-white hover:bg-green-700'\r\n                                        : 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700'\r\n                                    }`}\r\n                            >\r\n                                <ShoppingCart size={20} />\r\n                                {isProductInQuote ? 'Déjà dans le devis' : 'Ajouter au devis'}\r\n                            </button>\r\n\r\n                            <div className=": "forms.buttononclickhandlea2",
  ">\r\n                            Aucun produit trouvé\r\n                        <": "ecommerce.aucunproduittrouve1",
  ">\r\n                            Aucun produit trouvé\r\n                        </h3>\r\n                        <p className=": "forms.aucunproduittrouveh31",
  ">\r\n                            Contacter {selectedInfluencer.name}\r\n                        <": "forms.contacterselectedinf",
  ">\r\n                            Créer les comptes administrateurs essentiels pour la production (admin principal, backup, support).\r\n                        <": "navigation.creerlescomptesadmin1",
  ">\r\n                            Créer les comptes administrateurs essentiels pour la production (admin principal, backup, support).\r\n                        </p>\r\n                        <button\r\n                            onClick={handleCreateEssentialUsers}\r\n                            disabled={isCreating}\r\n                            className=": "navigation.creerlescomptesadmin2",
  ">\r\n                            Essayez de modifier vos filtres ou de rechercher autre chose\r\n                        <": "forms.essayezdemodifiervos1",
  ">\r\n                            Filtres de recherche\r\n                        <": "common.filtresderecherche",
  ">\r\n                            Implémentez votre propre version de cette page selon vos besoins spécifiques.\r\n                        <": "common.implementezvotreprop1",
  ">\r\n                            La réinitialisation complète supprimera définitivement tous les utilisateurs existants\r\n                            et créera de nouveaux comptes avec des mots de passe par défaut.\r\n                        <": "forms.lareinitialisationco",
  ">\r\n                            La réinitialisation complète supprimera définitivement tous les utilisateurs existants\r\n                            et créera de nouveaux comptes avec des mots de passe par défaut.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Zone de résultats *": "forms.lareinitialisationco1",
  ">\r\n                            La réinitialisation complète supprimera définitivement tous les utilisateurs existants\r\n                            et créera de nouveaux comptes avec des mots de passe par défaut.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Zone de résultats */}\r\n            {results && (\r\n                <div className=": "forms.lareinitialisationco2",
  ">\r\n                            Les avantages qui font la différence\r\n                        <": "common.lesavantagesquifontl",
  ">\r\n                            Les avantages qui font la différence\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=": "forms.lesavantagesquifontl",
  ">\r\n                            Marquer lu\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Section>\r\n\r\n              {/* Activité récente améliorée *": "common.marquerlubuttondivdi1",
  ">\r\n                            Marquer lu\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Section>\r\n\r\n              {/* Activité récente améliorée */}\r\n              <Section icon={<Clock className=": "forms.marquerlubuttondivdi",
  ">\r\n                            Modifier le prospect : {prospect.name}\r\n                        <": "forms.modifierleprospectpr",
  ">\r\n                            Nouveau\r\n                          <": "common.nouveau2",
  ">\r\n                            Répondre\r\n                          <": "common.repondre1",
  ">\r\n                            Répondre\r\n                          </button>\r\n                          <button className=": "forms.repondrebuttonbutton",
  ">\r\n                            Rôle\r\n                        <": "common.role1",
  ">\r\n                            Rôle\r\n                        </label>\r\n                        <div className=": "forms.rolelabeldivclassnam",
  ">\r\n                            Spécifications techniques\r\n                        <": "common.specificationstechni",
  ">\r\n                            Spécifications techniques\r\n                        </h2>\r\n                        <div className=": "forms.specificationstechni",
  ">\r\n                            Vérifié\r\n                          <": "common.verifie",
  ">\r\n                            Vérifié\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      <div className=": "forms.verifiespandivdivcla",
  ">\r\n                            {/* Carte de visite du fournisseur */}\r\n                            <SupplierBusinessCard\r\n                                supplierData={{\r\n                                    name: supplier.name,\r\n                                    logo: supplier.logo,\r\n                                    contact: supplier.contact,\r\n                                    location: supplier.location\r\n                                }}\r\n                                isOwner={isOwner}\r\n                                onManageCards={() => setActiveTab(": "forms.cartedevisitedufourn",
  ">\r\n                            {/* Sélecteur de quantité *": "common.selecteurdequantite",
  ">\r\n                            {/* Sélecteur de quantité */}\r\n                            <div className=": "forms.selecteurdequantited",
  ">\r\n                            État des Tables\r\n                        <": "common.etatdestables",
  ">\r\n                            État des Tables\r\n                        </h2>\r\n                    </div>\r\n\r\n                    <div className=": "forms.etatdestablesh2divdi",
  ">\r\n                            ⚠️ <strong>DANGER:</strong> Supprime TOUS les utilisateurs existants. Opération irréversible.\r\n                        <": "admin.strongdangerstrongsu1",
  ">\r\n                            ⚠️ <strong>DANGER:</strong> Supprime TOUS les utilisateurs existants. Opération irréversible.\r\n                        </p>\r\n                        <button\r\n                            onClick={handlePurgeUsers}\r\n                            disabled={isPurging}\r\n                            className=": "forms.strongdangerstrongsu",
  ">\r\n                          Activée le 15 juin 2024\r\n                        <": "common.activeele15juin2024",
  ">\r\n                          Activée le 15 juin 2024\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=": "forms.activeele15juin2024p",
  ">\r\n                          Votre compte est protégé par l": "common.votrecompteestproteg",
  ">\r\n                          Votre compte est protégé par l'authentification à deux facteurs\r\n                        </p>\r\n                        <p className=": "forms.votrecompteestproteg",
  ">\r\n                        <FilterComponent />\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Liste virtualisée avec recherche intégrée *": "common.filtercomponentdivdi1",
  ">\r\n                        <FilterComponent />\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Liste virtualisée avec recherche intégrée */}\r\n            <div className=": "forms.filtercomponentdivdi",
  ">\r\n                        <Heart size={16} />\r\n                        Favoris ({favorites.size})\r\n                    <": "common.heartsize16favorisfa",
  ">\r\n                        <button\r\n                          onClick={() => showNotification('info', `Notification ${notif.title} ${notif.enabled ? 'désactivée' : 'activée'}`)}\r\n                          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${notif.enabled ? 'bg-blue-600' : 'bg-gray-200 dark:bg-gray-700'\r\n                            }`}\r\n                        >\r\n                          <span\r\n                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${notif.enabled ? 'translate-x-6' : 'translate-x-1'\r\n                              }`}\r\n                          />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Section>\r\n            </div>\r\n          )}\r\n\r\n          {tab === 'security' && (\r\n            <div className=": "forms.buttononclickshownot",
  ">\r\n                        <div className={`h-full bg-gradient-to-r ${stat.color} rounded-full animate-shimmer`} style={{ width: `${Math.min(stat.value * 10, 100)}%` }}></div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Favoris avec animations améliorées *": "forms.divclassnamehfullbgg1",
  ">\r\n                        <div className={`h-full bg-gradient-to-r ${stat.color} rounded-full animate-shimmer`} style={{ width: `${Math.min(stat.value * 10, 100)}%` }}></div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Favoris avec animations améliorées */}\r\n              <Section icon={<Heart className=": "forms.divclassnamehfullbgg2",
  ">\r\n                        Accédez à votre espace Chine Ton Usine\r\n                    <": "common.accedezavotreespacec1",
  ">\r\n                        Accédez à votre espace Chine Ton Usine\r\n                    </p>\r\n                    <div className=": "forms.accedezavotreespacec",
  ">\r\n                        Aucun influenceur trouvé\r\n                    <": "common.aucuninfluenceurtrou",
  ">\r\n                        Aucun influenceur trouvé\r\n                    </h3>\r\n                    <p className=": "forms.aucuninfluenceurtrou",
  ">\r\n                        Caractéristiques\r\n                    <": "common.caracteristiques1",
  ">\r\n                        Caractéristiques\r\n                    </h2>\r\n                    <div className=": "forms.caracteristiquesh2di",
  ">\r\n                        Catégories Populaires\r\n                    <": "common.categoriespopulaires",
  ">\r\n                        Catégories Populaires\r\n                    </h2>\r\n                    <p className=": "forms.categoriespopulaires",
  ">\r\n                        Ce mois\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Graphiques simplifiés *": "common.cemoisdivdivdivgraph",
  ">\r\n                        Ce mois\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Graphiques simplifiés */}\r\n            <div className=": "forms.cemoisdivdivdivgraph",
  ">\r\n                        Cette page est en cours de développement pour vous offrir des fonctionnalités de recherche avancées.\r\n                    <": "common.cettepageestencoursd1",
  ">\r\n                        Cette page est en cours de développement pour vous offrir des fonctionnalités de recherche avancées.\r\n                    </p>\r\n\r\n                    <div className=": "forms.cettepageestencoursd",
  ">\r\n                        Cette page est en cours de développement pour vous offrir une expérience personnalisée.\r\n                    <": "common.cettepageestencoursd2",
  ">\r\n                        Cette page est en cours de développement pour vous offrir une expérience personnalisée.\r\n                    </p>\r\n\r\n                    <div className=": "forms.cettepageestencoursd1",
  ">\r\n                        Connexion Sécurisée\r\n                    <": "auth.connexionsecurisee1",
  ">\r\n                        Connexion Sécurisée\r\n                    </h2>\r\n                    <p className=": "auth.connexionsecuriseeh2",
  ">\r\n                        Créer un nouvel utilisateur\r\n                    <": "admin.creerunnouvelutilisa4",
  ">\r\n                        Créer un nouvel utilisateur\r\n                    </h2>\r\n                    <button\r\n                        onClick={onClose}\r\n                        className=": "forms.creerunnouvelutilisa",
  ">\r\n                        Description détaillée\r\n                    <": "common.descriptiondetaillee",
  ">\r\n                        Description détaillée\r\n                    </h2>\r\n                    <div className=": "forms.descriptiondetaillee",
  ">\r\n                        Découvrez nos catégories les plus demandées\r\n                    <": "common.decouvreznoscategori",
  ">\r\n                        Découvrez nos catégories les plus demandées\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=": "forms.decouvreznoscategori",
  ">\r\n                        Essayez de modifier vos critères de recherche\r\n                    <": "forms.essayezdemodifiervos3",
  ">\r\n                        Essayez de modifier vos critères de recherche\r\n                    </p>\r\n                    <button\r\n                        onClick={() => {\r\n                            setSearchTerm('');\r\n                            clearFilters();\r\n                        }}\r\n                        className=": "forms.essayezdemodifiervos4",
  ">\r\n                        Gestion de la Base de Données\r\n                    <": "common.gestiondelabasededon",
  ">\r\n                        Gestion de la Base de Données\r\n                    </h1>\r\n                    <p className=": "forms.gestiondelabasededon",
  ">\r\n                        Nouvelle Page Produits\r\n                    <": "ecommerce.nouvellepageproduits",
  ">\r\n                        Nouvelle Page Recherche\r\n                    <": "common.nouvellepagerecherch",
  ">\r\n                        Performances récentes\r\n                    <": "common.performancesrecentes1",
  ">\r\n                        Performances récentes\r\n                    </h3>\r\n                    <div className=": "forms.performancesrecentes",
  ">\r\n                        Produits similaires\r\n                    <": "ecommerce.produitssimilaires",
  ">\r\n                        Prêt à Commencer ?\r\n                    <": "common.pretacommencer",
  ">\r\n                        Prêt à Commencer ?\r\n                    </h2>\r\n                    <p className=": "forms.pretacommencerh2pcla",
  ">\r\n                        Retour aux produits\r\n                    <": "navigation.retourauxproduits1",
  ">\r\n                        Retour aux produits\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Calcul du prix total avec variantes et réductions\r\n    const selectedImage = product.images[selectedImageIndex];\r\n    const variantPriceAddition = Object.values(selectedVariants).reduce((total, variantId) => {\r\n        const variant = product.variants?.find(v => v.id === variantId);\r\n        return total + (variant?.price || 0);\r\n    }, 0);\r\n\r\n    const unitPrice = product.price + variantPriceAddition;\r\n    const hasDiscount = product.discount && quantity >= product.discount.minQty;\r\n    const discountedPrice = hasDiscount\r\n        ? unitPrice * (1 - product.discount!.percentage / 100)\r\n        : unitPrice;\r\n    const totalPrice = discountedPrice * quantity;\r\n\r\n    // Gestion des variantes\r\n    const handleVariantChange = (type: string, variantId: string) => {\r\n        setSelectedVariants(prev => ({\r\n            ...prev,\r\n            [type]: variantId\r\n        }));\r\n    };\r\n\r\n    // Gestion de la quantité\r\n    const updateQuantity = (newQuantity: number) => {\r\n        if (newQuantity >= product.moq) {\r\n            setQuantity(newQuantity);\r\n        }\r\n    };\r\n\r\n    ": "navigation.retourauxproduitslin",
  ">\r\n                        Retour aux produits\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Calcul du prix total avec variantes et réductions\r\n    const selectedImage = product.images[selectedImageIndex];\r\n    const variantPriceAddition = Object.values(selectedVariants).reduce((total, variantId) => {\r\n        const variant = product.variants?.find(v => v.id === variantId);\r\n        return total + (variant?.price || 0);\r\n    }, 0);\r\n\r\n    const unitPrice = product.price + variantPriceAddition;\r\n    const hasDiscount = product.discount && quantity >= product.discount.minQty;\r\n    const discountedPrice = hasDiscount\r\n        ? unitPrice * (1 - product.discount!.percentage / 100)\r\n        : unitPrice;\r\n    const totalPrice = discountedPrice * quantity;\r\n\r\n    // Gestion des variantes\r\n    const handleVariantChange = (type: string, variantId: string) => {\r\n        setSelectedVariants(prev => ({\r\n            ...prev,\r\n            [type]: variantId\r\n        }));\r\n    };\r\n\r\n    // Gestion de la quantité\r\n    const updateQuantity = (newQuantity: number) => {\r\n        if (newQuantity >= product.moq) {\r\n            setQuantity(newQuantity);\r\n        }\r\n    };\r\n\r\n    // Grouper les variantes par type\r\n    const variantsByType = product.variants?.reduce((acc, variant) => {\r\n        if (!acc[variant.type]) {\r\n            acc[variant.type] = [];\r\n        }\r\n        acc[variant.type].push(variant);\r\n        return acc;\r\n    }, {} as Record<string, ProductVariant[]>) || {};\r\n\r\n    // Fonction pour ajouter au devis avec variantes\r\n    const handleAddToQuote = () => {\r\n        const productForQuote: ProductListItem = {\r\n            id: product.id!,\r\n            name: product.name,\r\n            description: product.description,\r\n            price: unitPrice, ": "navigation.retourauxproduitslin1",
  ">\r\n                        Retour aux produits\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Calcul du prix total avec variantes et réductions\r\n    const selectedImage = product.images[selectedImageIndex];\r\n    const variantPriceAddition = Object.values(selectedVariants).reduce((total, variantId) => {\r\n        const variant = product.variants?.find(v => v.id === variantId);\r\n        return total + (variant?.price || 0);\r\n    }, 0);\r\n\r\n    const unitPrice = product.price + variantPriceAddition;\r\n    const hasDiscount = product.discount && quantity >= product.discount.minQty;\r\n    const discountedPrice = hasDiscount\r\n        ? unitPrice * (1 - product.discount!.percentage / 100)\r\n        : unitPrice;\r\n    const totalPrice = discountedPrice * quantity;\r\n\r\n    // Gestion des variantes\r\n    const handleVariantChange = (type: string, variantId: string) => {\r\n        setSelectedVariants(prev => ({\r\n            ...prev,\r\n            [type]: variantId\r\n        }));\r\n    };\r\n\r\n    // Gestion de la quantité\r\n    const updateQuantity = (newQuantity: number) => {\r\n        if (newQuantity >= product.moq) {\r\n            setQuantity(newQuantity);\r\n        }\r\n    };\r\n\r\n    // Grouper les variantes par type\r\n    const variantsByType = product.variants?.reduce((acc, variant) => {\r\n        if (!acc[variant.type]) {\r\n            acc[variant.type] = [];\r\n        }\r\n        acc[variant.type].push(variant);\r\n        return acc;\r\n    }, {} as Record<string, ProductVariant[]>) || {};\r\n\r\n    // Fonction pour ajouter au devis avec variantes\r\n    const handleAddToQuote = () => {\r\n        const productForQuote: ProductListItem = {\r\n            id: product.id!,\r\n            name: product.name,\r\n            description: product.description,\r\n            price: unitPrice, // Prix unitaire avec variantes\r\n            image: product.images[0].url, // URL de l'image principale\r\n            moq: product.moq,\r\n            category: product.category,\r\n            supplier: {\r\n                name: product.supplier.name,\r\n                location: product.supplier.location,\r\n                rating: product.supplier.rating,\r\n                verified: product.supplier.verified\r\n            },\r\n            variants: product.variants?.map(v => v.name) || [],\r\n            stock: product.stock || 0,\r\n            tags: product.tags || [],\r\n            discount: product.discount\r\n        };\r\n\r\n        addToQuote(productForQuote, quantity, selectedVariants);\r\n\r\n        // Notification de succès\r\n        showToast(`${product.name} ajouté au devis (${quantity} unités)`, 'success', 'cart');\r\n    };\r\n\r\n    // Vérifier si le produit est déjà dans le devis\r\n    const isProductInQuote = getItemQuantity(product.id!) > 0;\r\n\r\n    return (\r\n        <div className=": "navigation.retourauxproduitslin2",
  ">\r\n                        Réponse du fournisseur\r\n                      <": "ecommerce.reponsedufournisseur",
  ">\r\n                        Réponse du fournisseur\r\n                      </span>\r\n                      <span className=": "forms.reponsedufournisseur",
  ">\r\n                        Spécifications techniques\r\n                    <": "common.specificationstechni1",
  ">\r\n                        Spécifications techniques\r\n                    </h2>\r\n                    <div className=": "forms.specificationstechni1",
  ">\r\n                        Suppression définitive de toutes les données\r\n                      <": "common.suppressiondefinitiv",
  ">\r\n                        Suppression définitive de toutes les données\r\n                      </p>\r\n                      <button\r\n                        onClick={() => showNotification('error', 'Action sensible ! Contactez le support pour cette demande.')}\r\n                        className=": "forms.suppressiondefinitiv",
  ">\r\n                        Surveillez et gérez toutes les alertes système en temps réel\r\n                    <": "common.surveillezetgereztou",
  ">\r\n                        Surveillez et gérez toutes les alertes système en temps réel\r\n                    </p>\r\n                </div>\r\n\r\n                {/* Statistiques rapides */}\r\n                <div className=": "forms.surveillezetgereztou",
  ">\r\n                        Surveillez et gérez votre base de données, créez des sauvegardes et analysez les performances\r\n                    </p>\r\n                </div>\r\n\r\n                {/* Statistiques générales *": "common.surveillezetgerezvot",
  ">\r\n                        Surveillez et gérez votre base de données, créez des sauvegardes et analysez les performances\r\n                    </p>\r\n                </div>\r\n\r\n                {/* Statistiques générales */}\r\n                <div className=": "forms.surveillezetgerezvot",
  ">\r\n                        Système Ultime d": "common.systemeultimed",
  ">\r\n                        Système Ultime d'Utilisateurs\r\n                    </h2>\r\n                    <p className=": "forms.systemeultimedutilis",
  ">\r\n                        Téléchargez toutes vos données personnelles\r\n                      <": "common.telechargeztoutesvos",
  ">\r\n                        Téléchargez toutes vos données personnelles\r\n                      </p>\r\n                      <button\r\n                        onClick={() => showNotification('info', 'Export des données en cours... Vous recevrez un email.')}\r\n                        className=": "auth.telechargeztoutesvos",
  ">\r\n                        Voir quelles données nous stockons\r\n                      <": "common.voirquellesdonneesno",
  ">\r\n                        Voir quelles données nous stockons\r\n                      </p>\r\n                      <button\r\n                        onClick={() => showNotification('info', 'Ouverture de la page des données collectées')}\r\n                        className=": "forms.voirquellesdonneesno",
  ">\r\n                        Votre compte est bien sécurisé. Activez les alertes email pour améliorer davantage.\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Alertes de sécurité *": "auth.votrecompteestbiense1",
  ">\r\n                        Votre compte est bien sécurisé. Activez les alertes email pour améliorer davantage.\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Alertes de sécurité */}\r\n                  <div className=": "auth.votrecompteestbiense2",
  ">\r\n                        {/* En-tête produit *": "ecommerce.enteteproduit1",
  ">\r\n                        {/* En-tête produit */}\r\n                        <div>\r\n                            <h1 className=": "forms.enteteproduitdivh1cl",
  ">\r\n                        {/* En-tête produit */}\r\n                        <div>\r\n                            {/* Badges */}\r\n                            <div className=": "forms.enteteproduitdivbadg",
  ">\r\n                        {filterComponent}\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Indicateur de résultats *": "common.filtercomponentdivdi2",
  ">\r\n                        {filterComponent}\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {/* Indicateur de résultats */}\r\n            <div className=": "forms.filtercomponentdivdi1",
  ">\r\n                        {formatDate(conv.lastMessage.timestamp)}\r\n                        {conv.lastMessage.hasAttachment && (\r\n                          <Paperclip size={12} />\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Messages Area *": "common.formatdateconvlastme",
  ">\r\n                        {results}\r\n                    </pre>\r\n                </div>\r\n            )}\r\n\r\n            {/* Affichage des comptes créés *": "common.resultspredivafficha",
  ">\r\n                        {results}\r\n                    </pre>\r\n                </div>\r\n            )}\r\n\r\n            {/* Affichage des comptes créés */}\r\n            {createdAccounts.length > 0 && (\r\n                <div className=": "forms.resultspredivafficha",
  ">\r\n                        {results}\r\n                    </pre>\r\n                </div>\r\n            )}\r\n\r\n            {/* Résultats du système ultime *": "common.resultspredivresulta",
  ">\r\n                        {results}\r\n                    </pre>\r\n                </div>\r\n            )}\r\n\r\n            {/* Résultats du système ultime */}\r\n            {ultimateResult && ultimateResult.success && ultimateResult.accounts && (\r\n                <div className=": "forms.resultspredivresulta",
  ">\r\n                        {supplier.orders} commandes\r\n                      <": "ecommerce.supplierorderscomman",
  ">\r\n                        Évolution des vues (7 derniers mois)\r\n                    <": "common.evolutiondesvues7der",
  ">\r\n                        Évolution des vues (7 derniers mois)\r\n                    </h3>\r\n                    <div className=": "forms.evolutiondesvues7der",
  ">\r\n                        💡 <strong>Astuce :</strong> Téléchargez cette carte pour avoir toutes les informations de contact à portée de main !\r\n                    <": "ecommerce.strongastucestrongte1",
  ">\r\n                        📊 Métriques de Performance\r\n                    <": "common.metriquesdeperforman",
  ">\r\n                        📊 Métriques de Performance\r\n                    </h3>\r\n                    <div className=": "forms.metriquesdeperforman",
  ">\r\n                      <Eye size={16} />\r\n                      Générer un mot de passe\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Authentification à deux facteurs améliorée *": "auth.eyesize16genererunmo",
  ">\r\n                      <Eye size={16} />\r\n                      Générer un mot de passe\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Authentification à deux facteurs améliorée */}\r\n              <Section icon={<Smartphone className=": "auth.eyesize16genererunmo1",
  ">\r\n                      <Settings size={16} />\r\n                      Paramètres avancés\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Section de sécurité avancée - Nouvelles fonctionnalités *": "admin.settingssize16parame1",
  ">\r\n                      <Settings size={16} />\r\n                      Paramètres avancés\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Section de sécurité avancée - Nouvelles fonctionnalités */}\r\n              <Section icon={<Shield className=": "forms.settingssize16parame",
  ">\r\n                      <Settings size={18} />\r\n                      Paramètres de confidentialité\r\n                    <": "admin.settingssize18parame1",
  ">\r\n                      <Settings size={18} />\r\n                      Paramètres de confidentialité\r\n                    </h4>\r\n                    <div className=": "forms.settingssize18parame",
  ">\r\n                      <span>Signalé par: {item.reportedBy}<": "common.spansignaleparitemre",
  ">\r\n                      <span>Signalé par: {item.reportedBy}</span>\r\n                      <span>{formatDate(item.reportedAt)}</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Actions */}\r\n                  {item.status === 'pending' && (\r\n                    <div className=": "forms.spansignaleparitemre",
  ">\r\n                      Avec {conversationMessages[0]?.fromType === ": "common.avecconversationmess",
  ">\r\n                      Date création\r\n                    <": "common.datecreation",
  ">\r\n                      Date création\r\n                    </th>\r\n                    <th className=": "forms.datecreationththclas",
  ">\r\n                      Dernière connexion\r\n                    <": "auth.derniereconnexion1",
  ">\r\n                      Dernière connexion\r\n                    </th>\r\n                    <th className=": "auth.derniereconnexiontht",
  ">\r\n                      Explorez notre catalogue et ajoutez vos produits préférés !\r\n                    <": "ecommerce.exploreznotrecatalog1",
  ">\r\n                      Explorez notre catalogue et ajoutez vos produits préférés !\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=": "forms.exploreznotrecatalog",
  ">\r\n                      Expédition\r\n                    <": "common.expedition",
  ">\r\n                      Expédition\r\n                    </th>\r\n                    <th className=": "forms.expeditionththclassn",
  ">\r\n                      Produits\r\n                    <": "ecommerce.produits",
  ">\r\n                      Rôle\r\n                    <": "common.role2",
  ">\r\n                      Rôle\r\n                    </th>\r\n                    <th className=": "forms.roleththclassname",
  ">\r\n                      {conversationMessages[0]?.subject}\r\n                    <": "common.conversationmessages2",
  ">\r\n                      {fakeMessages.length}\r\n                    <": "common.fakemessageslength",
  ">\r\n                      {formatFileSize(image.file.size)}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Modal de prévisualisation *": "common.formatfilesizeimagef",
  ">\r\n                      {formatFileSize(image.file.size)}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Modal de prévisualisation */}\r\n      {showPreview && (\r\n        <div className=": "forms.formatfilesizeimagef",
  ">\r\n                    <MoreVertical size={20} />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Messages List *": "common.moreverticalsize20bu",
  ">\r\n                    <button\r\n                      onClick={() => showNotification('error', '2FA désactivée. Votre compte est moins sécurisé.')}\r\n                      className=": "forms.buttononclickshownot1",
  ">\r\n                    <button\r\n                      onClick={() => showNotification('success', 'Mot de passe mis à jour avec succès !')}\r\n                      className=": "auth.buttononclickshownot",
  ">\r\n                    <div>Taille: {formatFileSize(file.size)}</div>\r\n                    <div>Ajouté: {file.uploadedAt.toLocaleDateString()}<": "common.divtailleformatfiles",
  ">\r\n                    <div>Taille: {formatFileSize(file.size)}</div>\r\n                    <div>Ajouté: {file.uploadedAt.toLocaleDateString()}</div>\r\n                    {file.metadata?.width && file.metadata?.height && (\r\n                      <div>Dimensions: {file.metadata.width}x{file.metadata.height}</div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Actions */}\r\n                <div className=": "forms.divtailleformatfiles",
  ">\r\n                    <li>1. <strong>Compte Par Défaut</strong> : Crée admin@chinetonusine.com ": "admin.li1strongcompteparde",
  ">\r\n                    <li>1. <strong>Compte Par Défaut</strong> : Crée admin@chinetonusine.com / admin123456</li>\r\n                    <li>2. <strong>Compte Personnalisé</strong> : Modifiez les champs puis créez</li>\r\n                    <li>3. <strong>Comptes Test</strong> : Crée 3 comptes admin différents</li>\r\n                    <li>4. <strong>Après création</strong> : Déconnectez-vous et reconnectez-vous</li>\r\n                    <li>5. <strong>Vérification</strong> : Redirection automatique vers /admin/dashboard</li>\r\n                </ol>\r\n            </div>\r\n\r\n            {/* Accès rapide console *": "admin.li1strongcompteparde1",
  ">\r\n                    <li>1. <strong>Compte Par Défaut</strong> : Crée admin@chinetonusine.com / admin123456</li>\r\n                    <li>2. <strong>Compte Personnalisé</strong> : Modifiez les champs puis créez</li>\r\n                    <li>3. <strong>Comptes Test</strong> : Crée 3 comptes admin différents</li>\r\n                    <li>4. <strong>Après création</strong> : Déconnectez-vous et reconnectez-vous</li>\r\n                    <li>5. <strong>Vérification</strong> : Redirection automatique vers /admin/dashboard</li>\r\n                </ol>\r\n            </div>\r\n\r\n            {/* Accès rapide console */}\r\n            <div className=": "forms.li1strongcompteparde",
  ">\r\n                    <li>1. Entrez le mot de passe de admin@chinetonusine.com<": "auth.li1entrezlemotdepass",
  ">\r\n                    Capacité\r\n                  <": "common.capacite",
  ">\r\n                    Capacité\r\n                  </th>\r\n                  <th className=": "forms.capaciteththclassnam",
  ">\r\n                    Capacité totale (CBM)\r\n                  <": "common.capacitetotalecbm",
  ">\r\n                    Capacité totale (CBM)\r\n                  </label>\r\n                  <input\r\n                    type=": "common.capacitetotalecbmlab",
  ">\r\n                    Capacité utilisée (CBM)\r\n                  <": "common.capaciteutiliseecbm",
  ">\r\n                    Capacité utilisée (CBM)\r\n                  </label>\r\n                  <input\r\n                    type=": "common.capaciteutiliseecbml",
  ">\r\n                    Chargement...\r\n                  </span>\r\n                </div>\r\n              )}\r\n\r\n              {!hasMore && notifications.length > 0 && (\r\n                <div className=": "forms.chargementspandivhas1",
  ">\r\n                    Création de Compte Admin\r\n                </h3>\r\n            </div>\r\n\r\n            {/* Formulaire de création personnalisée *": "admin.creationdecompteadmi",
  ">\r\n                    Création de Compte Admin\r\n                </h3>\r\n            </div>\r\n\r\n            {/* Formulaire de création personnalisée */}\r\n            <div className=": "forms.creationdecompteadmi",
  ">\r\n                    Date de départ estimée\r\n                  <": "common.datededepartestimee",
  ">\r\n                    Date de départ estimée\r\n                  </label>\r\n                  <input\r\n                    type=": "common.datededepartestimeel",
  ">\r\n                    Double-clic pour<br />déconnexion d": "auth.doubleclicpourbrdeco1",
  ">\r\n                    Départ estimé\r\n                  <": "common.departestime",
  ">\r\n                    Départ estimé\r\n                  </th>\r\n                  <th className=": "forms.departestimeththclas",
  ">\r\n                    Filleuls récents\r\n                <": "common.filleulsrecents1",
  ">\r\n                    Filleuls récents\r\n                </h3>\r\n\r\n                <div className=": "forms.filleulsrecentsh3div",
  ">\r\n                    Itinéraire\r\n                  <": "common.itineraire",
  ">\r\n                    Itinéraire\r\n                  </th>\r\n                  <th className=": "forms.itineraireththclassn",
  ">\r\n                    Lieu d'arrivée\r\n                  </label>\r\n                  <input\r\n                    type=": "common.lieudarriveelabelinp",
  ">\r\n                    Lieu de départ\r\n                  <": "common.lieudedepart",
  ">\r\n                    Lieu de départ\r\n                  </label>\r\n                  <input\r\n                    type=": "common.lieudedepartlabelinp",
  ">\r\n                    Rechercher un influenceur\r\n                <": "common.rechercheruninfluenc",
  ">\r\n                    Téléchargements\r\n                  <": "common.telechargements1",
  ">\r\n                    Téléchargements\r\n                  </th>\r\n                  <th className=": "forms.telechargementsththc1",
  ">\r\n                    pour {product.moq} unités\r\n                  <": "ecommerce.pourproductmoqunites1",
  ">\r\n                    pour {product.moq} unités\r\n                  </div>\r\n                </div>\r\n                <div className=": "forms.pourproductmoqunites1",
  ">\r\n                    {/* Champ de recherche *": "common.champderecherche",
  ">\r\n                    {/* Création des utilisateurs essentiels *": "admin.creationdesutilisate1",
  ">\r\n                    {/* Création des utilisateurs essentiels */}\r\n                    <div className=": "forms.creationdesutilisate",
  ">\r\n                    {/* Notifications *": "common.notifications1",
  ">\r\n                    {fakeMessages.map((msg, index) => (\r\n                      <div\r\n                        key={msg.id}\r\n                        className=": "forms.fakemessagesmapmsgin",
  ">\r\n                    {filteredInfluencers.length} résultat(s) trouvé(s)\r\n                <": "common.filteredinfluencersl",
  ">\r\n                    {filteredInfluencers.length} résultat(s) trouvé(s)\r\n                </div>\r\n            </div>\r\n\r\n            {/* Barre de recherche *": "common.filteredinfluencersl1",
  ">\r\n                    {filteredInfluencers.length} résultat(s) trouvé(s)\r\n                </div>\r\n            </div>\r\n\r\n            {/* Barre de recherche */}\r\n            <div className=": "forms.filteredinfluencersl",
  ">\r\n                    {formatFileSize(uploadFile.file.size)}\r\n                  </p>\r\n                  \r\n                  {/* Barre de progrès *": "common.formatfilesizeupload",
  ">\r\n                    {formatFileSize(uploadFile.file.size)}\r\n                  </p>\r\n                  \r\n                  {/* Barre de progrès */}\r\n                  {uploadFile.status === 'uploading' && (\r\n                    <div className=": "forms.formatfilesizeupload",
  ">\r\n                    {formatPrice(unitPriceConverted, currency)}/unité\r\n                  <": "ecommerce.formatpriceunitprice1",
  ">\r\n                    {formatPrice(unitPriceConverted, currency)}/unité\r\n                  </div>\r\n                  <div className=": "forms.formatpriceunitprice1",
  ">\r\n                    {influencerStars.length} célébrités disponibles\r\n                <": "common.influencerstarslengt",
  ">\r\n                    {influencerStars.length} célébrités disponibles\r\n                </div>\r\n            </div>\r\n\r\n            <div className=": "forms.influencerstarslengt",
  ">\r\n                    {isEditing ? (\r\n                      <>\r\n                        <button\r\n                          onClick={handleSaveProfile}\r\n                          className=": "forms.iseditingbuttononcli",
  ">\r\n                    {message.timestamp.toLocaleTimeString()}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <div ref={messagesEndRef} ": "common.messagetimestamptolo",
  ">\r\n                    ✅ Connecté en tant que: {currentUser.email}\r\n                <": "auth.connecteentantquecur",
  ">\r\n                    ✅ Connecté en tant que: {currentUser.email}\r\n                </div>\r\n            ) : (\r\n                <div className=": "auth.connecteentantquecur1",
  ">\r\n                  <SocialNetworkSelector\r\n                    selectedNetworks={selectedNetworks}\r\n                    onChange={handleNetworkSelection}\r\n                    disabled={isLoading}\r\n                  />\r\n                </div>\r\n\r\n                {/* Nombre d'abonnés */}\r\n                <div className=": "forms.socialnetworkselecto",
  ">\r\n                  Catégorie\r\n                <": "common.categorie7",
  ">\r\n                  Catégorie\r\n                </th>\r\n                <th className=": "forms.categorieththclassna",
  ">\r\n                  Catégorie *\r\n                <": "common.categorie8",
  ">\r\n                  Catégorie *\r\n                </label>\r\n                <select\r\n                  value={metadata.category}\r\n                  onChange={(e) => setMetadata(prev => ({ ...prev, category: e.target.value }))}\r\n                  className=": "forms.categorielabelselect4",
  ">\r\n                  Choisissez une conversation pour voir les messages\r\n                <": "common.choisissezuneconvers",
  ">\r\n                  Matériau\r\n                <": "common.materiau",
  ">\r\n                  Matériau\r\n                </label>\r\n                <Input\r\n                  value={formData.material}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, material: e.target.value }))}\r\n                  placeholder=": "common.materiaulabelinputva",
  ">\r\n                  Numéro de modèle\r\n                <": "common.numerodemodele",
  ">\r\n                  Numéro de modèle\r\n                </label>\r\n                <Input\r\n                  value={formData.modelNumber}\r\n                  onChange={(e) => setFormData(prev => ({ ...prev, modelNumber: e.target.value }))}\r\n                  placeholder=": "common.numerodemodelelabeli",
  ">\r\n                  Sélectionnez une conversation\r\n                <": "common.selectionnezuneconve",
  ">\r\n                  Sélectionnez une conversation\r\n                </h3>\r\n                <p className=": "forms.selectionnezuneconve",
  ">\r\n                  Toutes les notifications ont été chargées\r\n                <": "common.touteslesnotificatio3",
  ">\r\n                  {/* Nouveau bouton de réservation interactif *": "common.nouveauboutondereser1",
  ">\r\n                  {/* Nouveau bouton de réservation interactif */}\r\n                  <button\r\n                    onClick={() => handleReserveSpace(container)}\r\n                    className=": "forms.nouveauboutondereser",
  ">\r\n                  {/* Score de sécurité *": "admin.scoredesecurite1",
  ">\r\n                  {/* Score de sécurité */}\r\n                  <div className=": "forms.scoredesecuritedivcl",
  ">\r\n                  {Object.entries(currencyNames).map(([code, name]) => (\r\n                    <button\r\n                      key={code}\r\n                      onClick={() => handleCurrencyChange(code as UserCurrency)}\r\n                      className={`${currency === code ? 'bg-gray-100 dark:bg-gray-600' : ''\r\n                        } block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 w-full text-left hover:bg-gray-100 dark:hover:bg-gray-600`}\r\n                    >\r\n                      {name}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Notifications - Affiché uniquement pour les utilisateurs connectés */}\r\n            {user && (\r\n              <div\r\n                className=": "forms.objectentriescurrenc1",
  ">\r\n                  {[\r\n                    {\r\n                      id: 'email-orders',\r\n                      title: 'Nouvelles commandes',\r\n                      description: 'Recevoir un email pour chaque nouvelle commande',\r\n                      enabled: true\r\n                    },\r\n                    {\r\n                      id: 'email-messages',\r\n                      title: 'Nouveaux messages',\r\n                      description: 'Notifications pour les messages de fournisseurs',\r\n                      enabled: true\r\n                    },\r\n                    {\r\n                      id: 'email-marketing',\r\n                      title: 'Actualités et promotions',\r\n                      description: 'Recevoir les dernières nouvelles et offres',\r\n                      enabled: false\r\n                    },\r\n                    {\r\n                      id: 'push-mobile',\r\n                      title: 'Notifications mobiles',\r\n                      description: 'Notifications push sur l\\'application mobile',\r\n                      enabled: true\r\n                    }\r\n                  ].map((notif) => (\r\n                    <div key={notif.id} className=": "auth.idemailorderstitleno",
  ">\r\n                  {[\r\n                    { action: 'Connexion réussie', time: '2 heures', icon: <User size={16} />, color: 'bg-green-100 text-green-600 dark:bg-green-900 dark:text-green-400' },\r\n                    { action: 'Commande #CMD-001 passée', time: '1 jour', icon: <Package size={16} />, color: 'bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-400' },\r\n                    { action: 'Profil mis à jour', time: '3 jours', icon: <Edit3 size={16} />, color: 'bg-purple-100 text-purple-600 dark:bg-purple-900 dark:text-purple-400' },\r\n                    { action: 'Nouveau message reçu', time: '5 jours', icon: <Mail size={16} />, color: 'bg-orange-100 text-orange-600 dark:bg-orange-900 dark:text-orange-400' },\r\n                  ].map((activity, index) => (\r\n                    <div key={index} className=": "auth.actionconnexionreuss",
  ">\r\n                  {[\r\n                    { label: 'Nom complet', key: 'name', type: 'text', icon: <User size={16} />, required: true },\r\n                    { label: 'Adresse email', key: 'email', type: 'email', icon: <Mail size={16} />, required: true },\r\n                    { label: 'Téléphone', key: 'phone', type: 'tel', icon: <Phone size={16} /> },\r\n                    { label: 'Pays/Région', key: 'country', type: 'text', icon: <MapPin size={16} /> },\r\n                    { label: 'Ville', key: 'city', type: 'text', icon: <MapPin size={16} /> },\r\n                    { label: 'Code postal', key: 'zipCode', type: 'text', icon: <MapPin size={16} /> }\r\n                  ].map((field) => (\r\n                    <div key={field.key} className=": "auth.labelnomcompletkeyna",
  ">\r\n                  {documents.reduce((total, doc) => total + doc.downloadCount, 0)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filtres et recherche *": "common.documentsreducetotal",
  ">\r\n                  {documents.reduce((total, doc) => total + doc.downloadCount, 0)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>        {/* Filtres et recherche *": "common.documentsreducetotal1",
  ">\r\n                  {isEditing ? (\r\n                    <>\r\n                      <button\r\n                        onClick={handleSaveProfile}\r\n                        className=": "forms.iseditingbuttononcli1",
  ">\r\n                  🌟 Connexion Universelle\r\n                <": "auth.connexionuniverselle3",
  ">\r\n                  🚀 Accès Simplifié\r\n                <": "common.accessimplifie",
  ">\r\n                  🚀 Accès Simplifié\r\n                </span>\r\n              </div>\r\n              <p className=": "forms.accessimplifiespandi",
  ">\r\n                <MessageSquare className=": "forms.messagesquareclassna3",
  ">\r\n                <Plus size={16} />\r\n                Nouveau\r\n              <": "common.plussize16nouveau",
  ">\r\n                <div>Favoris: {localStorage.getItem(": "common.divfavorislocalstora",
  ">\r\n                Adresses IP autorisées (une par ligne)\r\n              <": "forms.adressesipautorisees",
  ">\r\n                Adresses IP autorisées (une par ligne)\r\n              </label>\r\n              <textarea\r\n                value={settings.allowedIPs.join('\\n')}\r\n                onChange={(e) => updateSetting('allowedIPs', e.target.value.split('\\n').filter(ip => ip.trim()))}\r\n                rows={4}\r\n                placeholder=": "forms.adressesipautorisees1",
  ">\r\n                Catégorie *\r\n              <": "common.categorie9",
  ">\r\n                Catégorie *\r\n              </label>\r\n              <select\r\n                value={formData.category}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}\r\n                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${\r\n                  errors.category ? 'border-red-500' : 'border-gray-300'\r\n                }`}\r\n              >\r\n                <option value=": "forms.categorielabelselect5",
  ">\r\n                Ce test crée un utilisateur directement sans passer par AuthContext\r\n                pour isoler le problème de déconnexion.\r\n            <": "auth.cetestcreeunutilisat1",
  ">\r\n                Connectez-vous simplement avec votre email et mot de passe. Votre rôle sera automatiquement attribué.\r\n              <": "auth.connectezvoussimplem",
  ">\r\n                Connectez-vous simplement avec votre email et mot de passe. Votre rôle sera automatiquement attribué.\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=": "auth.connectezvoussimplem1",
  ">\r\n                Disponible ({availableCapacity - quantity} CBM)\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>          {/* Informations dynamiques *": "common.disponibleavailablec",
  ">\r\n                Fichiers *\r\n              </label>\r\n              <FileUpload\r\n                onFileSelect={handleFileSelect}\r\n                onUpload={handleCustomUpload}\r\n                maxFiles={5}\r\n                maxSizePerFile={20}\r\n                acceptedTypes={['.pdf', '.doc', '.docx', '.txt', '.jpg', '.jpeg', '.png']}\r\n              />\r\n            </div>\r\n\r\n            {/* Information sur les formats acceptés */}\r\n            <div className=": "forms.fichierslabelfileupl",
  ">\r\n                Formats acceptés\r\n              <": "common.formatsacceptes",
  ">\r\n                Formats acceptés\r\n              </h4>\r\n              <ul className=": "forms.formatsacceptesh4ulc",
  ">\r\n                MOQ: {product.moq}\r\n              </span>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Rating étoiles *": "ecommerce.moqproductmoqspandiv",
  ">\r\n                MOQ: {product.moq}\r\n              </span>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Rating étoiles */}\r\n          <div className=": "forms.moqproductmoqspandiv",
  ">\r\n                Notifications\r\n              <": "common.notifications3",
  ">\r\n                Plus besoin de choisir votre rôle. Connectez-vous directement avec vos identifiants.\r\n              <": "common.plusbesoindechoisirv",
  ">\r\n                Plus besoin de choisir votre rôle. Connectez-vous directement avec vos identifiants.\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=": "forms.plusbesoindechoisirv",
  ">\r\n                Sélectionné ({quantity} CBM)\r\n              <": "common.selectionnequantityc",
  ">\r\n                Sélectionné ({quantity} CBM)\r\n              </span>\r\n            </div>\r\n            <div className=": "forms.selectionnequantityc",
  ">\r\n                Utilisé ({container.usedCapacity} CBM)\r\n              <": "common.utilisecontainerused",
  ">\r\n                Utilisé ({container.usedCapacity} CBM)\r\n              </span>\r\n            </div>\r\n            <div className=": "forms.utilisecontainerused",
  ">\r\n                {/* En-tête *": "common.entete7",
  ">\r\n                {/* En-tête */}\r\n                <BackButton to=": "navigation.entetebackbuttonto",
  ">\r\n                {/* En-tête */}\r\n                <div className=": "forms.entetedivclassname6",
  ">\r\n                {/* Panel de gauche - Éditeur *": "common.paneldegaucheediteur",
  ">\r\n                {/* Panel de gauche - Éditeur */}\r\n                <div className=": "forms.paneldegaucheediteur",
  ">\r\n                {/* Évolution des vues *": "common.evolutiondesvues",
  ">\r\n                {/* Évolution des vues */}\r\n                <div className=": "forms.evolutiondesvuesdivc",
  ">\r\n                {conversationMessages.map((message) => (\r\n                  <div\r\n                    key={message.id}\r\n                    className={`flex ${message.fromType === ": "forms.conversationmessages",
  ">\r\n                {filteredItems.length} résultat{filteredItems.length > 1 ? ": "forms.filtereditemslengthr",
  ">\r\n                {filteredItems.length} résultat{filteredItems.length > 1 ? 's' : ''}\r\n                {debouncedSearchTerm && ` pour ": "forms.filtereditemslengthr1",
  ">\r\n                Évolution des Commandes\r\n              <": "ecommerce.evolutiondescommande1",
  ">\r\n                Évolution des Commandes\r\n              </h3>\r\n              <ShoppingBag className=": "forms.evolutiondescommande",
  ">\r\n                Évolution des Revenus\r\n              <": "common.evolutiondesrevenus",
  ">\r\n                Évolution des Revenus\r\n              </h3>\r\n              <BarChart3 className=": "forms.evolutiondesrevenush",
  ">\r\n              <MessageSquare className=": "forms.messagesquareclassna5",
  ">\r\n              <li>• Activez la 2FA pour tous les comptes administrateur</li>\r\n              <li>• Utilisez des mots de passe complexes avec symboles</li>\r\n              <li>• Limitez les tentatives de connexion à 3-5 maximum<": "auth.liactivezla2fapourto1",
  ">\r\n              <li>• Activez la 2FA pour tous les comptes administrateur</li>\r\n              <li>• Utilisez des mots de passe complexes avec symboles</li>\r\n              <li>• Limitez les tentatives de connexion à 3-5 maximum</li>\r\n              <li>• Activez la liste blanche IP pour l'accès admin</li>\r\n              <li>• Surveillez régulièrement les alertes de sécurité</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistiques de sécurité en temps réel */}\r\n      <div className=": "auth.liactivezla2fapourto2",
  ">\r\n              <span>0</span>\r\n              <span>{availableCapacity} CBM</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Barre de progression des capacités *": "common.span0spanspanavailab",
  ">\r\n              <span>0</span>\r\n              <span>{availableCapacity} CBM</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Barre de progression des capacités */}\r\n        <div className=": "forms.span0spanspanavailab",
  ">\r\n              <span>MOQ: {product.moq} unités<": "ecommerce.spanmoqproductmoquni1",
  ">\r\n              <span>MOQ: {product.moq} unités</span>\r\n              <span className=": "forms.spanmoqproductmoquni1",
  ">\r\n              <span>{t('orContinueWith')}</span>\r\n            </div>\r\n            \r\n            <GoogleSignInButton\r\n              onSuccess={() => {\r\n                // La redirection sera gérée automatiquement par l'écouteur onAuthStateChanged\r\n                // dans le contexte d'authentification\r\n                console.log('Connexion Google réussie');\r\n              }}\r\n              onError={(errorMessage) => {\r\n                setError(errorMessage);\r\n              }}\r\n              className=": "auth.spantorcontinuewiths",
  ">\r\n              Activité Récente\r\n            <": "common.activiterecente1",
  ">\r\n              Activité Récente\r\n            </h3>\r\n            <div className=": "forms.activiterecenteh3div",
  ">\r\n              Ajouter des {activeTab}\r\n            <": "forms.ajouterdesactivetab",
  ">\r\n              Aucun document ne correspond à vos critères de recherche.\r\n            <": "common.aucundocumentnecorre3",
  ">\r\n              Aucun produit dans cette catégorie.\r\n            <": "ecommerce.aucunproduitdanscett",
  ">\r\n              Configurez les paramètres généraux de la plateforme\r\n            <": "admin.configurezlesparamet1",
  ">\r\n              Configurez les paramètres généraux de la plateforme\r\n            </p>\r\n          </div>\r\n          <Button\r\n            onClick={handleSave}\r\n            disabled={loading}\r\n            className=": "forms.configurezlesparamet",
  ">\r\n              Configurez votre compte et vos préférences\r\n            <": "common.configurezvotrecompt1",
  ">\r\n              Configurez votre compte et vos préférences\r\n            </p>\r\n          </div>\r\n          {hasChanges && (\r\n            <Button onClick={handleSave} className=": "forms.configurezvotrecompt",
  ">\r\n              Coup de foudre inévitable.\r\n            <": "common.coupdefoudreinevitab1",
  ">\r\n              Coup de foudre inévitable.\r\n            </p>\r\n\r\n            {/* Barre de recherche *": "common.coupdefoudreinevitab3",
  ">\r\n              Coup de foudre inévitable.\r\n            </p>\r\n\r\n            {/* Barre de recherche */}\r\n            <form onSubmit={handleSearch} className=": "forms.coupdefoudreinevitab1",
  ">\r\n              Durée de verrouillage (minutes)\r\n            <": "common.dureedeverrouillagem",
  ">\r\n              Durée de verrouillage (minutes)\r\n            </label>\r\n            <input\r\n              type=": "common.dureedeverrouillagem1",
  ">\r\n              Découvrir tous les fournisseurs\r\n            <": "ecommerce.decouvrirtouslesfour3",
  ">\r\n              Délai d": "common.delaid1",
  ">\r\n              Délai d'expiration admin (minutes)\r\n            </label>\r\n            <input\r\n              type=": "admin.delaidexpirationadmi",
  ">\r\n              Délai d'expiration de session (minutes)\r\n            </label>\r\n            <input\r\n              type=": "common.delaidexpirationdese",
  ">\r\n              Détails de la commande {selectedOrder.id}\r\n            <": "ecommerce.detailsdelacommandes",
  ">\r\n              Détails de la commande {selectedOrder.id}\r\n            </h3>\r\n            <div className=": "forms.detailsdelacommandes",
  ">\r\n              Fichiers sélectionnés ({uploadFiles.length})\r\n            <": "common.fichiersselectionnes",
  ">\r\n              Fichiers sélectionnés ({uploadFiles.length})\r\n            </h3>\r\n            <div className=": "forms.fichiersselectionnes",
  ">\r\n              Gestion des Commandes\r\n            <": "ecommerce.gestiondescommandes",
  ">\r\n              Gestion des Fournisseurs\r\n            <": "ecommerce.gestiondesfournisseu",
  ">\r\n              Gestion des Utilisateurs\r\n            <": "admin.gestiondesutilisateu1",
  ">\r\n              Glissez-déposez vos fichiers ici ou cliquez pour sélectionner\r\n            <": "common.glissezdeposezvosfic",
  ">\r\n              Glissez-déposez vos fichiers ici ou cliquez pour sélectionner\r\n            </p>\r\n            <p className=": "forms.glissezdeposezvosfic",
  ">\r\n              Gérez les conteneurs et leurs capacités\r\n            <": "common.gerezlesconteneurset",
  ">\r\n              Gérez les conteneurs et leurs capacités\r\n            </p>\r\n          </div>\r\n          <button\r\n            onClick={handleCreateContainer}\r\n            className=": "forms.gerezlesconteneurset",
  ">\r\n              Gérez tous les documents de la plateforme\r\n            <": "common.gereztouslesdocument",
  ">\r\n              Gérez tous les documents de la plateforme\r\n            </p>\r\n          </div>\r\n          <Button onClick={() => console.log('Upload document')} className=": "forms.gereztouslesdocument",
  ">\r\n              Gérez tous les fournisseurs de la plateforme\r\n            <": "ecommerce.gereztouslesfourniss1",
  ">\r\n              Gérez tous les fournisseurs de la plateforme\r\n            </p>\r\n          </div>\r\n          <Button onClick={() => console.log('Ajouter fournisseur')} className=": "forms.gereztouslesfourniss",
  ">\r\n              Gérez tous les utilisateurs de la plateforme\r\n            <": "admin.gereztouslesutilisat1",
  ">\r\n              Gérez tous les utilisateurs de la plateforme\r\n            </p>\r\n          </div>          <div className=": "forms.gereztouslesutilisat",
  ">\r\n              Gérez vos documents et fichiers\r\n            <": "common.gerezvosdocumentsetf1",
  ">\r\n              Gérez vos documents et fichiers\r\n            </p>\r\n          </div>          <Button \r\n            className=": "forms.gerezvosdocumentsetf1",
  ">\r\n              NOUVEAU\r\n            <": "common.nouveau3",
  ">\r\n              Paramètres de la Plateforme\r\n            <": "admin.parametresdelaplatef1",
  ">\r\n              Paramètres de la Plateforme\r\n            </h1>\r\n            <p className=": "forms.parametresdelaplatef",
  ">\r\n              Réserver de l": "common.reserverdel",
  ">\r\n              Réserver de l'espace\r\n            </h2>\r\n            <p className=": "forms.reserverdelespaceh2p",
  ">\r\n              Suivez et gérez toutes les commandes de la plateforme\r\n            <": "ecommerce.suivezetgereztoutesl1",
  ">\r\n              Suivez et gérez toutes les commandes de la plateforme\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=": "forms.suivezetgereztoutesl",
  ">\r\n              Tentatives de connexion maximum\r\n            <": "auth.tentativesdeconnexio",
  ">\r\n              Top Fournisseurs\r\n            <": "ecommerce.topfournisseurs",
  ">\r\n              Téléphone\r\n            <": "forms.telephone3",
  ">\r\n              Téléphone\r\n            </label>\r\n            <input\r\n              type=": "forms.telephonelabelinputt2",
  ">\r\n              {/* Informations personnelles avec édition inline *": "common.informationspersonne1",
  ">\r\n              {/* Informations personnelles avec édition inline */}\r\n              <Section icon={<User className=": "forms.informationspersonne",
  ">\r\n              {/* Language selector avec isolation complète *": "common.languageselectoravec",
  ">\r\n              {/* Language selector avec isolation complète */}\r\n              <div className=": "forms.languageselectoravec",
  ">\r\n              {/* Préférences linguistiques et régionales *": "common.preferenceslinguisti1",
  ">\r\n              {/* Préférences linguistiques et régionales */}\r\n              <Section icon={<Globe className=": "forms.preferenceslinguisti",
  ">\r\n              {Array.from({ length: maxIndex + 1 }, (_, index) => (\r\n                <button\r\n                  key={index}\r\n                  onClick={() => goToSlide(index)}\r\n                  className={`w-3 h-3 rounded-full transition-all duration-300 ${\r\n                    index === currentIndex\r\n                      ? 'bg-gradient-to-r from-blue-500 to-purple-500 w-8'\r\n                      : 'bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500'\r\n                  }`}\r\n                  aria-label={`Aller à la page ${index + 1}`}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Call to action */}\r\n        <div className=": "forms.arrayfromlengthmaxin",
  ">\r\n              {[\r\n                { text: 'Nouvelle commande de Marie Dupont', time: 'Il y a 2h', type: 'order' },\r\n                { text: 'Nouveau fournisseur approuvé', time: 'Il y a 4h', type: 'supplier' },\r\n                { text: 'Commande livrée à Jean Martin', time: 'Il y a 6h', type: 'delivery' },\r\n                { text: 'Nouveau utilisateur inscrit', time: 'Il y a 8h', type: 'user' },\r\n              ].map((activity, index) => (\r\n                <div key={index} className=": "forms.textnouvellecommande",
  ">\r\n              {activeTab === 'images' && 'Formats: JPG, PNG, GIF, WEBP | Max 10MB par image'}\r\n              {activeTab === 'videos' && 'Formats: MP4, MOV, AVI, WEBM | Max 100MB par vidéo'}\r\n              {activeTab === 'documents' && 'Formats: PDF, DOC, XLS, PPT | Max 50MB par document'}\r\n            </p>\r\n          </div>\r\n\r\n          <input\r\n            id={`file-input-${activeTab}`}\r\n            type=": "common.activetabimagesforma",
  ">\r\n              {isLoginMode \r\n                ? t('loginDescription', 'Accédez à votre compte')\r\n                : t('registerDescription', 'Rejoignez notre plateforme')\r\n              }\r\n            </p>\r\n          </div>\r\n\r\n          {/* Navigation des onglets */}\r\n          <div className=": "auth.isloginmodetlogindes",
  ">\r\n              {isLoginMode \r\n                ? t('welcome.back.subtitle', 'Connectez-vous pour accéder à votre espace')\r\n                : t('welcome.join.subtitle', 'Créez votre compte et découvrez toutes les opportunités d\\'affaires avec la Chine')\r\n              }\r\n            </p>\r\n            \r\n            <div className=": "auth.isloginmodetwelcomeb",
  ">\r\n              {isLoginMode ? t('login', 'Connexion') : t('createAccount', 'Créer un compte')}\r\n            </h2>\r\n            <p className=": "auth.isloginmodetlogincon",
  ">\r\n              {t('registerNow', 'Créer un compte')}\r\n            </Link>\r\n          </div>\r\n\r\n          <div style={{ textAlign: 'center', marginTop: '1.5rem' }}>\r\n            <p style={{ fontSize: '0.75rem', color: 'var(--auth-text-light)' }}>\r\n              {t('agreementPrefix', 'En continuant, vous acceptez nos')}{' '}\r\n              <Link to=": "auth.tregisternowcreerunc",
  ">\r\n              {t('welcome.back.subtitle', 'Connectez-vous pour accéder à votre espace et découvrir les dernières opportunités commerciales avec la Chine.')}\r\n            </p>\r\n            \r\n            <div className=": "navigation.twelcomebacksubtitle",
  ">\r\n              © {currentYear} {t('copyright')} • Tous droits réservés\r\n            </div>\r\n            <div className=": "forms.currentyeartcopyrigh",
  ">\r\n              ÇA VA VOUS \r\n              <span className=": "forms.cavavousspanclassnam7",
  ">\r\n            <Plus size={16} />\r\n            Nouveau fournisseur\r\n          <": "ecommerce.plussize16nouveaufou",
  ">\r\n            <Search className={`${styles.icon} text-gray-500 dark:text-gray-300`} />\r\n          </div>\r\n          \r\n          {/* Input de recherche *": "forms.searchclassnamestyle",
  ">\r\n            <Upload size={16} />\r\n            Télécharger un document\r\n          <": "common.uploadsize16telechar",
  ">\r\n            <Upload size={16} />\r\n            Télécharger un document\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=": "forms.uploadsize16telechar",
  ">\r\n            <span>\r\n              {isLoginMode \r\n                ? t('noAccountQuestion', 'Pas encore de compte ?')\r\n                : t('hasAccountQuestion', 'Déjà un compte ?')\r\n              }\r\n            </span>\r\n          </div>\r\n\r\n          <div style={{ textAlign: 'center' }}>\r\n            {isLoginMode ? (\r\n              <button \r\n                type=": "auth.spanisloginmodetnoac",
  ">\r\n            <span>{t('orContinueWith')}</span>\r\n          </div>\r\n\r\n          <GoogleSignInButton\r\n            onSuccess={() => {\r\n              console.log('Connexion Google réussie');\r\n              // La redirection sera gérée automatiquement\r\n            }}\r\n            onError={(errorMessage) => {\r\n              setError(errorMessage);\r\n            }}\r\n            className=": "auth.spantorcontinuewiths1",
  ">\r\n            <strong>Note :</strong> Actuellement en mode simulation. Les fichiers ne sont pas réellement stockés. \r\n            Pour activer l": "common.strongnotestrongactu",
  ">\r\n            Commandes ({filteredOrders.length})\r\n          <": "ecommerce.commandesfilteredord",
  ">\r\n            Consultez et répondez aux avis de vos clients\r\n          <": "common.consultezetrepondeza",
  ">\r\n            Consultez et répondez aux avis de vos clients\r\n          </p>\r\n        </div>\r\n\r\n        {/* Overview Cards */}\r\n        <div className=": "forms.consultezetrepondeza",
  ">\r\n            Coup de foudre inévitable.\r\n          <": "common.coupdefoudreinevitab5",
  ">\r\n            Coup de foudre inévitable.\r\n          </p>\r\n            {/* Bouton CTA */}\r\n          <div className=": "forms.coupdefoudreinevitab2",
  ">\r\n            Coup de foudre inévitable.\r\n          </p>{/* Bouton CTA */}\r\n          <div className=": "forms.coupdefoudreinevitab3",
  ">\r\n            Déposez vos images ici\r\n          <": "common.deposezvosimagesici",
  ">\r\n            Déposez vos images ici\r\n          </p>\r\n          <p className=": "forms.deposezvosimagesicip",
  ">\r\n            Désactive l": "common.desactivel",
  ">\r\n            Désactive l'accès public au site\r\n          </p>\r\n        </div>\r\n        <label className=": "forms.desactivelaccespubli",
  ">\r\n            Envoyer des notifications par SMS\r\n          <": "common.envoyerdesnotificati",
  ">\r\n            Envoyer des notifications par email\r\n          <": "auth.envoyerdesnotificati",
  ">\r\n            Gérez les signalements et modérez le contenu de la plateforme\r\n          <": "common.gerezlessignalements",
  ">\r\n            Gérez les signalements et modérez le contenu de la plateforme\r\n          </p>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=": "forms.gerezlessignalements",
  ">\r\n            Gérez vos relations clients et suivez leur activité\r\n          <": "common.gerezvosrelationscli",
  ">\r\n            Gérez vos relations clients et suivez leur activité\r\n          </p>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=": "forms.gerezvosrelationscli",
  ">\r\n            Mes Expéditions\r\n          <": "common.mesexpeditions",
  ">\r\n            Mes Expéditions\r\n          </h1>\r\n          <p className=": "forms.mesexpeditionsh1pcla",
  ">\r\n            Modération\r\n          <": "common.moderation",
  ">\r\n            Modération\r\n          </h1>\r\n          <p className=": "forms.moderationh1pclassna",
  ">\r\n            Produits ({filteredProducts.length})\r\n          <": "ecommerce.produitsfilteredprod",
  ">\r\n            Quantité à réserver\r\n          <": "common.quantiteareserver",
  ">\r\n            Quantité à réserver\r\n          </label>\r\n          <div className={`text-2xl font-bold text-blue-600 dark:text-blue-400 quantity-display ${quantityAnimating ? 'updating' : ''\r\n            }`}>\r\n            {quantity} CBM\r\n          </div>\r\n        </div>\r\n          <div className=": "forms.quantiteareserverlab",
  ">\r\n            Répartition de la capacité\r\n          <": "common.repartitiondelacapac",
  ">\r\n            Répartition de la capacité\r\n          </h3>            <div className=": "forms.repartitiondelacapac",
  ">\r\n            Répartition des notes\r\n          <": "common.repartitiondesnotes",
  ">\r\n            Répartition des notes\r\n          </h3>\r\n          <div className=": "forms.repartitiondesnotesh",
  ">\r\n            Suivez et gérez toutes vos expéditions\r\n          <": "common.suivezetgereztoutesv",
  ">\r\n            Suivez et gérez toutes vos expéditions\r\n          </p>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=": "forms.suivezetgereztoutesv",
  ">\r\n            Vous devez être connecté pour voir votre profil.\r\n          <": "common.vousdevezetreconnect",
  ">\r\n            Vous devez être connecté pour voir votre profil.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  // Avatar fallback avec vérification de type\r\n  const avatar = preview || user?.avatar || `https:": "navigation.vousdevezetreconnect",
  ">\r\n            Vous devez être connecté pour voir votre profil.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  // Avatar fallback avec vérification de type\r\n  const avatar = preview || user?.avatar || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=6366f1&color=fff`;\r\n\r\n  return (\r\n    <div className=": "navigation.vousdevezetreconnect1",
  ">\r\n            ou cliquez pour sélectionner des images\r\n          <": "common.oucliquezpourselecti",
  ">\r\n            ou cliquez pour sélectionner des images\r\n          </p>\r\n          <p className=": "forms.oucliquezpourselecti",
  ">\r\n            {/* Barre de recherche et filtres *": "common.barrederechercheetfi",
  ">\r\n            {/* Capacité utilisée *": "common.capaciteutilisee",
  ">\r\n            {/* Capacité utilisée */}\r\n            <div\r\n              className=": "forms.capaciteutiliseedivc",
  ">\r\n            {/* En-tête avec filtres *": "common.enteteavecfiltres1",
  ">\r\n            {/* En-tête avec filtres */}\r\n            <div className=": "forms.enteteavecfiltresdiv1",
  ">\r\n            {/* En-tête avec statistiques *": "common.enteteavecstatistiqu",
  ">\r\n            {/* En-tête avec statistiques */}\r\n            <div className=": "forms.enteteavecstatistiqu",
  ">\r\n            {/* Métadonnées *": "common.metadonnees",
  ">\r\n            {/* Métadonnées */}\r\n            <div className=": "forms.metadonneesdivclassn",
  ">\r\n            {[\r\n              { id: 'infos', label: 'Informations', icon: <User size={18} /> },\r\n              { id: 'settings', label: 'Paramètres', icon: <Settings size={18} /> },\r\n              { id: 'security', label: 'Sécurité', icon: <ShieldCheck size={18} /> }\r\n            ].map((tabItem) => (\r\n              <button\r\n                key={tabItem.id}\r\n                onClick={() => setTab(tabItem.id)}\r\n                className={`flex-1 flex items-center justify-center px-6 py-4 font-medium transition-all duration-300 relative overflow-hidden ${tab === tabItem.id\r\n                  ? 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20'\r\n                  : 'text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-700/50'\r\n                  }`}\r\n              >\r\n                <div className=": "forms.idinfoslabelinformat",
  ">\r\n            {category.products.length} produits trouvés dans {category.name}\r\n          <": "forms.categoryproductsleng1",
  ">\r\n            {category.products.length} produits trouvés dans {category.name}\r\n          </p>\r\n        </div>\r\n\r\n        {viewMode === 'grid' ? (\r\n          <div className=": "forms.categoryproductsleng2",
  ">\r\n            {messages.map((message) => (\r\n              <div\r\n                key={message.id}\r\n                className={`flex ${\r\n                  message.sender === ": "forms.messagesmapmessagedi",
  ">\r\n            {productDescription}\r\n          </p>\r\n          \r\n          {/* Fonctionnalités principales *": "ecommerce.productdescriptionpf",
  ">\r\n            {productDescription}\r\n          </p>\r\n          \r\n          {/* Fonctionnalités principales */}\r\n          {product.featured && product.featured.length > 0 && (\r\n            <div className=": "forms.productdescriptionpf",
  ">\r\n          <div>\r\n            <strong>Mode actuel :</strong> {uploadService['mockMode'] ? 'Simulation' : 'Production'}\r\n          </div>\r\n          <div>\r\n            <strong>URL API :</strong> {uploadService['baseUrl']}\r\n          </div>\r\n          <div>\r\n            <strong>Types supportés :</strong> PDF, DOC, DOCX, TXT, JPG, PNG, XLSX\r\n          </div>\r\n          <div>\r\n            <strong>Taille max :</strong> 10MB par fichier (documents), 5MB (images)\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=": "forms.divstrongmodeactuels",
  ">\r\n          Devise par défaut\r\n        <": "common.devisepardefaut",
  ">\r\n          Devise par défaut\r\n        </label>\r\n        <select\r\n          value={settings.defaultCurrency}\r\n          onChange={(e) => updateSetting('defaultCurrency', e.target.value)}\r\n          className=": "forms.devisepardefautlabel",
  ">\r\n          Démonstration Upload\r\n        <": "common.demonstrationupload",
  ">\r\n          Démonstration Upload\r\n        </h1>\r\n        <p className=": "forms.demonstrationuploadh",
  ">\r\n          Déposez vos fichiers ici\r\n        <": "common.deposezvosfichiersic",
  ">\r\n          Déposez vos fichiers ici\r\n        </p>\r\n        <p className=": "forms.deposezvosfichiersic",
  ">\r\n          Formats acceptés: {acceptedTypes.join(": "common.formatsacceptesaccep",
  ">\r\n          Formats acceptés: {acceptedTypes.join(', ')} | Taille max: {maxSizePerFile}MB par fichier\r\n        </p>\r\n      </div>\r\n\r\n      <input\r\n        ref={fileInputRef}\r\n        type=": "common.formatsacceptesaccep1",
  ">\r\n          Langue par défaut\r\n        <": "common.languepardefaut1",
  ">\r\n          Langue par défaut\r\n        </label>\r\n        <select\r\n          value={settings.defaultLanguage}\r\n          onChange={(e) => updateSetting('defaultLanguage', e.target.value)}\r\n          className=": "forms.languepardefautlabel",
  ">\r\n          Testez les fonctionnalités d": "common.testezlesfonctionnal",
  ">\r\n          Testez les fonctionnalités d'upload de fichiers et d'images\r\n        </p>\r\n      </div>\r\n\r\n      {/* Onglets */}\r\n      <div className=": "forms.testezlesfonctionnal",
  ">\r\n          Types de fichiers autorisés\r\n        <": "common.typesdefichiersautor",
  ">\r\n          Types de fichiers autorisés\r\n        </label>\r\n        <div className=": "forms.typesdefichiersautor",
  ">\r\n          ou cliquez pour sélectionner des fichiers\r\n        <": "common.oucliquezpourselecti1",
  ">\r\n          ou cliquez pour sélectionner des fichiers\r\n        </p>\r\n        <p className=": "forms.oucliquezpourselecti1",
  ">\r\n          {/* Icône de recherche *": "common.iconederecherche1",
  ">\r\n          {/* Icône de recherche */}\r\n          <div className=": "forms.iconederecherchedivc",
  ">\r\n          {/* Informations de base *": "common.informationsdebase",
  ">\r\n          {/* Top produits *": "ecommerce.topproduits",
  ">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst UserProfile: React.FC = () => {\r\n  const { user: baseUser, loading, updateUser } = useAuth();\r\n  const [tab, setTab] = useState(": "admin.childrendivdivdivcon",
  ">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst UserProfile: React.FC = () => {\r\n  const { user: baseUser, loading, updateUser } = useAuth();\r\n  const [tab, setTab] = useState('infos');\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editedUser, setEditedUser] = useState<any>({});\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const [preview, setPreview] = useState<string | null>(null);\r\n  const [uploadStatus, setUploadStatus] = useState<'idle' | 'uploading' | 'success' | 'error'>('idle');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [notification, setNotification] = useState<{ type: 'success' | 'error' | 'info', message: string } | null>(null);\r\n\r\n  // Cast pour accéder aux propriétés étendues non typées\r\n  const user = baseUser as Record<string, any>;\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setEditedUser({ ...user });\r\n    }\r\n  }, [user]);\r\n\r\n  // Animation notification\r\n  useEffect(() => {\r\n    if (notification) {\r\n      const timer = setTimeout(() => {\r\n        setNotification(null);\r\n      }, 4000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [notification]);\r\n\r\n  const showNotification = (type: 'success' | 'error' | 'info', message: string) => {\r\n    setNotification({ type, message });\r\n  };\r\n\r\n  // Fonctions pour la gestion du profil\r\n  const handleClickChangePhoto = () => {\r\n    fileInputRef.current?.click();\r\n  };\r\n\r\n  const handleProfilePicChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    // Validation du fichier\r\n    if (file.size > 5 * 1024 * 1024) {\r\n      showNotification('error', 'Le fichier est trop volumineux (max 5MB)');\r\n      return;\r\n    }\r\n\r\n    if (!file.type.startsWith('image/')) {\r\n      showNotification('error', 'Veuillez sélectionner une image valide');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setUploadStatus('uploading');\r\n\r\n      // Créer un aperçu local\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setPreview(e.target?.result as string);\r\n      };\r\n      reader.readAsDataURL(file);\r\n\r\n      // Upload vers Firebase Storage\r\n      const storageRef = ref(storage, `avatars/${user.id}-${Date.now()}`);\r\n      const snapshot = await uploadBytes(storageRef, file);\r\n      const downloadURL = await getDownloadURL(snapshot.ref);\r\n\r\n      // Mettre à jour le profil utilisateur (cast pour éviter l'erreur de type)\r\n      await updateUser({ ...user, avatar: downloadURL } as any);\r\n\r\n      setUploadStatus('success');\r\n      showNotification('success', 'Photo de profil mise à jour avec succès !');\r\n    } catch (error) {\r\n      console.error('Erreur upload:', error);\r\n      setUploadStatus('error');\r\n      showNotification('error', 'Erreur lors de l\\'upload de l\\'image');\r\n    }\r\n  };\r\n\r\n  const handleSaveProfile = async () => {\r\n    try {\r\n      await updateUser(editedUser);\r\n      setIsEditing(false);\r\n      showNotification('success', 'Profil mis à jour avec succès !');\r\n    } catch (error) {\r\n      console.error('Erreur sauvegarde:', error);\r\n      showNotification('error', 'Erreur lors de la sauvegarde du profil');\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditedUser({ ...user });\r\n    setIsEditing(false);\r\n  };\r\n\r\n  // Fonctions utilitaires pour la validation\r\n  const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const validatePhone = (phone: string): boolean => {\r\n    const phoneRegex = /^[\\+]?[0-9\\s\\-\\(\\)]{10,}$/;\r\n    return phoneRegex.test(phone);\r\n  };\r\n\r\n  const getFieldValidationClass = (field: string, value: string): string => {\r\n    if (!isEditing || !value) return '';\r\n\r\n    let isValid = true;\r\n    switch (field) {\r\n      case 'email':\r\n        isValid = validateEmail(value);\r\n        break;\r\n      case 'phone':\r\n        isValid = validatePhone(value);\r\n        break;\r\n      case 'name':\r\n        isValid = value.trim().length >= 2;\r\n        break;\r\n      default:\r\n        return '';\r\n    }\r\n\r\n    return isValid\r\n      ? 'ring-2 ring-green-500 border-green-500'\r\n      : 'ring-2 ring-red-500 border-red-500';\r\n  };\r\n\r\n  const getValidationIcon = (field: string, value: string) => {\r\n    if (!isEditing || !value) return null;\r\n\r\n    let isValid = true;\r\n    switch (field) {\r\n      case 'email':\r\n        isValid = validateEmail(value);\r\n        break;\r\n      case 'phone':\r\n        isValid = validatePhone(value);\r\n        break;\r\n      case 'name':\r\n        isValid = value.trim().length >= 2;\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n\r\n    return isValid\r\n      ? <CheckCircle size={16} className=": "auth.childrendivdivdivcon",
  ">\r\n          {selectedConversation ? (\r\n            <>\r\n              {/* Messages Header *": "common.selectedconversation",
  ">\r\n        {/* En-tête *": "common.entete8",
  ">\r\n        {/* En-tête */}\r\n        <div className=": "forms.entetedivclassname7",
  ">\r\n        {/* Header avec avatar amélioré *": "common.headeravecavataramel",
  ">\r\n        {/* Header avec avatar amélioré */}\r\n        <div className=": "forms.headeravecavataramel",
  ">\r\n        {/* Icône *": "common.icone",
  ">\r\n        {/* Icône */}\r\n        <div className=": "forms.iconedivclassname",
  ">\r\n        {/* Informations du conteneur *": "common.informationsduconten",
  ">\r\n        {/* Particules flottantes améliorées *": "common.particulesflottantes",
  ">\r\n        {/* Particules flottantes améliorées */}\r\n        <div className=": "forms.particulesflottantes",
  ">\r\n        {notifications.length === 0 ? (\r\n          <div className=": "forms.notificationslength0",
  ">\r\n        {notifications.map((notification) => (\r\n          <div\r\n            key={notification.id}\r\n            className={`p-4 rounded-lg shadow-lg transform transition-all duration-300 ${\r\n              notification.type === ": "forms.notificationsmapnoti",
  ">\r\n      {/* Background animé *": "navigation.backgroundanime2",
  ">\r\n      {/* Background animé */}\r\n      <div className=": "navigation.backgroundanimedivcl2",
  ">\r\n      {/* Background animé spectaculaire *": "navigation.backgroundanimespect1",
  ">\r\n      {/* Background animé spectaculaire */}\r\n      <div className=": "navigation.backgroundanimespect3",
  ">\r\n      {/* Background animé spectaculaire avec tous les effets *": "navigation.backgroundanimespect4",
  ">\r\n      {/* Background animé spectaculaire avec tous les effets */}\r\n      <div className=": "navigation.backgroundanimespect5",
  ">\r\n      {/* Notification Toast améliorée *": "common.notificationtoastame",
  ">\r\n      {/* Notification Toast améliorée */}\r\n      {notification && (\r\n        <div className={`fixed top-4 right-4 z-50 px-6 py-4 rounded-xl shadow-2xl transform transition-all duration-500 border-l-4 backdrop-blur-sm ${notification.type === 'success'\r\n          ? 'bg-green-50 dark:bg-green-900/20 text-green-800 dark:text-green-200 border-green-500 shadow-green-500/20' :\r\n          notification.type === 'error'\r\n            ? 'bg-red-50 dark:bg-red-900/20 text-red-800 dark:text-red-200 border-red-500 shadow-red-500/20' :\r\n            'bg-blue-50 dark:bg-blue-900/20 text-blue-800 dark:text-blue-200 border-blue-500 shadow-blue-500/20'\r\n          } animate-slide-in-right max-w-sm`}>\r\n          <div className=": "navigation.notificationtoastame",
  ">\r\n      {/* Politiques de mots de passe *": "common.politiquesdemotsdepa",
  ">                {/* Sélecteur de réseaux sociaux *": "common.selecteurdereseauxso",
  ">                {/* Sélecteur de réseaux sociaux */}\r\n                <div className=": "forms.selecteurdereseauxso",
  ">) => void;\r\n  removeNotification: (id: string) => void;\r\n  clearNotifications: () => void;\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\r\n\r\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n\r\n  const addNotification = (notification: Omit<Notification, ": "forms.voidremovenotificati",
  ">) => {\r\n    const newNotification: Notification = {\r\n      ...notification,\r\n      id: Math.random().toString(36).substr(2, 9),\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    setNotifications((prev) => [...prev, newNotification]);\r\n\r\n    // Auto-remove notification after 5 seconds\r\n    setTimeout(() => {\r\n      removeNotification(newNotification.id);\r\n    }, 5000);\r\n  };\r\n\r\n  const removeNotification = (id: string) => {\r\n    setNotifications((prev) => prev.filter((notification) => notification.id !== id));\r\n  };\r\n\r\n  const clearNotifications = () => {\r\n    setNotifications([]);\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider\r\n      value={{\r\n        notifications,\r\n        addNotification,\r\n        removeNotification,\r\n        clearNotifications,\r\n      }}\r\n    >\r\n      {children}\r\n      <div className=": "forms.constnewnotification",
  ">) => {\r\n    return {\r\n        ...product,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n    };\r\n};\r\n\r\n// Service pour gérer les produits\r\nexport class ProductService {\r\n\r\n    // Récupérer tous les produits actifs\r\n    static async getAllProducts(): Promise<ProductListItem[]> {\r\n        try {\r\n            const q = query(\r\n                collection(db, PRODUCTS_COLLECTION)\r\n            );\r\n\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            return querySnapshot.docs.map(doc => {\r\n                const product = convertFirestoreProduct(doc);\r\n                return {\r\n                    id: product.id!,\r\n                    name: product.name,\r\n                    price: product.price,\r\n                    moq: product.moq,\r\n                    category: product.category,\r\n                    image: product.images[0]?.url || ": "forms.returnproductcreated2",
  ">) => {\r\n    try {\r\n      const newNotification = await notificationService.createNotification({\r\n        title: notification.title,\r\n        message: notification.message,\r\n        type: notification.type,\r\n        userId: notification.userId,\r\n        priority: notification.priority,\r\n        actionUrl: notification.actionUrl,\r\n        metadata: notification.metadata\r\n      });\r\n      \r\n      // Ajouter à l": "forms.tryconstnewnotificat2",
  ">): Promise<T> {\r\n    try {\r\n      const docData = {\r\n        ...data,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      const docRef = await addDoc(collection(db, this.collectionName), docData);\r\n      \r\n      return {\r\n        ...docData,\r\n        id: docRef.id\r\n      } as T;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la création dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lit un document par ID\r\n   */\r\n  async read(id: string): Promise<T | null> {\r\n    try {\r\n      const docRef = doc(db, this.collectionName, id);\r\n      const docSnap = await getDoc(docRef);\r\n\r\n      if (docSnap.exists()) {\r\n        return {\r\n          id: docSnap.id,\r\n          ...docSnap.data()\r\n        } as T;\r\n      }\r\n\r\n      return null;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la lecture dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Met à jour un document\r\n   *": "forms.promisettryconstdocd",
  ">): Promise<T> {\r\n    try {\r\n      const docData = {\r\n        ...data,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      const docRef = await addDoc(collection(db, this.collectionName), docData);\r\n      \r\n      return {\r\n        ...docData,\r\n        id: docRef.id\r\n      } as T;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la création dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lit un document par ID\r\n   */\r\n  async read(id: string): Promise<T | null> {\r\n    try {\r\n      const docRef = doc(db, this.collectionName, id);\r\n      const docSnap = await getDoc(docRef);\r\n\r\n      if (docSnap.exists()) {\r\n        return {\r\n          id: docSnap.id,\r\n          ...docSnap.data()\r\n        } as T;\r\n      }\r\n\r\n      return null;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la lecture dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Met à jour un document\r\n   */\r\n  async update(id: string, data: Partial<Omit<T, ": "forms.promisettryconstdocd1",
  ">/unité<": "common.unite",
  ">/unité</span>\r\n                                </div>\r\n                                {hasDiscount && (\r\n                                    <div className=": "forms.unitespandivhasdisco",
  ">1 étoile<": "common.1etoile2",
  ">1 étoile</option>\r\n              </select>\r\n            </div>            <div className=": "forms.1etoileoptionselectd",
  ">2 étoiles<": "common.2etoiles2",
  ">2 étoiles</option>\r\n                <option value=": "common.2etoilesoptionoption",
  ">2FA activée<": "common.2faactivee",
  ">2FA activée</h4>\r\n                        <p className=": "forms.2faactiveeh4pclassna",
  ">3 étoiles<": "common.3etoiles2",
  ">3 étoiles</option>\r\n                <option value=": "common.3etoilesoptionoption",
  ">4 étoiles<": "common.4etoiles2",
  ">4 étoiles</option>\r\n                <option value=": "common.4etoilesoptionoption",
  ">5 étoiles<": "common.5etoiles2",
  ">5 étoiles</option>\r\n                <option value=": "common.5etoilesoptionoption",
  "></div>\n\n          {/* Blobs morphiques décoratifs *": "common.divblobsmorphiquesde",
  "></div>\n\n          {/* Blobs morphiques décoratifs */}\n          <div className=": "forms.divblobsmorphiquesde",
  "></div>\n\n          {/* Gradient overlay animé pour garder l": "common.divgradientoverlayan",
  "></div>\n\n          {/* Gradient overlay animé pour garder l'esthétique originale */}\n          <div className=": "forms.divgradientoverlayan",
  "></div>\r\n        \r\n        {/* Particules d'énergie */}\r\n        <div className=": "forms.divparticulesdenergi1",
  "></div>\r\n        \r\n        {/* Particules de lumière *": "common.divparticulesdelumie",
  "></div>\r\n        \r\n        {/* Particules de lumière */}\r\n        <div className=": "forms.divparticulesdelumie",
  "></div>\r\n        \r\n        {/* Pulsations énergétiques *": "common.divpulsationsenerget",
  "></div>\r\n        \r\n        {/* Pulsations énergétiques */}\r\n        <div className=": "forms.divpulsationsenerget",
  "></div>\r\n                                    Connexion en cours...\r\n                                <": "auth.divconnexionencours",
  "></div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Boutons d'édition mobiles */}\r\n                <div className=": "forms.divdivdivdivboutonsd",
  "></div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      {notifications.length > 0 && (\r\n        <div className=": "forms.divdivdivdivfooterno",
  "></div>\r\n                Sauvegarde automatique activée\r\n              <": "common.divsauvegardeautomat",
  "></div>\r\n                Sauvegarde automatique activée\r\n              </div>\r\n              <div className=": "forms.divsauvegardeautomat",
  "></div>\r\n                Synchronisé avec l": "common.divsynchroniseavecl",
  "></div>\r\n                Synchronisé avec l'onglet Découvrir\r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>      {/* Actions et filtres */}\r\n      <div className=": "forms.divsynchroniseaveclo",
  "></div>\r\n              <span>Réservation...<": "common.divspanreservation",
  "></div>\r\n              <span>Réservation...</span>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <CheckCircle className=": "forms.divspanreservationsp",
  "></div>\r\n              Sauvegarde automatique activée\r\n            <": "common.divsauvegardeautomat1",
  "></div>\r\n              Sauvegarde automatique activée\r\n            </div>\r\n            <div className=": "forms.divsauvegardeautomat1",
  "></div>\r\n              Synchronisé avec l": "common.divsynchroniseavecl1",
  "></div>\r\n              Synchronisé avec l'onglet Découvrir\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Actions et filtres */}\r\n      <div className=": "forms.divsynchroniseaveclo1",
  "></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\ninterface Company {\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\ninterface Quote {\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\ninterface Appointment {\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\ninterface Product {\r\n    id: string;\r\n}\r\n\r\nconst OptimizedDashboard: React.FC = memo(() => {\r\n    const { t } = useLanguage();\r\n\r\n    // Requêtes optimisées avec mise en cache\r\n    const { data: companies } = useOptimizedQuery<Company>(": "admin.divdivdivdivinterfac",
  "></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n));\r\n\r\ninterface Company {\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\ninterface Quote {\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\ninterface Appointment {\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\ninterface Product {\r\n    id: string;\r\n}\r\n\r\nconst OptimizedDashboard: React.FC = memo(() => {\r\n    const { t } = useLanguage();\r\n\r\n    // Requêtes optimisées avec mise en cache\r\n    const { data: companies } = useOptimizedQuery<Company>('companies', {\r\n        filter: { status: 'active' },\r\n        select: 'id, status',\r\n        cacheKey: 'active-companies-count',\r\n        cacheTTL: 60000 // 1 minute\r\n    });\r\n\r\n    const { data: quotes } = useOptimizedQuery<Quote>('quotes', {\r\n        filter: { status: 'pending' },\r\n        select: 'id, status',\r\n        cacheKey: 'pending-quotes-count',\r\n        cacheTTL: 30000 // 30 secondes\r\n    });\r\n\r\n    const { data: appointments } = useOptimizedQuery<Appointment>('appointments', {\r\n        filter: { status: 'validated' },\r\n        select: 'id, status',\r\n        cacheKey: 'validated-appointments-count',\r\n        cacheTTL: 60000 // 1 minute\r\n    });\r\n\r\n    const { data: products } = useOptimizedQuery<Product>('products', {\r\n        select: 'id',\r\n        cacheKey: 'products-count',\r\n        cacheTTL: 300000 // 5 minutes\r\n    });\r\n\r\n    // Mémorisation des calculs\r\n    const stats = useMemo(() => ({\r\n        activeClientsCount: companies?.length || 0,\r\n        productsCount: products?.length || 0,\r\n        pendingQuotesCount: quotes?.length || 0,\r\n        upcomingAppointmentsCount: appointments?.length || 0\r\n    }), [companies, products, quotes, appointments]);\r\n\r\n    const trends = useMemo(() => ({\r\n        clientsTrend: { value: 12, isPositive: true },\r\n        quotesTrend: { value: 5, isPositive: true },\r\n        appointmentsTrend: { value: 2, isPositive: false }\r\n    }), []);\r\n\r\n    return (\r\n        <div className=": "forms.divdivdivdivinterfac",
  "></div>\r\n          <span>Connexion...<": "auth.divspanconnexion",
  ">>): Promise<void> {\r\n    try {\r\n      const docRef = doc(db, this.collectionName, id);\r\n      const updateData = {\r\n        ...data,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      await updateDoc(docRef, updateData);\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la mise à jour dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Supprime un document\r\n   */\r\n  async delete(id: string): Promise<void> {\r\n    try {\r\n      const docRef = doc(db, this.collectionName, id);\r\n      await deleteDoc(docRef);\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la suppression dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Liste tous les documents avec options de requête\r\n   *": "forms.promisevoidtryconstd",
  ">>): Promise<void> {\r\n    try {\r\n      const docRef = doc(db, this.collectionName, id);\r\n      const updateData = {\r\n        ...data,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      await updateDoc(docRef, updateData);\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la mise à jour dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Supprime un document\r\n   */\r\n  async delete(id: string): Promise<void> {\r\n    try {\r\n      const docRef = doc(db, this.collectionName, id);\r\n      await deleteDoc(docRef);\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la suppression dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Liste tous les documents avec options de requête\r\n   */\r\n  async list(options: QueryOptions = {}): Promise<T[]> {\r\n    try {\r\n      let q = collection(db, this.collectionName);\r\n      let queryRef: any = q;\r\n\r\n      // Appliquer les filtres\r\n      if (options.filters) {\r\n        for (const filter of options.filters) {\r\n          queryRef = query(queryRef, where(filter.field, filter.operator, filter.value));\r\n        }\r\n      }\r\n\r\n      // Appliquer l": "forms.promisevoidtryconstd1",
  ">Accueil<": "navigation.accueil",
  ">Accès refusé<": "common.accesrefuse",
  ">Accès refusé</h2>\r\n                    <p className=": "forms.accesrefuseh2pclassn",
  ">Accédez rapidement à vos commandes, produits, statistiques et plus encore.<": "ecommerce.accedezrapidementavo1",
  ">Actualités<": "common.actualites",
  ">Actualités</Link></li>\r\n            </ul>\r\n          </div>\r\n\r\n          {/* Colonne 2: Services */}\r\n          <div>\r\n            <h4 className=": "forms.actualiteslinkliuldi",
  ">Administration<": "admin.administration",
  ">Ajouter un nouvel utilisateur<": "forms.ajouterunnouvelutili1",
  ">Ajouter une couche de sécurité supplémentaire<": "forms.ajouterunecouchedese1",
  ">Ajouter une couche de sécurité supplémentaire</p>\r\n            </div>\r\n            <label className=": "forms.ajouterunecouchedese2",
  ">Alertes de sécurité<": "admin.alertesdesecurite3",
  ">Alertes de sécurité</h4>\r\n                <p className=": "forms.alertesdesecuriteh4p",
  ">Alertes par email</p>\r\n                        </div>\r\n                        <button\r\n                          onClick={() => showNotification('success', 'Alertes de connexion activées')}\r\n                          className=": "auth.alertesparemailpdivb",
  ">Annulée<": "common.annulee",
  ">Annulée</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Orders Table */}\r\n        <div className=": "forms.annuleeoptionselectd",
  ">Annulées<": "common.annulees",
  ">Annulées</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Liste des commandes *": "ecommerce.annuleesoptionselect",
  ">Annulées</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Liste des commandes */}\r\n      <div className=": "forms.annuleesoptionselect",
  ">Approuvé<": "common.approuve",
  ">Approuvé</option>\r\n                <option value=": "common.approuveoptionoption",
  ">Approuvés<": "common.approuves4",
  ">Approuvés</option>\r\n                <option value=": "common.approuvesoptionoptio1",
  ">Approuvés</p>\r\n                <p className=": "forms.approuvesppclassname2",
  ">Après échecs de connexion<": "auth.apresechecsdeconnexi3",
  ">Après échecs de connexion</p>\r\n            </div>\r\n            <label className=": "auth.apresechecsdeconnexi4",
  ">Après échecs de connexion</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=": "auth.apresechecsdeconnexi5",
  ">Arrivée<": "common.arrivee",
  ">Arrivée</p>\r\n            <p className=": "forms.arriveeppclassname",
  ">Au moins un caractère spécial<": "common.aumoinsuncaracteresp",
  ">Au moins un caractère spécial</p>\r\n            </div>\r\n            <label className=": "forms.aumoinsuncaracteresp",
  ">Aucun document trouvé<": "common.aucundocumenttrouve1",
  ">Aucun document trouvé</h3>\r\n            <p className=": "forms.aucundocumenttrouveh1",
  ">Aucun utilisateur trouvé.<": "admin.aucunutilisateurtrou",
  ">Aucun utilisateur trouvé.</span>\n        </div>\n        ) : (\n        <table className=": "forms.aucunutilisateurtrou",
  ">Authentification à deux facteurs<": "common.authentificationadeu1",
  ">Authentification à deux facteurs</p>\r\n              <p className=": "forms.authentificationadeu",
  ">Authentification à deux facteurs</p>\r\n            </div>\r\n            <label className=": "forms.authentificationadeu1",
  ">CAPTCHA activé<": "common.captchaactive",
  ">CAPTCHA activé</h4>\r\n              <p className=": "forms.captchaactiveh4pclas",
  ">CE</option>\r\n            </select>\r\n          </div>\r\n\r\n          {/* Quantité minimale *": "common.ceoptionselectdivqua",
  ">CE</option>\r\n            </select>\r\n          </div>\r\n\r\n          {/* Quantité minimale */}\r\n          <div>\r\n            <label className=": "forms.ceoptionselectdivqua",
  ">Capacité disponible<": "common.capacitedisponible",
  ">Capacité disponible</p>\r\n            <p className=": "forms.capacitedisponiblepp",
  ">Capacité totale<": "common.capacitetotale",
  ">Capacité totale</p>\r\n                <p className=": "forms.capacitetotaleppclas",
  ">Capacités logistiques<": "common.capaciteslogistiques",
  ">Capacités logistiques</h3>\r\n                            <div className=": "forms.capaciteslogistiques",
  ">Carrières<": "common.carrieres",
  ">Carrières</Link></li>\r\n              <li><Link to=": "common.carriereslinklililin",
  ">Catalogue personnalisé<": "common.cataloguepersonnalis",
  ">Catalogue personnalisé</span>\r\n                        </div>\r\n\r\n                        <div className=": "forms.cataloguepersonnalis",
  ">Catégorie non trouvée<": "common.categorienontrouvee",
  ">Catégorie non trouvée</h1>\r\n          <p className=": "forms.categorienontrouveeh",
  ">Changements de profil<": "common.changementsdeprofil",
  ">Chargement des données...<": "common.chargementdesdonnees",
  ">Chargement des données...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=": "forms.chargementdesdonnees",
  ">Chargement des recommandations...</div>}>\n            <ProductRecommendations />\n          </React.Suspense>\n        </div>\n      </div>\n\n      {/* Section des cartes produits *": "ecommerce.chargementdesrecomma",
  ">Chargement des utilisateurs...<": "admin.chargementdesutilisa",
  ">Chargement du profil...<": "common.chargementduprofil1",
  ">Chine Ton Usine<": "common.chinetonusine3",
  ">Chine ton usine<": "common.chinetonusine7",
  ">Commandes totales<": "ecommerce.commandestotales",
  ">Commandes<": "ecommerce.commandes7",
  ">Conditions<": "common.conditions",
  ">Confidentialité<": "common.confidentialite1",
  ">Confidentialité</Link></li>\r\n              <li><Link to=": "common.confidentialitelinkl",
  ">Configurée<": "common.configuree",
  ">Configurée</span>\r\n                        <button className=": "forms.configureespanbutton",
  ">Confirmée<": "common.confirmee",
  ">Confirmée</option>\r\n                <option value=": "common.confirmeeoptionoptio",
  ">Confirmées<": "common.confirmees1",
  ">Confirmées</option>\r\n              <option value=": "common.confirmeesoptionopti",
  ">Confirmées</p>\r\n              <p className=": "forms.confirmeesppclassnam",
  ">Connectez-vous simplement avec votre email et mot de passe. Votre rôle sera automatiquement attribué.<": "auth.connectezvoussimplem2",
  ">Connectez-vous simplement avec votre email et mot de passe. Votre rôle sera automatiquement attribué.</div>\r\n          </div>\r\n\r\n          <form className=": "auth.connectezvoussimplem3",
  ">Connexion Admin Rapide<": "auth.connexionadminrapide",
  ">Connexion réussie<": "auth.connexionreussie1",
  ">Connexion réussie</h3>\r\n                                    <p className=": "auth.connexionreussieh3pc",
  ">Connexions depuis nouveaux appareils<": "auth.connexionsdepuisnouv",
  ">Connexions depuis nouveaux appareils</p>\r\n                        </div>\r\n                        <button\r\n                          onClick={() => showNotification('success', 'Alertes de session activées')}\r\n                          className=": "auth.connexionsdepuisnouv1",
  ">Connexions suspectes<": "auth.connexionssuspectes",
  ">Connexions sécurisées<": "auth.connexionssecurisees1",
  ">Connexions sécurisées</p>\r\n                <p className=": "auth.connexionssecurisees2",
  ">Connexions<": "auth.connexions",
  ">Contact<": "common.contact1",
  ">Contrôle d": "common.controled",
  ">Contrôle d'accès et surveillance</h3>\r\n        </div>\r\n\r\n        <div className=": "forms.controledaccesetsurv",
  ">Cookies</Link></li>\r\n            </ul>\r\n          </div>\r\n\r\n          {/* Colonne 5: Contact *": "common.cookieslinkliuldivco",
  ">Créez votre compte facilement. Votre rôle sera automatiquement attribué (Client par défaut, Admin si email admin).<": "auth.creezvotrecomptefaci1",
  ">Créez votre compte facilement. Votre rôle sera automatiquement attribué (Client par défaut, Admin si email admin).</div>\r\n          </div>\r\n\r\n          <form className=": "auth.creezvotrecomptefaci3",
  ">Date de départ<": "common.datededepart",
  ">Date de départ</p>\r\n            <p className=": "forms.datededepartppclassn",
  ">Debug Panel</h3>\r\n\r\n            {/* Favoris *": "common.debugpanelh3favoris",
  ">Dernière sauvegarde<": "common.dernieresauvegarde",
  ">Dernière sauvegarde</span>\r\n                                <span className=": "forms.dernieresauvegardesp",
  ">Des millions d'offres adaptées aux besoins de votre entreprise</div>\r\n      </div>\r\n      {breadcrumb}\r\n      <div className=": "forms.desmillionsdoffresad",
  ">Données collectées<": "common.donneescollectees",
  ">Données collectées</h4>\r\n                      <p className=": "forms.donneescollecteesh4p",
  ">Déconnexion<": "auth.deconnexion1",
  ">Déconnexion</span>\r\n                </button>\r\n                <div className=": "auth.deconnexionspanbutto",
  ">Découvrir les produits<": "ecommerce.decouvrirlesproduits1",
  ">Découvrir les produits</p>\r\n                            </div>\r\n                        </Link>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Features Section */}\r\n            <div className=": "forms.decouvrirlesproduits",
  ">Départ<": "common.depart",
  ">Départ</p>\r\n            <p className=": "forms.departppclassname",
  ">Détection automatique des attaques<": "common.detectionautomatique",
  ">Détection automatique des attaques</p>\r\n            </div>\r\n            <label className=": "forms.detectionautomatique",
  ">Employés<": "common.employes",
  ">Employés</span>\r\n                                        <span className=": "forms.employesspanspanclas",
  ">Erreur de connexion<": "auth.erreurdeconnexion",
  ">Explorez nos catégories<": "common.exploreznoscategorie",
  ">Explorez nos catégories</h2>\r\n        <div className=": "forms.exploreznoscategorie",
  ">Exporter mes données<": "common.exportermesdonnees",
  ">Exporter mes données</h4>\r\n                      <p className=": "forms.exportermesdonneesh4",
  ">Expédition sous 24-48h partout en France<": "common.expeditionsous2448hp3",
  ">Expédition sous 24-48h partout en France</p>\n            </div>\n            <div className=": "forms.expeditionsous2448hp1",
  ">Expéditions<": "common.expeditions1",
  ">Expéditions</option>\r\n                <option value=": "common.expeditionsoptionopt1",
  ">Expédiée<": "common.expediee1",
  ">Expédiée</option>\r\n                <option value=": "common.expedieeoptionoption1",
  ">Expédiées<": "common.expediees3",
  ">Expédiées</option>\r\n              <option value=": "common.expedieesoptionoptio",
  ">Expédiées</p>\r\n                <p className=": "forms.expedieesppclassname1",
  ">Expédiées</p>\r\n              <p className=": "forms.expedieesppclassname2",
  ">Expérience utilisateur<": "admin.experienceutilisateu",
  ">Expérience utilisateur</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=": "forms.experienceutilisateu",
  ">Favoris<": "common.favoris",
  ">Fermé<": "common.ferme",
  ">Fermé</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=": "forms.fermeoptionselectdiv",
  ">Fermés<": "common.fermes",
  ">Fermés</p>\r\n                <p className=": "forms.fermesppclassname",
  ">Fichiers uploadés ({uploadedFiles.length})<": "common.fichiersuploadesuplo",
  ">Fichiers uploadés ({uploadedFiles.length})</h3>\r\n              <div className=": "forms.fichiersuploadesuplo",
  ">Filtres personnalisés<": "common.filtrespersonnalises",
  ">Filtres personnalisés</span>\r\n                        </div>\r\n\r\n                        <div className=": "forms.filtrespersonnalises",
  ">Fondée en<": "common.fondeeen",
  ">Fondée en</span>\r\n                                        <span className=": "forms.fondeeenspanspanclas",
  ">Forcer les connexions sécurisées<": "auth.forcerlesconnexionss1",
  ">Forcer les connexions sécurisées</p>\r\n              </div>\r\n              <label className=": "auth.forcerlesconnexionss2",
  ">Formats supportés: IP unique (192.168.1.1) ou plage CIDR (192.168.1.0": "common.formatssupportesipun1",
  ">Formats supportés: IP unique (192.168.1.1) ou plage CIDR (192.168.1.0/24)</p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=": "forms.formatssupportesipun",
  ">Fournisseurs<": "ecommerce.fournisseurs4",
  ">Français<": "common.francais3",
  ">Français</option>\r\n                      <option value=": "common.francaisoptionoption",
  ">Français</option>\r\n          <option value=": "common.francaisoptionoption1",
  ">Gestion des utilisateurs<": "admin.gestiondesutilisateu2",
  ">Guides</Link></li>\r\n            </ul>\r\n          </div>\r\n\r\n          {/* Colonne 4: Légal *": "common.guideslinkliuldivcol",
  ">Guides</Link></li>\r\n            </ul>\r\n          </div>\r\n\r\n          {/* Colonne 4: Légal */}\r\n          <div>\r\n            <h4 className=": "forms.guideslinkliuldivcol",
  ">Gérez toutes vos commandes ici.<": "ecommerce.gereztoutesvoscomman1",
  ">Gérez vos fournisseurs ici.<": "ecommerce.gerezvosfournisseurs1",
  ">Gérez vos produits ici.<": "ecommerce.gerezvosproduitsici1",
  ">Images uploadées<": "common.imagesuploadees",
  ">Images uploadées</div>\r\n                </div>\r\n                <div className=": "forms.imagesuploadeesdivdi",
  ">Informations commerciales<": "common.informationscommerci",
  ">Informations de base<": "common.informationsdebase1",
  ">Informations de l": "common.informationsdel",
  ">Informations<": "common.informations3",
  ">Journal d'exécution :</span>\r\n                    </div>\r\n                    <pre className=": "forms.journaldexecutionspa",
  ">La catégorie que vous recherchez n": "common.lacategoriequevousre1",
  ">La catégorie que vous recherchez n'existe pas.</p>\r\n          <Link \r\n            to=": "common.lacategoriequevousre2",
  ">Livraison gratuite dès 50€<": "common.livraisongratuitedes",
  ">Livraison gratuite dès 50€</span>\r\n                            </div>\r\n                            <div className=": "forms.livraisongratuitedes",
  ">Livre sterling (£)</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Notifications améliorées *": "common.livresterlingoptions1",
  ">Livre sterling (£)</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Notifications améliorées */}\r\n              <Section icon={<Bell className=": "forms.livresterlingoptions",
  ">Livrée<": "common.livree1",
  ">Livrée</option>\r\n                <option value=": "common.livreeoptionoptionva1",
  ">Livrées<": "common.livrees2",
  ">Livrées</option>\r\n              <option value=": "common.livreesoptionoptionv",
  ">Livrées</p>\r\n                <p className=": "forms.livreesppclassname1",
  ">Légal<": "common.legal",
  ">Légal</h4>\r\n            <ul className=": "forms.legalh4ulclassname",
  ">Messages non lus<": "common.messagesnonlus",
  ">Messages<": "common.messages1",
  ">Modifications importantes</p>\r\n                        </div>\r\n                        <button\r\n                          onClick={() => showNotification('info', 'Alertes de profil désactivées')}\r\n                          className=": "forms.modificationsimporta",
  ">Modifier l": "forms.modifierl1",
  ">Modifiez vos paramètres de compte ici.<": "admin.modifiezvosparametre1",
  ">Non vérifiés<": "common.nonverifies",
  ">Non vérifiés</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Reviews List */}\r\n        <div className=": "forms.nonverifiesoptionsel",
  ">Notifications SMS<": "common.notificationssms",
  ">Notifications email<": "auth.notificationsemail",
  ">Notifications en temps réel<": "common.notificationsentemps1",
  ">Notifications en temps réel</p>\r\n              </div>\r\n              <label className=": "forms.notificationsentemps",
  ">Notifications par email<": "auth.notificationsparemai",
  ">Notifications push<": "common.notificationspush",
  ">Nous contacter<": "common.nouscontacter",
  ">Page non trouvée<": "common.pagenontrouvee",
  ">Page non trouvée</h2>\n      <p className=": "forms.pagenontrouveeh2pcla",
  ">Paiement Sécurisé<": "common.paiementsecurise1",
  ">Paiement Sécurisé</h3>\n              <p className=": "forms.paiementsecuriseh3pc1",
  ">Paramètres<": "admin.parametres3",
  ">Paramètres</h1>\r\n            <p className=": "forms.parametresh1pclassna",
  ">Paramètres</h1>\r\n    <p className=": "forms.parametresh1pclassna1",
  ">Partager les données d": "common.partagerlesdonneesd",
  ">Partager les données d'usage pour améliorer le service</p>\r\n                        </div>\r\n                        <button\r\n                          onClick={() => showNotification('success', 'Partage des statistiques activé')}\r\n                          className=": "forms.partagerlesdonneesdu",
  ">Plus de 1000 fournisseurs vérifiés<": "ecommerce.plusde1000fournisseu1",
  ">Plus de 1000 fournisseurs vérifiés</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section processus détaillé *": "ecommerce.plusde1000fournisseu3",
  ">Plus de 1000 fournisseurs vérifiés</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section processus détaillé */}\n      <div className=": "forms.plusde1000fournisseu1",
  ">Politiques de mots de passe<": "common.politiquesdemotsdepa1",
  ">Possède des entrepôts<": "common.possededesentrepots",
  ">Possède des entrepôts</label>\r\n                                    {formData.hasWarehouses && (\r\n                                        <Input\r\n                                            type=": "common.possededesentrepotsl",
  ">Priorité élevée<": "common.prioriteelevee",
  ">Priorité élevée</p>\r\n                <p className=": "forms.prioriteeleveeppclas",
  ">Prix estimé<": "ecommerce.prixestime",
  ">Prix estimé</p>\r\n              <p className={`text-xl font-bold text-blue-600 dark:text-blue-400 ${priceAnimating ? 'price-animate' : ''\r\n                }`}>\r\n                {estimatedPrice.toLocaleString('fr-FR')} €\r\n              </p>\r\n              <p className=": "forms.prixestimeppclassnam",
  ">Produit certifié</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Spécifications techniques *": "ecommerce.produitcertifiespand",
  ">Produit certifié</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Spécifications techniques */}\r\n                {product.specifications && (\r\n                    <div className=": "forms.produitcertifiespand",
  ">Produit de qualité premium<": "ecommerce.produitdequaliteprem",
  ">Produit de qualité premium</p>\r\n                </div>\r\n                <div className=": "forms.produitdequaliteprem",
  ">Produit non trouvé<": "ecommerce.produitnontrouve1",
  ">Produit non trouvé</h1>\r\n                    <button\r\n                        onClick={() => navigate('/products')}\r\n                        className=": "forms.produitnontrouveh1bu",
  ">Produit non trouvé</h2>\r\n                    <Link to=": "ecommerce.produitnontrouveh2li",
  ">Produits disponibles dans Firebase<": "ecommerce.produitsdisponiblesd",
  ">Produits<": "ecommerce.produits3",
  ">Profil public<": "common.profilpublic",
  ">Préparation<": "common.preparation1",
  ">Préparation</option>\r\n                <option value=": "common.preparationoptionopt",
  ">Préparation</p>\r\n                <p className=": "forms.preparationppclassna",
  ">Prévisualisation non disponible pour ce type de fichier.<": "common.previsualisationnond",
  ">Prévisualisation non disponible pour ce type de fichier.</p>\r\n                <Button\r\n                  onClick={() => window.open(previewUrl, '_blank')}\r\n                  className=": "forms.previsualisationnond",
  ">Prêts<": "common.prets",
  ">Prêts</span>\r\n                        <button className=": "forms.pretsspanbuttonclass",
  ">Qualité<": "common.qualite",
  ">Qualité</Link></li>\r\n              <li><Link to=": "common.qualitelinklililinkt",
  ">Quantité:<": "common.quantite3",
  ">Quantité:</span>\r\n                                <div className=": "forms.quantitespandivclass",
  ">Rapide</span>\r\n                </Button>\r\n            </div>\r\n\r\n            {/* Fonctionnalités *": "common.rapidespanbuttondivf",
  ">Rapide</span>\r\n                </Button>\r\n            </div>\r\n\r\n            {/* Fonctionnalités */}\r\n            <div className=": "forms.rapidespanbuttondivf",
  ">Recevoir des emails promotionnels et newsletters</p>\r\n                        </div>\r\n                        <button\r\n                          onClick={() => showNotification('info', 'Communications marketing désactivées')}\r\n                          className=": "auth.recevoirdesemailspro",
  ">Recherche avancée<": "common.rechercheavancee1",
  ">Recherche avancée</span>\r\n                        </div>\r\n\r\n                        <div className=": "forms.rechercheavanceespan",
  ">Recherche globale<": "common.rechercheglobale",
  ">Recherche intelligente<": "common.rechercheintelligent",
  ">Recommandations de sécurité<": "admin.recommandationsdesec1",
  ">Recommandations de sécurité</h4>\r\n            </div>\r\n            <ul className=": "forms.recommandationsdesec",
  ">Recommandé: 8 caractères minimum<": "common.recommande8caractere",
  ">Recommandé: 8 caractères minimum</p>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=": "forms.recommande8caractere",
  ">Recommandé<": "common.recommande1",
  ">Recommandé</span>\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={createAdminOnly}\r\n                    disabled={isRunning}\r\n                    className=": "forms.recommandespanbutton",
  ">Rejeté<": "common.rejete",
  ">Rejeté</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Moderation Items */}\r\n        <div className=": "forms.rejeteoptionselectdi",
  ">Rejetés<": "common.rejetes2",
  ">Rejetés</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Liste des documents */}\r\n        <div className=": "forms.rejetesoptionselectd1",
  ">Rejetés</p>\r\n                <p className=": "forms.rejetesppclassname",
  ">Restreindre l'accès à certaines IP</p>\r\n            </div>\r\n            <label className=": "forms.restreindrelaccesace",
  ">Réinitialisation des Utilisateurs<": "admin.reinitialisationdesu1",
  ">Réinitialisation des Utilisateurs</h2>\r\n            </div>\r\n\r\n            <div className=": "forms.reinitialisationdesu",
  ">Résultats :<": "common.resultats2",
  ">Résultats :</h3>\r\n                    <pre className=": "forms.resultatsh3preclassn",
  ">Résultats :</h4>\r\n                    <pre className=": "forms.resultatsh4preclassn1",
  ">Rôle:<": "common.role3",
  ">Rôle<": "common.role4",
  ">Rôle</th>\n                <th scope=": "common.roleththscope",
  ">Sans réponse<": "common.sansreponse",
  ">Sans réponse</p>\r\n                <p className=": "forms.sansreponseppclassna",
  ">Score de sécurité<": "admin.scoredesecurite3",
  ">Score de sécurité</h4>\r\n                      <div className=": "forms.scoredesecuriteh4div",
  ">Sessions plus courtes pour les comptes administrateur (recommandé: 60 minutes)<": "admin.sessionspluscourtesp",
  ">Sessions plus courtes pour les comptes administrateur (recommandé: 60 minutes)</p>\r\n          </div>\r\n\r\n          <div className=": "forms.sessionspluscourtesp",
  ">Seuls les administrateurs peuvent accéder à cette page.<": "admin.seulslesadministrate",
  ">Seuls les administrateurs peuvent accéder à cette page.</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadSummary();\r\n    }, []);\r\n\r\n    const loadSummary = async () => {\r\n        try {\r\n            setLoading(true);\r\n\r\n            if ((window as any).productionUserService) {\r\n                const summaryData = await (window as any).productionUserService.getUsersSummary();\r\n                setSummary(summaryData);\r\n            } else {\r\n                setMessage({\r\n                    type: 'error',\r\n                    text: 'Service de gestion des utilisateurs non disponible'\r\n                });\r\n            }\r\n        } catch (error: any) {\r\n            console.error('Erreur chargement résumé:', error);\r\n            setMessage({\r\n                type: 'error',\r\n                text: `Erreur: ${error.message}`\r\n            });\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleCreateEssentialUsers = async () => {\r\n        setIsCreating(true);\r\n        setMessage(null);\r\n\r\n        try {\r\n            if (!(window as any).productionUserService) {\r\n                throw new Error('Service non disponible');\r\n            }\r\n\r\n            const result = await (window as any).productionUserService.createEssentialProductionUsers();\r\n\r\n            if (result.success) {\r\n                setMessage({\r\n                    type: 'success',\r\n                    text: `${result.created.length} utilisateurs essentiels créés avec succès`\r\n                });\r\n\r\n                // Afficher les identifiants dans la console\r\n                console.log('\\n🔐 === IDENTIFIANTS CRÉÉS ===');\r\n                result.credentials.forEach((cred: any) => {\r\n                    console.log(`📧 ${cred.email} | 🔑 ${cred.password} | 👤 ${cred.name}`);\r\n                });\r\n\r\n                await loadSummary();\r\n            } else {\r\n                setMessage({\r\n                    type: 'warning',\r\n                    text: `Création partielle: ${result.created.length} créés, ${result.failed.length} échecs`\r\n                });\r\n            }\r\n\r\n        } catch (error: any) {\r\n            console.error('Erreur création utilisateurs:', error);\r\n            setMessage({\r\n                type: 'error',\r\n                text: `Erreur: ${error.message}`\r\n            });\r\n        } finally {\r\n            setIsCreating(false);\r\n        }\r\n    };\r\n\r\n    const handlePurgeUsers = async () => {\r\n        const confirmed = confirm(`\r\n⚠️ ATTENTION: OPÉRATION IRRÉVERSIBLE\r\n\r\nVous allez supprimer TOUS les utilisateurs existants.\r\n\r\nCette action ne peut pas être annulée.\r\n\r\nÊtes-vous absolument certain de vouloir continuer ?`);\r\n\r\n        if (!confirmed) return;\r\n\r\n        setIsPurging(true);\r\n        setMessage(null);\r\n\r\n        try {\r\n            if (!(window as any).productionUserService) {\r\n                throw new Error('Service non disponible');\r\n            }\r\n\r\n            const result = await (window as any).productionUserService.purgeAllUsers();\r\n\r\n            if (result.success) {\r\n                setMessage({\r\n                    type: 'success',\r\n                    text: `${result.deletedCount} utilisateurs supprimés avec succès`\r\n                });\r\n            } else {\r\n                setMessage({\r\n                    type: 'warning',\r\n                    text: `Suppression partielle: ${result.deletedCount} supprimés, ${result.errors.length} erreurs`\r\n                });\r\n            }\r\n\r\n            await loadSummary();\r\n\r\n        } catch (error: any) {\r\n            console.error('Erreur purge utilisateurs:', error);\r\n            setMessage({\r\n                type: 'error',\r\n                text: `Erreur: ${error.message}`\r\n            });\r\n        } finally {\r\n            setIsPurging(false);\r\n        }\r\n    };\r\n\r\n    const handleCreateUser = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setIsCreating(true);\r\n        setMessage(null);\r\n\r\n        try {\r\n            if (!(window as any).productionUserService) {\r\n                throw new Error('Service non disponible');\r\n            }\r\n\r\n            const result = await (window as any).productionUserService.createProductionUser({\r\n                email: newUser.email,\r\n                password: newUser.password,\r\n                name: newUser.name,\r\n                role: newUser.role,\r\n                isActive: true,\r\n                additionalData: {\r\n                    company: newUser.company || undefined,\r\n                    phone: newUser.phone || undefined\r\n                }\r\n            });\r\n\r\n            if (result.success) {\r\n                setMessage({\r\n                    type: 'success',\r\n                    text: `Utilisateur ${newUser.email} créé avec succès`\r\n                });\r\n\r\n                // Réinitialiser le formulaire\r\n                setNewUser({\r\n                    email: '',\r\n                    password: '',\r\n                    name: '',\r\n                    role: 'customer',\r\n                    company: '',\r\n                    phone: ''\r\n                });\r\n                setShowCreateForm(false);\r\n\r\n                await loadSummary();\r\n            } else {\r\n                setMessage({\r\n                    type: 'error',\r\n                    text: `Erreur: ${result.error}`\r\n                });\r\n            }\r\n\r\n        } catch (error: any) {\r\n            console.error('Erreur création utilisateur:', error);\r\n            setMessage({\r\n                type: 'error',\r\n                text: `Erreur: ${error.message}`\r\n            });\r\n        } finally {\r\n            setIsCreating(false);\r\n        }\r\n    };\r\n\r\n    const downloadCredentials = () => {\r\n        const content = `\r\nIDENTIFIANTS CHINE TON USINE - PRODUCTION\r\n=====================================\r\n\r\nADMINISTRATEURS:\r\n• admin@chinetonusine.com | ProductionAdmin2024!\r\n• admin.backup@chinetonusine.com | BackupAdmin2024!\r\n• support@chinetonusine.com | SupportTeam2024!\r\n\r\nLIENS:\r\n• Connexion: ${window.location.origin}/login\r\n• Admin: ${window.location.origin}/admin/dashboard\r\n\r\nSÉCURITÉ:\r\n• Changez les mots de passe dès la première connexion\r\n• Ne partagez jamais ces identifiants\r\n• Surveillez les connexions suspectes\r\n\r\nDate de génération: ${new Date().toLocaleString()}\r\n`;\r\n\r\n        const blob = new Blob([content], { type: 'text/plain' });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = `chine-ton-usine-credentials-${Date.now()}.txt`;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=": "auth.seulslesadministrate",
  ">Spécifications techniques<": "common.specificationstechni2",
  ">Spécifications techniques</h3>\r\n            <div className=": "forms.specificationstechni2",
  ">Statistiques de sécurité (dernières 24h)<": "admin.statistiquesdesecuri1",
  ">Statistiques de sécurité (dernières 24h)</h3>\r\n        </div>\r\n\r\n        <div className=": "forms.statistiquesdesecuri",
  ">Succès<": "common.succes",
  ">Succès</option>\r\n                            </select>\r\n\r\n                            <select\r\n                                value={filterPriority}\r\n                                onChange={(e) => setFilterPriority(e.target.value)}\r\n                                className=": "forms.succesoptionselectse",
  ">Support 24": "common.support241",
  ">Supprimer le compte<": "forms.supprimerlecompte",
  ">Système<": "common.systeme1",
  ">Système</option>\r\n                <option value=": "common.systemeoptionoptionv1",
  ">Sécurité du compte<": "admin.securiteducompte1",
  ">Sécurité du compte</h3>\r\n        <div className=": "forms.securiteducompteh3di",
  ">Sécurité renforcée<": "admin.securiterenforcee1",
  ">Sécurité renforcée</h3>\r\n                            <p className=": "forms.securiterenforceeh3p",
  ">Sélectionner une catégorie<": "common.selectionnerunecateg1",
  ">Sélectionner une catégorie</option>\r\n                  {categories.map(category => (\r\n                    <option key={category} value={category}>{category}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=": "forms.selectionnerunecateg",
  ">Sélectionner une catégorie</option>\r\n                {categories.map(cat => (\r\n                  <option key={cat} value={cat}>{cat}</option>\r\n                ))}\r\n              </select>\r\n              {errors.category && (\r\n                <p className=": "forms.selectionnerunecateg1",
  ">Taille max</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Informations techniques *": "common.taillemaxdivdivdivdi",
  ">Taux de réussite<": "common.tauxdereussite",
  ">Taux de réussite</div>\r\n                </div>\r\n                <div className=": "forms.tauxdereussitedivdiv",
  ">Temps de recherche:<": "common.tempsderecherche",
  ">Tentatives bloquées<": "common.tentativesbloquees",
  ">Tentatives bloquées</p>\r\n                <p className=": "forms.tentativesbloqueespp",
  ">Tests de débogage Firebase<": "common.testsdedebogagefireb",
  ">Tests de débogage Firebase</h3>\r\n\r\n            <div className=": "forms.testsdedebogagefireb",
  ">Total Produits<": "ecommerce.totalproduits",
  ">Total Utilisateurs<": "admin.totalutilisateurs",
  ">Total dépensé<": "common.totaldepense",
  ">Total dépensé</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Footer */}\r\n                  <div className=": "forms.totaldepensepdivdivf",
  ">Tous les rôles<": "common.touslesroles",
  ">Tous les rôles</option>\r\n                <option value=": "common.touslesrolesoptionop",
  ">Toutes les catégories<": "common.touteslescategories1",
  ">Toutes les catégories</option>\r\n                                {categories.map(cat => (\r\n                                    <option key={cat} value={cat}>{cat}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label className=": "forms.touteslescategorieso",
  ">Toutes les catégories</option>\r\n              {categories.map(cat => (\r\n                <option key={cat} value={cat}>{cat}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=": "forms.touteslescategorieso1",
  ">Toutes les connexions fonctionnent<": "auth.touteslesconnexionsf",
  ">Toutes priorités<": "common.toutespriorites",
  ">Toutes priorités</option>\r\n                                <option value=": "common.toutesprioritesoptio",
  ">Transactions protégées et garanties<": "common.transactionsprotegee1",
  ">Transactions protégées et garanties</p>\n            </div>\n            <div className=": "forms.transactionsprotegee1",
  ">Tri avancé<": "common.triavance",
  ">Tri avancé</span>\r\n                        </div>\r\n\r\n                        <div className=": "forms.triavancespandivdivc",
  ">Très bon<": "common.tresbon",
  ">Très bon</span>\r\n                        <span className=": "forms.tresbonspanspanclass",
  ">Téléchargements<": "common.telechargements4",
  ">Téléchargements</p>\r\n                <p className=": "forms.telechargementsppcla2",
  ">Téléphone</a></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Section copyright simplifiée *": "forms.telephonealiuldivdiv",
  ">Téléphone</a></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Section copyright simplifiée */}\r\n        <div className=": "forms.telephonealiuldivdiv1",
  ">Une équipe dédiée à votre service</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Section unifiée ": "common.uneequipededieeavotr3",
  ">Utilisateurs Actifs<": "admin.utilisateursactifs",
  ">Utilisateurs totaux<": "admin.utilisateurstotaux",
  ">Utilisateurs<": "admin.utilisateurs",
  ">Votre profil est visible par les autres utilisateurs<": "admin.votreprofilestvisibl",
  ">Votre profil est visible par les autres utilisateurs</p>\r\n                        </div>\r\n                        <button\r\n                          onClick={() => showNotification('info', 'Visibilité du profil modifiée')}\r\n                          className=": "forms.votreprofilestvisibl",
  ">Vous êtes identifié comme administrateur. Aucune sélection de rôle nécessaire.<": "admin.vousetesidentifiecom",
  ">Vous êtes identifié comme administrateur. Aucune sélection de rôle nécessaire.</div>\n              </div>\n            )}\n\n            <Input\n              type=": "admin.vousetesidentifiecom1",
  ">Véhicules logistiques<": "common.vehiculeslogistiques",
  ">Véhicules logistiques</label>\r\n                                    {formData.hasLogisticsVehicles && (\r\n                                        <Input\r\n                                            type=": "common.vehiculeslogistiques1",
  ">Vérification de la session...<": "common.verificationdelasess",
  ">Vérification de la session...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=": "forms.verificationdelasess",
  ">Vérification des permissions...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Navigate to={redirectTo} replace />;\n  }\n\n  if (!allowedRoles.includes(user.role)) {\n    // Redirection intelligente basée sur le rôle de l": "admin.verificationdespermi",
  ">Vérifiés<": "common.verifies",
  ">Vérifiés</option>\r\n                <option value=": "common.verifiesoptionoption",
  ">Yuan Chinois (¥)<": "common.yuanchinois",
  ">Yuan chinois (¥)<": "common.yuanchinois1",
  ">[]): Promise<T[]> {\r\n    try {\r\n      const batch = writeBatch(db);\r\n      const results: T[] = [];\r\n\r\n      for (const docData of documents) {\r\n        const docRef = doc(collection(db, this.collectionName));\r\n        const dataWithTimestamps = {\r\n          ...docData,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        };\r\n        \r\n        batch.set(docRef, dataWithTimestamps);\r\n        results.push({\r\n          ...dataWithTimestamps,\r\n          id: docRef.id\r\n        } as T);\r\n      }\r\n\r\n      await batch.commit();\r\n      return results;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la création en lot dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  ": "forms.promisettryconstbatc",
  ">[]): Promise<T[]> {\r\n    try {\r\n      const batch = writeBatch(db);\r\n      const results: T[] = [];\r\n\r\n      for (const docData of documents) {\r\n        const docRef = doc(collection(db, this.collectionName));\r\n        const dataWithTimestamps = {\r\n          ...docData,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        };\r\n        \r\n        batch.set(docRef, dataWithTimestamps);\r\n        results.push({\r\n          ...dataWithTimestamps,\r\n          id: docRef.id\r\n        } as T);\r\n      }\r\n\r\n      await batch.commit();\r\n      return results;\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la création en lot dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Suppression en lot\r\n   */\r\n  async deleteBatch(ids: string[]): Promise<void> {\r\n    try {\r\n      const batch = writeBatch(db);\r\n\r\n      for (const id of ids) {\r\n        const docRef = doc(db, this.collectionName, id);\r\n        batch.delete(docRef);\r\n      }\r\n\r\n      await batch.commit();\r\n    } catch (error) {\r\n      console.error(`Erreur lors de la suppression en lot dans ${this.collectionName}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utilitaire pour obtenir une valeur nested dans un objet\r\n   */\r\n  private getNestedValue(obj: any, path: string): any {\r\n    return path.split(": "forms.promisettryconstbatc1",
  ">http://localhost:5174/login</code>\r\n                                    <br />\r\n                                    2. Utilisez un des comptes admin ci-dessus\r\n                                    <br />\r\n                                    3. Accédez au tableau de bord admin\r\n                                <": "auth.httplocalhost5174log1",
  ">http://localhost:5174/login</code>\r\n                                    <br />\r\n                                    2. Utilisez un des comptes admin ci-dessus\r\n                                    <br />\r\n                                    3. Accédez au tableau de bord admin\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Erreur */}\r\n            {ultimateResult && !ultimateResult.success && (\r\n                <div className=": "auth.httplocalhost5174log2",
  ">vs période précédente<": "navigation.vsperiodeprecedente3",
  ">vs période précédente</span>\r\n                </div>\r\n              </div>\r\n              <DollarSign className=": "navigation.vsperiodeprecedentes",
  ">vs période précédente</span>\r\n                </div>\r\n              </div>\r\n              <Package className=": "navigation.vsperiodeprecedentes1",
  ">vs période précédente</span>\r\n                </div>\r\n              </div>\r\n              <ShoppingBag className=": "navigation.vsperiodeprecedentes2",
  ">vs période précédente</span>\r\n                </div>\r\n              </div>\r\n              <Users className=": "navigation.vsperiodeprecedentes3",
  ">{Math.floor(productsList.length * 0.8)}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Liste des produits *": "ecommerce.mathfloorproductslis2",
  ">{availableCapacity} CBM</p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Slider de sélection *": "common.availablecapacitycbm",
  ">{availableCapacity} CBM</p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Slider de sélection */}\r\n        <div className=": "forms.availablecapacitycbm",
  ">{categories.find(c => c.key === activeCategory)?.label}</span>\r\n    </nav>\r\n  ) : null;\r\n\r\n  // Gestion du clic sur une catégorie\r\n  const handleCategoryClick = (catKey: string) => {\r\n    navigate(`": "common.categoriesfindcckeya",
  ">{categories.find(c => c.key === activeCategory)?.label}</span>\r\n    </nav>\r\n  ) : null;\r\n\r\n  // Gestion du clic sur une catégorie\r\n  const handleCategoryClick = (catKey: string) => {\r\n    navigate(`/search?category=${catKey}`);\r\n  };\r\n\r\n  // Bouton ": "common.categoriesfindcckeya1",
  ">{errors.description}</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Prix et catégorie *": "ecommerce.errorsdescriptionpdi",
  ">{errors.description}</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* Prix et catégorie */}\r\n          <div className=": "forms.errorsdescriptionpdi",
  ">{error}</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {notifications.length === 0 && !loading ? (\r\n            <div className=": "forms.errorpdivdivnotifica1",
  ">{error}</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Test Component - SÉCURISÉS SEULEMENT (pas de Firebase Auth) */}\r\n        <UltimateUserPanel />\r\n        <UserResetPanel />\r\n        <AdminDiagnosticPanel />\r\n        <AdminCreationPanel />\r\n        <QuickAdminLogin />\r\n        {/* 🚨 COMPOSANTS DÉSACTIVÉS - ils utilisent Firebase Auth et causent la déconnexion *": "auth.errorpdivtestcompone1",
  ">{filteredUsers.length} utilisateur(s) trouvé(s)<": "admin.filtereduserslengthu",
  ">{filteredUsers.length} utilisateur(s) trouvé(s)</p>\n        </div>\n        <div className=": "forms.filtereduserslengthu",
  ">{product.price.toFixed(2)}€ / unité<": "ecommerce.productpricetofixed2",
  ">{product.price.toFixed(2)}€ / unité</p>\r\n                                <p className=": "forms.productpricetofixed2",
  ">{selectedUser.email}</span> ? Cette action est irréversible.\n            <": "auth.selecteduseremailspa1",
  ">{selectedUser.email}</span> ? Cette action est irréversible.\n            </p>\n            {error && <div className=": "auth.selecteduseremailspa3",
  ">{success}</div>}\n            <form onSubmit={async (e) => {\n              e.preventDefault();\n              setError('');\n              setSuccess('');\n              setLoading(true);\n              try {\n                await userService.updateUser(selectedUser.id, { email, name, role });\n                setSuccess('Utilisateur mis à jour avec succès');\n                setShowEditUserModal(false);\n                resetForm();\n                loadUsers();\n              } catch (err: unknown) {\n                console.error('Erreur lors de la mise à jour:', err);\n                setError(err instanceof Error ? err.message : 'Erreur lors de la mise à jour de l\\'utilisateur');\n              } finally {\n                setLoading(false);\n              }\n            }} className=": "auth.successdivformonsubm1",
  ">{success}</p>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Bouton de connexion *": "auth.successpdivdivbouton",
  ">{t('loginDescription', 'Accédez à votre compte')}</p>\r\n          </div>\r\n\r\n          {error && (\r\n            <div className=": "auth.tlogindescriptionacc",
  ">{t('role.influencer')}</option>}\r\n              </select>\r\n            </div>\r\n\r\n            {/* Messages personnalisés pour inscription uniquement */}\r\n            {!isLoginMode && (\r\n              <>\r\n                {/* Message personnalisé pour les fournisseurs */}\r\n                {selectedRole === 'supplier' && (\r\n                  <div className=": "auth.troleinfluenceroptio",
  ">{t('shareStatsAgreement')}</span>\r\n                  </label>                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Champs spécifiques pour les fournisseurs */}\r\n            {!isLoginMode && selectedRole === 'supplier' && (\r\n              <div className=": "auth.tsharestatsagreement",
  ">{t('sourcer.registration.validation')}</p>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}            {/* Mot de passe - masqué pour fournisseurs, sourceurs et influenceurs en mode inscription */}\r\n            {(isLoginMode || (selectedRole !== 'supplier' && selectedRole !== 'sourcer' && selectedRole !== 'influencer')) && (\r\n              <div className=": "auth.tsourcerregistration",
  ">{t('supplier.categories.other')}</option>\r\n                  </select>\r\n                </div>\r\n\r\n                {/* Capacité de production mensuelle */}\r\n                <div className=": "forms.tsuppliercategorieso",
  ">{t('supplier.registration.validation')}</p>\r\n                    </div>\r\n                  </div>\r\n                )}                {/* Message personnalisé pour les influenceurs */}\r\n                {selectedRole === 'influencer' && (\r\n                  <div className=": "forms.tsupplierregistratio1",
  ">{t('supplier.settings.changePassword')}</Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderTabContent = () => {\r\n    switch (activeTab) {\r\n      case 'company':\r\n        return renderCompanySettings();\r\n      case 'profile':\r\n        return renderCompanySettings(); // Simplifié pour l'exemple\r\n      case 'notifications':\r\n        return renderNotificationSettings();\r\n      case 'security':\r\n        return renderSecuritySettings();\r\n      case 'billing':\r\n        return renderCompanySettings(); // Simplifié pour l'exemple\r\n      default:\r\n        return renderCompanySettings();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SupplierLayout>      <div className=": "auth.tsuppliersettingscha",
  ">{unreadCount}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Filtres et recherche *": "common.unreadcountpdivdivdi",
  ">À propos<": "common.apropos1",
  ">À propos</Link></li>\r\n              <li><Link to=": "common.aproposlinklililinkt",
  ">Échap<": "common.echap",
  ">Élevée<": "common.elevee",
  ">Élevée</option>\r\n                                <option value=": "common.eleveeoptionoptionva",
  ">🌟 Connexion Universelle<": "auth.connexionuniverselle4",
  ">📁</div>\r\n            <p>Aucun fichier dans cette catégorie<": "common.divpaucunfichierdans",
  ">📁</div>\r\n            <p>Aucun fichier dans cette catégorie</p>\r\n          </div>\r\n        ) : (\r\n          <div className=": "forms.divpaucunfichierdans",
  ">🔍 Debug Auth</h4>\r\n            <div>\r\n                <strong>Loading:</strong> {loading ? 'Oui' : 'Non'}\r\n            </div>\r\n            <div>\r\n                <strong>User:</strong> {user ? `${user.name} (${user.role})` : 'Non connecté'}\r\n            </div>\r\n            {user && (\r\n                <div>\r\n                    <strong>ID:</strong> {user.id}\r\n                </div>\r\n            )}\r\n            <div className=": "forms.debugauthh4divstrong",
  ">🔐 Connexion Administrateur<": "auth.connexionadministrat",
  "ABS, Cuir synthétique, Mousse à mémoire de forme": "common.abscuirsynthetiquemo1",
  "ABS, Métal brossé": "common.absmetalbrosse1",
  "Accepté": "common.accepte1",
  "Accessoires électroniques": "common.accessoireselectroni1",
  "Accueil": "navigation.accueil3",
  "Accès illimité au catalogue": "common.accesillimiteaucatal1",
  "Accès limité au catalogue (20 produits": "ecommerce.acceslimiteaucatalog1",
  "Accès limité au catalogue (20 produits/jour)": "ecommerce.acceslimiteaucatalog2",
  "Accédez à votre compte": "common.accedezavotrecompte3",
  "Accédez à votre espace personnel": "common.accedezavotreespacep1",
  "Aceito os termos e condições": "common.aceitoostermosecondi1",
  "Acepto los términos y condiciones": "common.aceptolosterminosyco1",
  "Acheter des produits aux fournisseurs": "ecommerce.acheterdesproduitsau",
  "Action sensible ! Contactez le support pour cette demande.": "common.actionsensiblecontac",
  "Activité récente": "common.activiterecente4",
  "Actualités et promotions": "common.actualitesetpromotio1",
  "Admin SDK ou Cloud Functions\r\n\r\n            // Générer un UID temporaire\r\n            const tempUID = `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n            // Créer le document utilisateur dans Firestore seulement\r\n            const userDoc: Omit<AdminUser, ": "admin.adminsdkoucloudfunct2",
  "Admin SDK)\r\n            const fakeUID = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n            // Créer le document utilisateur dans Firestore\r\n            const userDoc: Omit<AdminUser, ": "admin.adminsdkconstfakeuid",
  "Agent personnel dédié": "common.agentpersonneldedie1",
  "Aider les clients à trouver les meilleurs fournisseurs": "ecommerce.aiderlesclientsatrou2",
  "Ajouter au devis": "forms.ajouteraudevis6",
  "Ajouter fournisseur": "forms.ajouterfournisseur",
  "Ajouter un article": "forms.ajouterunarticle",
  "Ajouter un produit": "forms.ajouterunproduit5",
  "Ajouter un tag...": "forms.ajouteruntag",
  "Ajouté": "common.ajoute1",
  "Alertes de connexion activées": "auth.alertesdeconnexionac2",
  "Alertes de profil désactivées": "common.alertesdeprofildesac2",
  "Alertes de session activées": "common.alertesdesessionacti1",
  "All notifications have been loaded": "common.allnotificationshave",
  "Allemagne": "common.allemagne",
  "Alliage ultra-léger": "common.alliageultraleger1",
  "Anglais": "common.anglais5",
  "Annulé par le client": "common.annuleparleclient1",
  "Annulée": "common.annulee4",
  "Année": "common.annee3",
  "Ao continuar, você aceita nossos": "common.aocontinuarvoceaceit1",
  "Août": "common.aout1",
  "Aperçu plein écran": "common.apercupleinecran1",
  "Aperçu plein écran (fonctionnalité à implémenter)": "common.apercupleinecranfonc1",
  "Approuvé": "common.approuve6",
  "Armação de óculos de titânio": "common.armacodeculosdetitan1",
  "Aspirador Robô Inteligente": "common.aspiradorrobointelig1",
  "Aspirador robô inteligente": "common.aspiradorrobointelig5",
  "Aspirador robô inteligente com navegação a laser e estação de carregamento automático.": "common.aspiradorrobointelig7",
  "Assistance dédiée en français": "common.assistancededieeenfr2",
  "Aucun compte associé à cette adresse email": "auth.aucuncompteassocieac1",
  "Aucun fichier valide sélectionné": "common.aucunfichiervalidese1",
  "Aucun produit trouvé": "ecommerce.aucunproduittrouve3",
  "Aucun élément trouvé": "common.aucunelementtrouve1",
  "Aucune alerte ne correspond aux filtres appliqués.": "common.aucunealertenecorres1",
  "Aucune carte trouvée": "ecommerce.aucunecartetrouvee1",
  "Aucune donnée": "common.aucunedonnee1",
  "Aucune entreprise trouvée": "common.aucuneentreprisetrou1",
  "Authentification à deux facteurs": "common.authentificationadeu3",
  "Authentification à deux facteurs (2FA)": "common.authentificationadeu5",
  "Autonomie écouteurs": "forms.autonomieecouteurs1",
  "Autres et général": "common.autresetgeneral1",
  "Avez-vous reçu le devis ?": "common.avezvousreculedevis1",
  "Avis contenant un langage inapproprié": "common.aviscontenantunlanga1",
  "Avis inapproprié": "common.avisinapproprie1",
  "Avis validé après révision - pas de contenu inapproprié détecté.": "common.avisvalideapresrevis1",
  "Base de données": "common.basededonnees1",
  "Base de données déjà initialisée": "common.basededonneesdejaini",
  "Beauté": "common.beaute19",
  "Beauté & Santé": "common.beautesante1",
  "Beijing Machinery Works": "common.beijingmachinerywork2",
  "Beijing, Chine": "common.beijingchine2",
  "Berlin, Allemagne": "common.berlinallemagne",
  "Beyoncé": "common.beyonce1",
  "Biologische vochtinbrengende crème": "common.biologischevochtinbr3",
  "Bleu océan": "common.bleuocean",
  "Bonjour ! Oui, nous avons bien 100 unités en stock. Le délai de livraison est de 14 jours ouvrés. Souhaitez-vous procéder à la commande ?": "ecommerce.bonjourouinousavonsb2",
  "Bonjour Marie, votre commande a bien été expédiée et sera livrée demain avant 18h. Vous recevrez un SMS de confirmation.": "ecommerce.bonjourmarievotrecom2",
  "Bonjour, je représente une boutique de mode et je souhaiterais obtenir un devis pour une commande de 100 articles textiles. Pouvez-vous me faire une offre personnalisée ?": "ecommerce.bonjourjerepresenteu2",
  "Bonjour, je souhaiterais savoir si ma commande de smartphones sera bien livrée demain comme prévu ?": "forms.bonjourjesouhaiterai2",
  "Bonjour, je suis intéressé par ce produit...": "ecommerce.bonjourjesuisinteres2",
  "Bonjour, je suis intéressé par vos smartphones. Pouvez-vous me confirmer la disponibilité pour une commande de 100 unités ?": "forms.bonjourjesuisinteres2",
  "Bonne qualité sonore": "common.bonnequalitesonore1",
  "Bordeaux, France": "common.bordeauxfrance",
  "Boîte à Outils": "common.boiteaoutils1",
  "Boîtier de charge ouvert": "common.boitierdechargeouver1",
  "Bras articulé en action": "common.brasarticuleenaction1",
  "Brésil": "common.bresil1",
  "Bureau ergonomique réglable": "forms.bureauergonomiquereg3",
  "Campagne été 2024": "common.campagneete20243",
  "Caméra": "common.camera1",
  "Canapés modulaires": "common.canapesmodulaires1",
  "Capacité": "common.capacite2",
  "Capacité de production mensuelle": "ecommerce.capacitedeproduction1",
  "Capacité disponible": "common.capacitedisponible4",
  "Capacité laptop": "common.capacitelaptop1",
  "Capacité totale": "common.capacitetotale2",
  "Capacité utilisée": "common.capaciteutilisee2",
  "Cardiaque, GPS, Accéléromètre": "common.cardiaquegpsaccelero1",
  "Carregando contêineres...": "common.carregandoconteinere1",
  "Casque audio sans fil avec une qualité sonore élevée et un ajustement confortable.": "common.casqueaudiosansfilav1",
  "Catégorie": "common.categorie15",
  "Catégorie d": "common.categoried",
  "Catégorie d'influence": "common.categoriedinfluence",
  "Catégorie de produits": "ecommerce.categoriedeproduits2",
  "Ce compte a été désactivé": "common.cecompteaetedesactiv1",
  "Ce conteneur est clôturé et n": "common.ceconteneurestclotur",
  "Ce conteneur est clôturé et n'est plus réservable.": "common.ceconteneurestclotur1",
  "Ce conteneur est disponible pour de nouvelles réservations.": "common.ceconteneurestdispon1",
  "Ce conteneur est presque plein, réservez vite !": "common.ceconteneurestpresqu1",
  "Ce produit semble être une contrefaçon. Le prix est anormalement bas et les images ne correspondent pas à un vrai iPhone.": "forms.ceproduitsembleetreu1",
  "Certificat CE manquant pour 2 produits": "ecommerce.certificatcemanquant",
  "Certification des produits": "ecommerce.certificationdesprod",
  "Certificats de qualité Q4 2023.pdf": "common.certificatsdequalite1",
  "Certificats de qualité pour le Q4 2023": "common.certificatsdequalite3",
  "Certifié CE": "common.certifiece1",
  "Cet email est déjà utilisé": "auth.cetemailestdejautili11",
  "Cet email est déjà utilisé dans Firebase Auth": "auth.cetemailestdejautili13",
  "Cet utilisateur a créé 5 comptes avec des emails similaires en 24h.": "auth.cetutilisateuracree51",
  "Cette adresse email est déjà utilisée": "auth.cetteadresseemailest1",
  "Changer la langue": "common.changerlalangue1",
  "Changer le thème": "common.changerletheme3",
  "Chargement des données...": "common.chargementdesdonnees2",
  "Chargeur sans fil vue de profil": "common.chargeursansfilvuede",
  "Chaussures de sécurité": "admin.chaussuresdesecurite5",
  "Chine": "common.chine3",
  "Chine Ton Usine": "common.chinetonusine9",
  "Chine Ton Usine Support": "common.chinetonusinesupport",
  "Chine ton usine": "common.chinetonusine11",
  "ChineTonUsine": "common.chinetonusine14",
  "ChineTonUsine Admin": "admin.chinetonusineadmin1",
  "Clic: déconnexion normale | Double-clic: déconnexion d": "auth.clicdeconnexionnorma1",
  "Clic: déconnexion normale | Double-clic: déconnexion d'urgence": "auth.clicdeconnexionnorma2",
  "Club de football professionnel français": "common.clubdefootballprofes2",
  "Clôturé": "common.cloture1",
  "Collaboration créée:": "common.collaborationcreee1",
  "Commande #CMD-001 passée": "ecommerce.commandecmd001passee1",
  "Commande livrée à Jean Martin": "ecommerce.commandelivreeajeanm1",
  "Commandes": "ecommerce.commandes12",
  "Commencez à importer depuis la Chine dès aujourd": "common.commencezaimporterde1",
  "Commencez à importer depuis la Chine dès aujourd'hui.": "common.commencezaimporterde2",
  "Comment ça marche ?": "common.commentcamarche3",
  "Communication, Multimédia": "common.communicationmultime1",
  "Communications marketing désactivées": "common.communicationsmarket1",
  "Comparez les fournisseurs selon vos critères de qualité et de prix": "ecommerce.comparezlesfournisse2",
  "Compartiments intérieurs": "common.compartimentsinterie1",
  "Compatibilité": "common.compatibilite3",
  "Composants électroniques": "common.composantselectroniq3",
  "Compte désactivé. Contactez l\\": "common.comptedesactiveconta2",
  "Conditions d\\": "common.conditionsd1",
  "Conditions générales.pdf": "common.conditionsgeneralesp5",
  "Configurez votre compte et vos préférences": "common.configurezvotrecompt4",
  "Confirmar pré-pedido": "common.confirmarprepedido1",
  "Confirmer la précommande": "ecommerce.confirmerlaprecomman1",
  "Confirmer le nouveau mot de passe": "auth.confirmerlenouveaumo1",
  "Confirmez votre nouveau mot de passe": "auth.confirmezvotrenouvea",
  "Confirmée": "common.confirmee2",
  "Connectez-vous pour accéder à votre compte": "common.connectezvouspouracc1",
  "Connectez-vous pour accéder à votre espace": "common.connectezvouspouracc3",
  "Connectez-vous pour accéder à votre espace et découvrir les dernières opportunités commerciales": "common.connectezvouspouracc5",
  "Connectez-vous pour accéder à votre espace et découvrir les dernières opportunités commerciales avec la Chine.": "common.connectezvouspouracc11",
  "Connectivité": "common.connectivite3",
  "Connexion": "auth.connexion4",
  "Connexion Google depuis le contexte:": "auth.connexiongoogledepui",
  "Connexion Google non disponible en production. Utilisez email": "auth.connexiongooglenondi",
  "Connexion Google réussie": "auth.connexiongooglereuss5",
  "Connexion réussie": "auth.connexionreussie3",
  "Connexion réussie depuis le contexte": "auth.connexionreussiedepu2",
  "Connexion...": "auth.connexion9",
  "Connexions": "auth.connexions1",
  "Console de jeu nouvelle génération": "common.consoledejeunouvelle1",
  "Consultez et répondez aux avis de vos clients": "common.consultezetrepondeza2",
  "Contacts fournisseurs illimités": "ecommerce.contactsfournisseurs2",
  "Conteneur Chine-Berlin #002": "common.conteneurchineberlin",
  "Conteneur Chine-Londres #004": "common.conteneurchinelondre",
  "Conteneur Chine-New York #003": "common.conteneurchinenewyor",
  "Conteneur Chine-Paris #001": "common.conteneurchineparis0",
  "Conteneur Chine-Sydney #005": "common.conteneurchinesydney",
  "Conteneur créé avec succès": "common.conteneurcreeavecsuc1",
  "Conteneur mis à jour avec succès": "common.conteneurmisajourave",
  "Conteneur non disponible ou clôturé": "common.conteneurnondisponib1",
  "Conteneur non trouvé": "common.conteneurnontrouve",
  "Conteneur supprimé avec succès": "common.conteneursupprimeave1",
  "Conteneurs personnalisés": "common.conteneurspersonnali1",
  "Contêineres": "common.conteineres1",
  "Cosmétiques": "common.cosmetiques3",
  "Cosmétiques, soins et beauté.": "common.cosmetiquessoinsetbe1",
  "Coup de foudre inévitable.": "common.coupdefoudreinevitab9",
  "Coussin Décoratif": "common.coussindecoratif1",
  "Creme hidratante orgânico": "common.cremehidratanteorgan3",
  "Crie sua conta para começar": "common.criesuacontaparacome1",
  "Crème Hydratante": "common.cremehydratante1",
  "Crème hydratante anti-âge": "common.cremehydratanteantia5",
  "Crème hydratante bio": "common.cremehydratantebio5",
  "Créateur de contenu lifestyle et voyages": "common.createurdecontenulif1",
  "Créatif": "common.creatif1",
  "Création du compte...": "common.creationducompte1",
  "Création...": "common.creation14",
  "Créer": "common.creer2",
  "Créer Admin Par Défaut": "admin.creeradminpardefaut2",
  "Créer Plusieurs Admins Test": "admin.creerplusieursadmins2",
  "Créer Utilisateur (Test Direct)": "admin.creerutilisateurtest2",
  "Créer ce Compte Admin": "admin.creercecompteadmin2",
  "Créer l\\": "common.creerl5",
  "Créer mon compte": "common.creermoncompte5",
  "Créer un compte": "common.creeruncompte16",
  "Créer un compte gratuitement": "common.creeruncomptegratuit2",
  "Créer une nouvelle fiche produit": "ecommerce.creerunenouvellefich5",
  "Créez et personnalisez vos cartes de visite professionnelles. Partagez-les facilement avec vos clients et partenaires.": "ecommerce.creezetpersonnalisez1",
  "Créez votre compte en quelques étapes": "common.creezvotrecompteenqu1",
  "Créez votre compte et découvrez toutes les opportunités d": "common.creezvotrecompteetde1",
  "Créez votre compte et découvrez toutes les opportunités d'affaires avec la Chine": "common.creezvotrecompteetde3",
  "Créez votre compte et découvrez toutes les opportunités d\\": "common.creezvotrecompteetde5",
  "Créez votre compte pour commencer": "common.creezvotrecomptepour1",
  "Créez votre première carte de visite personnalisée": "ecommerce.creezvotrepremiereca1",
  "Câbles USB-C": "common.cablesusbc1",
  "Câmera": "common.camera3",
  "Date de départ estimée": "common.datededepartestimee2",
  "Date reçue:": "common.daterecue1",
  "Debes aceptar los términos y condiciones": "common.debesaceptarlostermi1",
  "Demande de devis pour commande groupée": "ecommerce.demandededevispourco3",
  "Dernière commande": "ecommerce.dernierecommande1",
  "Des milliers de fournisseurs vérifiés vous attendent.": "ecommerce.desmilliersdefournis2",
  "Design artistique et coloré": "common.designartistiqueetco1",
  "Design épuré avec gradients": "common.designepureavecgradi1",
  "Devise préférée": "common.devisepreferee2",
  "Dinar Algérien (DA)": "common.dinaralgerienda1",
  "Divers et général.": "common.diversetgeneral1",
  "Document supprimé avec succès !": "common.documentsupprimeavec",
  "Documents approuvés": "common.documentsapprouves1",
  "Documents uploadés:": "common.documentsuploades1",
  "Dollar américain": "common.dollaramericain1",
  "Dongguan, Chine": "common.dongguanchine1",
  "Données personnelles et confidentialité": "common.donneespersonnellese2",
  "Données présentes": "common.donneespresentes1",
  "Données restaurées aux valeurs par défaut !": "common.donneesrestaureesaux1",
  "DÉCORATION & MOBILIER": "common.decorationmobilier5",
  "DÉCOUVREZ TOUS NOS": "common.decouvreztousnos1",
  "Déc": "common.dec1",
  "Déconnecté": "common.deconnecte1",
  "Déconnexion": "auth.deconnexion4",
  "Déconnexion complète": "auth.deconnexioncomplete2",
  "Déconnexion depuis le contexte...": "auth.deconnexiondepuislec2",
  "Découvrez les cartes de visite de ce fournisseur et téléchargez-les pour vos contacts.": "ecommerce.decouvrezlescartesde2",
  "Découvrez notre sélection personnalisée de produits": "ecommerce.decouvreznotreselect2",
  "Découvrir": "common.decouvrir3",
  "Découvrir tous les fournisseurs": "ecommerce.decouvrirtouslesfour9",
  "Décrivez votre produit...": "ecommerce.decrivezvotreproduit1",
  "Décrivez votre projet...": "common.decrivezvotreprojet1",
  "Déjà dans le devis": "common.dejadansledevis5",
  "Déjà un compte ?": "common.dejauncompte1",
  "Délai d": "common.delaid2",
  "Délai d'expiration de session": "common.delaidexpirationdese1",
  "Déposez vos images ici": "common.deposezvosimagesici2",
  "Détaillant": "common.detaillant1",
  "Déçu de la batterie": "common.decudelabatterie1",
  "Effectuez vos paiements en toute confiance avec notre système sécurisé": "common.effectuezvospaiement1",
  "Eletrônicos": "common.eletronicos1",
  "Email de contact": "auth.emaildecontact",
  "Email non confirmé": "auth.emailnonconfirme1",
  "Email é obrigatório": "auth.emaileobrigatrio1",
  "Emballage biodégradable": "common.emballagebiodegradab1",
  "Emballages beauté": "common.emballagesbeaute1",
  "En continuant, vous acceptez nos conditions d": "common.encontinuantvousacce",
  "En continuant, vous acceptez nos conditions d'utilisation et notre politique de confidentialité.": "common.encontinuantvousacce1",
  "Enregistrer": "forms.enregistrer",
  "Enregistrer les modifications": "forms.enregistrerlesmodifi1",
  "Entrepreneur, influenceuse mode et beauté": "common.entrepreneurinfluenc1",
  "Entreprise Solutions France": "common.entreprisesolutionsf1",
  "Entrez en contact direct avec des usines chinoises vérifiées et fiables, sans intermédiaire.": "common.entrezencontactdirec2",
  "Entrez un nouveau mot de passe": "auth.entrezunnouveaumotde",
  "Erreur chargement résumé:": "common.erreurchargementresu1",
  "Erreur connexion Google": "auth.erreurconnexiongoogl",
  "Erreur connexion:": "auth.erreurconnexion",
  "Erreur création utilisateur:": "admin.erreurcreationutilis1",
  "Erreur création utilisateurs:": "admin.erreurcreationutilis2",
  "Erreur de connexion": "auth.erreurdeconnexion10",
  "Erreur de connexion Firebase:": "auth.erreurdeconnexionfir",
  "Erreur de connexion Google": "auth.erreurdeconnexiongoo",
  "Erreur de connexion Google dans le contexte:": "auth.erreurdeconnexiongoo1",
  "Erreur de connexion dans le contexte:": "auth.erreurdeconnexiondan",
  "Erreur de connexion inattendue": "auth.erreurdeconnexionina",
  "Erreur de connexion inconnue.": "auth.erreurdeconnexioninc2",
  "Erreur de connexion réseau": "auth.erreurdeconnexionres2",
  "Erreur de connexion. Vérifiez votre connexion internet": "auth.erreurdeconnexionver2",
  "Erreur de connexion. Vérifiez votre connexion internet.": "auth.erreurdeconnexionver5",
  "Erreur de connexion. Vérifiez votre internet": "auth.erreurdeconnexionver8",
  "Erreur de connexion:": "auth.erreurdeconnexion11",
  "Erreur de déconnexion Firebase:": "auth.erreurdedeconnexionf2",
  "Erreur de déconnexion dans le contexte:": "auth.erreurdedeconnexiond2",
  "Erreur de déconnexion inconnue.": "auth.erreurdedeconnexioni2",
  "Erreur de mise à jour Firebase:": "common.erreurdemiseajourfir1",
  "Erreur de mise à jour inconnue.": "common.erreurdemiseajourinc1",
  "Erreur de récupération des données utilisateur:": "admin.erreurderecuperation1",
  "Erreur lors de la création": "common.erreurlorsdelacreati3",
  "Erreur lors de la création de l\\": "common.erreurlorsdelacreati19",
  "Erreur lors de la création de la collaboration:": "common.erreurlorsdelacreati21",
  "Erreur lors de la création de la précommande": "ecommerce.erreurlorsdelacreati1",
  "Erreur lors de la création de la prévisualisation:": "common.erreurlorsdelacreati23",
  "Erreur lors de la création de la réservation": "common.erreurlorsdelacreati25",
  "Erreur lors de la création des utilisateurs de test": "admin.erreurlorsdelacreati11",
  "Erreur lors de la création des utilisateurs de test:": "admin.erreurlorsdelacreati14",
  "Erreur lors de la création du blob": "common.erreurlorsdelacreati29",
  "Erreur lors de la création du compte admin": "admin.erreurlorsdelacreati16",
  "Erreur lors de la création du filleul:": "common.erreurlorsdelacreati31",
  "Erreur lors de la création du produit:": "ecommerce.erreurlorsdelacreati5",
  "Erreur lors de la création du profil influenceur:": "common.erreurlorsdelacreati33",
  "Erreur lors de la création:": "common.erreurlorsdelacreati35",
  "Erreur lors de la déconnexion:": "auth.erreurlorsdeladeconn2",
  "Erreur lors de la mise à jour de l\\": "common.erreurlorsdelamiseaj11",
  "Erreur lors de la mise à jour de la collaboration:": "common.erreurlorsdelamiseaj13",
  "Erreur lors de la mise à jour de la langue utilisateur:": "admin.erreurlorsdelamiseaj2",
  "Erreur lors de la mise à jour du produit:": "ecommerce.erreurlorsdelamiseaj1",
  "Erreur lors de la mise à jour du profil influenceur:": "common.erreurlorsdelamiseaj16",
  "Erreur lors de la mise à jour du profil:": "common.erreurlorsdelamiseaj19",
  "Erreur lors de la mise à jour du prospect": "common.erreurlorsdelamiseaj21",
  "Erreur lors de la mise à jour du rôle:": "common.erreurlorsdelamiseaj23",
  "Erreur lors de la mise à jour:": "common.erreurlorsdelamiseaj29",
  "Erreur lors de la recherche": "common.erreurlorsdelarecher",
  "Erreur lors de la recherche d\\": "common.erreurlorsdelarecher1",
  "Erreur lors de la recherche des utilisateurs:": "admin.erreurlorsdelarecher",
  "Erreur lors de la recherche:": "common.erreurlorsdelarecher2",
  "Erreur lors de la récupération de l\\": "common.erreurlorsdelarecupe3",
  "Erreur lors de la récupération des catégories:": "common.erreurlorsdelarecupe7",
  "Erreur lors de la récupération des collaborations:": "common.erreurlorsdelarecupe9",
  "Erreur lors de la récupération des données utilisateur Firestore:": "admin.erreurlorsdelarecupe1",
  "Erreur lors de la récupération des filleuls:": "common.erreurlorsdelarecupe11",
  "Erreur lors de la récupération des fonctionnalités:": "common.erreurlorsdelarecupe13",
  "Erreur lors de la récupération des marques:": "common.erreurlorsdelarecupe17",
  "Erreur lors de la récupération des produits par catégorie:": "ecommerce.erreurlorsdelarecupe2",
  "Erreur lors de la récupération des produits similaires:": "ecommerce.erreurlorsdelarecupe3",
  "Erreur lors de la récupération des produits:": "ecommerce.erreurlorsdelarecupe9",
  "Erreur lors de la récupération des statistiques:": "common.erreurlorsdelarecupe21",
  "Erreur lors de la récupération des utilisateurs:": "admin.erreurlorsdelarecupe7",
  "Erreur lors de la récupération du produit:": "ecommerce.erreurlorsdelarecupe15",
  "Erreur lors de la récupération du profil influenceur:": "common.erreurlorsdelarecupe23",
  "Erreur lors de la réinitialisation du mot de passe": "auth.erreurlorsdelareinit1",
  "Erreur lors de la réservation. Veuillez réessayer.": "common.erreurlorsdelareserv",
  "Erreur lors de la sauvegarde des produits globaux:": "ecommerce.erreurlorsdelasauveg",
  "Erreur lors de la sauvegarde du profil": "common.erreurlorsdelasauveg",
  "Erreur lors de la sauvegarde en base de données": "common.erreurlorsdelasauveg2",
  "Erreur lors de la suppression du profil utilisateur": "admin.erreurlorsdelasuppre",
  "Erreur lors de la synchronisation des utilisateurs": "admin.erreurlorsdelasynchr1",
  "Erreur lors de la vérification de l\\": "common.erreurlorsdelaverifi3",
  "Erreur lors de la vérification du statut admin:": "admin.erreurlorsdelaverifi1",
  "Erreur lors de la vérification du statut d\\": "common.erreurlorsdelaverifi5",
  "Erreur lors du chargement des commandes": "ecommerce.erreurlorsduchargeme",
  "Erreur lors du chargement des commandes:": "ecommerce.erreurlorsduchargeme1",
  "Erreur lors du chargement des données": "common.erreurlorsduchargeme1",
  "Erreur lors du chargement des données:": "common.erreurlorsduchargeme3",
  "Erreur lors du chargement des expéditions": "common.erreurlorsduchargeme5",
  "Erreur lors du chargement des favoris:": "common.erreurlorsduchargeme6",
  "Erreur lors du chargement des fournisseurs": "ecommerce.erreurlorsduchargeme2",
  "Erreur lors du chargement des fournisseurs:": "ecommerce.erreurlorsduchargeme3",
  "Erreur lors du chargement des messages": "common.erreurlorsduchargeme8",
  "Erreur lors du chargement des notifications": "common.erreurlorsduchargeme9",
  "Erreur lors du chargement des produits similaires:": "ecommerce.erreurlorsduchargeme4",
  "Erreur lors du chargement des produits:": "ecommerce.erreurlorsduchargeme8",
  "Erreur lors du chargement des utilisateurs": "admin.erreurlorsduchargeme1",
  "Erreur lors du chargement des utilisateurs:": "admin.erreurlorsduchargeme3",
  "Erreur lors du chargement des éléments": "common.erreurlorsduchargeme11",
  "Erreur lors du chargement du profil": "common.erreurlorsduchargeme12",
  "Erreur lors du rechargement des produits:": "ecommerce.erreurlorsdurecharge",
  "Erreur lors du traitement de la réponse du serveur": "common.erreurlorsdutraiteme1",
  "Erreur lors du téléchargement des documents": "common.erreurlorsdutelechar1",
  "Erreur lors du téléchargement:": "common.erreurlorsdutelechar3",
  "Erreur purge utilisateurs:": "admin.erreurpurgeutilisate",
  "Erreur réseau lors de l\\": "common.erreurreseaulorsdel1",
  "Erreur vérification email:": "auth.erreurverificationem5",
  "Error fetching notifications:": "common.errorfetchingnotific",
  "Error loading notifications": "common.errorloadingnotifica",
  "Error loading notifications:": "common.errorloadingnotifica2",
  "Espagne": "common.espagne1",
  "Espagnol": "common.espagnol",
  "Espresso Coffee Machine": "common.espressocoffeemachin",
  "Espresso koffiemachine": "common.espressokoffiemachin",
  "Essayez de modifier votre recherche": "forms.essayezdemodifiervot",
  "Este contêiner está disponível para novas reservas.": "common.esteconteinerestdisp1",
  "Este contêiner está fechado e não pode mais ser reservado.": "common.esteconteinerestfech1",
  "Este contêiner está quase cheio, reserve rapidamente!": "common.esteconteinerestquas1",
  "Ex. Chine, France...": "common.exchinefrance",
  "Ex. Plastique, Métal...": "common.explastiquemetal1",
  "Ex: Chine, France...": "common.exchinefrance1",
  "Ex: Plastique, Métal...": "common.explastiquemetal2",
  "Export des données en cours... Vous recevrez un email.": "auth.exportdesdonneesenco1",
  "Expédition dans plus de 200 pays": "forms.expeditiondansplusde1",
  "Expéditions": "common.expeditions3",
  "Expédiée": "common.expediee5",
  "FOURNISSEURS": "ecommerce.fournisseurs5",
  "Facultatif, utile pour évaluer l": "common.facultatifutilepoure",
  "Facultatif, utile pour évaluer l'interaction": "common.facultatifutilepoure1",
  "Favoris": "common.favoris2",
  "Fermer (Échap)": "common.fermerechap1",
  "Fiches produit détaillées": "ecommerce.fichesproduitdetaill1",
  "Fiches produit simplifiées": "ecommerce.fichesproduitsimplif1",
  "Fichier supprimé avec succès !": "common.fichiersupprimeavecs1",
  "Filleul créé:": "common.filleulcree1",
  "Finalisez votre commande en toute sécurité avec notre système de paiement protégé.": "admin.finalisezvotrecomman2",
  "Flexibel 100W zonnepaneel, hoge efficiëntie, eenvoudige installatie.": "common.flexibel100wzonnepan1",
  "Fonctionnalité de téléchargement à implémenter avec html2canvas": "common.fonctionnalitedetele",
  "Fonctionnalité à venir": "common.fonctionnaliteavenir1",
  "Formats acceptés: JPG, JPEG, PNG, GIF | Taille max: 5MB par image": "common.formatsacceptesjpgjp1",
  "Formats: MP4, MOV, AVI, WEBM | Max 100MB par vidéo": "common.formatsmp4movaviwebm1",
  "Fournisseur spécialisé dans les équipements technologiques et électroniques de haute qualité.": "ecommerce.fournisseurspecialis1",
  "Fournisseurs": "ecommerce.fournisseurs8",
  "France": "common.france5",
  "Français": "common.francais18",
  "Fév": "common.fev1",
  "Gestion des produits": "ecommerce.gestiondesproduits",
  "Gestion logistique complète": "common.gestionlogistiquecom1",
  "Get in direct contact with verified and reliable Chinese factories, without intermediaries.": "common.getindirectcontactwi",
  "Glissez et déposez un fichier ici": "common.glissezetdeposezunfi3",
  "Gris élégant": "common.griselegant1",
  "Guangzhou, Chine": "common.guangzhouchine5",
  "Guangzhou, Guangdong, Chine": "common.guangzhouguangdongch",
  "Général": "common.general1",
  "Générateurs électriques": "common.generateurselectriqu1",
  "Gérer vos documents": "common.gerervosdocuments3",
  "Gérez vos commandes": "ecommerce.gerezvoscommandes2",
  "Gérez vos documents et fichiers": "common.gerezvosdocumentsetf3",
  "Gérez vos relations clients et suivez leur activité": "common.gerezvosrelationscli2",
  "Gérez votre catalogue": "common.gerezvotrecatalogue1",
  "Gérez votre catalogue de produits": "ecommerce.gerezvotrecatalogued2",
  "Haltères 5kg": "common.halteres5kg1",
  "Hangzhou, Chine": "common.hangzhouchine1",
  "I accept the terms and conditions": "common.iacceptthetermsandco",
  "ID du conteneur à mettre à jour.\r\n   * @param newUsedCapacity La nouvelle capacité utilisée.\r\n   */\r\n  updateContainerCapacity(containerId: string, newUsedCapacity: number): Promise<Container> {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        const container = currentContainers.get(containerId);\r\n        if (!container) {\r\n          return reject(new Error(": "common.idduconteneuramettre",
  "ID du conteneur.\r\n   */\r\n  getContainerItems(containerId: string): Promise<ContainerItem[]> {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const items = Array.from(currentContainerItems.values()).filter(item => item.containerId === containerId);\r\n        resolve(items);\r\n      }, 300); // Simule un délai réseau\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Met à jour la capacité utilisée d": "common.idduconteneurgetcont",
  "ID du produit à ajouter.\r\n   * @param quantity La quantité du produit à ajouter.\r\n   * @param userId L": "forms.idduproduitaajouterp2",
  "Identifiez les meilleurs fournisseurs": "ecommerce.identifiezlesmeilleu",
  "Imperméabilité": "common.impermeabilite1",
  "Imperméable": "common.impermeable3",
  "Impossible de charger les produits": "ecommerce.impossibledechargerl",
  "Impossible de charger les produits de cette catégorie": "ecommerce.impossibledechargerl3",
  "Impossible de charger les produits similaires": "ecommerce.impossibledechargerl4",
  "Impossible de créer l\\": "common.impossibledecreerl2",
  "Impossible de mettre à jour l\\": "common.impossibledemettreaj1",
  "Impossible de mettre à jour le produit": "ecommerce.impossibledemettreaj1",
  "Impossible de rechercher les produits": "ecommerce.impossiblederecherch",
  "Impossible de rechercher les utilisateurs.": "admin.impossiblederecherch",
  "Impossible de récupérer l\\": "common.impossiblederecupere1",
  "Impossible de récupérer les utilisateurs.": "admin.impossiblederecupere2",
  "Impossible de supprimer définitivement le produit": "forms.impossibledesupprime2",
  "Impossible de supprimer l\\": "forms.impossibledesupprime3",
  "Impossible de supprimer le produit": "forms.impossibledesupprime4",
  "Indonésie": "common.indonesie1",
  "Influenceuse mode et beauté, spécialisée dans les produits de luxe": "ecommerce.influenceusemodeetbe2",
  "Influenceuse mode et lifestyle avec une communauté engagée": "common.influenceusemodeetli1",
  "Informations": "common.informations4",
  "Informations de contact": "common.informationsdecontac1",
  "Informations de l": "common.informationsdel1",
  "Informations personnelles": "common.informationspersonne2",
  "Innovation technologique de qualité": "common.innovationtechnologi1",
  "Intégré": "common.integre1",
  "Italie": "common.italie1",
  "Italien": "common.italien",
  "Itens do contêiner": "common.itensdoconteiner1",
  "J'accepte de partager mes statistiques détaillées sur demande": "common.jacceptedepartagerme",
  "J'accepte les conditions générales": "common.jacceptelescondition",
  "J'accepte que mes informations soient vérifiées": "common.jacceptequemesinform",
  "Jouets, puériculture et enfants.": "common.jouetspuericultureet1",
  "Kit de filtres à huile": "common.kitdefiltresahuile3",
  "Kit média": "common.kitmedia5",
  "LED haute efficacité": "common.ledhauteefficacite1",
  "La catégorie est requise": "common.lacategorieestrequis1",
  "La commande minimum doit être supérieure à 0": "ecommerce.lacommandeminimumdoi1",
  "La sauvegarde quotidienne de la base de données s\\": "common.lasauvegardequotidie1",
  "Lampe avec éclairage chaud": "common.lampeavececlairagech1",
  "Lampe de bureau LED avec bras articulé, 3 modes de couleur et dimmer tactile.": "common.lampedebureauledavec1",
  "Lampe de bureau LED avec bras articulé, 3 modes de couleur, dimmer tactile et port USB pour recharge.": "common.lampedebureauledavec3",
  "Le Samsung Galaxy S24 redéfinit l\\": "common.lesamsunggalaxys24re1",
  "Le casque sans fil Sony WH-1000XM4 avec réduction de bruit leader de l\\": "common.lecasquesansfilsonyw1",
  "Le mot de passe doit contenir au moins 6 caractères": "auth.lemotdepassedoitcont27",
  "Le mot de passe doit contenir au moins 8 caractères": "auth.lemotdepassedoitcont29",
  "Le nom doit contenir au moins 2 caractères": "forms.lenomdoitconteniraum5",
  "Le prix doit être supérieur à 0": "ecommerce.leprixdoitetresuperi1",
  "Le produit \"Composants électroniques\" a un stock inférieur au seuil minimum.": "ecommerce.leproduitcomposantse",
  "Le smartphone fonctionne bien mais la batterie se décharge très rapidement. Pas ce qui était annoncé.": "forms.lesmartphonefonction1",
  "Le stock ne peut pas être négatif": "common.lestocknepeutpasetre1",
  "Le t-shirt est correct mais la qualité du coton n\\": "common.letshirtestcorrectma1",
  "Les données seront affichées ici": "common.lesdonneesserontaffi3",
  "Les écouteurs ont une très bonne qualité sonore et l\\": "common.lesecouteursontunetr1",
  "Lien copié dans le presse-papiers !": "common.liencopiedanslepress1",
  "Lien de partage copié dans le presse-papiers !": "common.liendepartagecopieda1",
  "Lien de votre profil": "common.liendevotreprofil",
  "Liens de vos profils": "common.liensdevosprofils",
  "Liens vers les réseaux sociaux": "common.liensverslesreseauxs1",
  "Lieu d'arrivée": "common.lieudarrivee",
  "Lieu de départ": "common.lieudedepart2",
  "Link to your profile": "common.linktoyourprofile",
  "Lista de contêineres": "common.listadeconteineres1",
  "Liste des produits restaurée par défaut": "ecommerce.listedesproduitsrest5",
  "Livraison urgente demandée": "common.livraisonurgentedema1",
  "Livre Développement": "common.livredeveloppement1",
  "Livré": "common.livre1",
  "Livrée": "common.livree5",
  "Lunettes de soleil avec protection UV400, monture en acétate de qualité supérieure. Design moderne et confortable.": "common.lunettesdesoleilavec1",
  "Lunettes de soleil polarisées avec protection UV400 et monture en alliage léger.": "common.lunettesdesoleilpola1",
  "Lunettes de soleil portées": "common.lunettesdesoleilport1",
  "Lyon, France": "common.lyonfrance1",
  "Légal": "common.legal6",
  "Léger": "common.leger3",
  "MACHINERIE": "common.machinerie2",
  "MACHINERY": "common.machinery",
  "MODE & VÊTEMENTS": "common.modevetements5",
  "Machine à café expresso": "common.machineacafeexpresso5",
  "Machine à coudre industrielle": "common.machineacoudreindust2",
  "Machinerie": "common.machinerie6",
  "Machinery": "common.machinery1",
  "Machines": "common.machines1",
  "Machines et équipements": "common.machinesetequipement2",
  "Machines et équipements industriels.": "common.machinesetequipement5",
  "Machines industrielles": "common.machinesindustrielle1",
  "Machines pour l’industrie.": "common.machinespourlindustr",
  "Machines textiles": "common.machinestextiles",
  "Marseille, France": "common.marseillefrance1",
  "Matériau": "common.materiau12",
  "Matériau non spécifié": "common.materiaunonspecifie5",
  "Matériel médical": "common.materielmedical1",
  "Merci pour votre message. Je vous répondrai dans les plus brefs délais.": "common.mercipourvotremessag1",
  "Merci pour votre retour Sophie. Nous prenons note de vos remarques sur la qualité du coton.": "navigation.mercipourvotreretour1",
  "Mesa ergonômica ajustável": "common.mesaergonomicaajustv1",
  "Message commercial non sollicité": "common.messagecommercialnon1",
  "Message de présentation de l": "common.messagedepresentatio",
  "Message de présentation de l'entreprise": "common.messagedepresentatio1",
  "Message de spam confirmé et utilisateur sanctionné.": "admin.messagedespamconfirm1",
  "Messages": "common.messages7",
  "Messages non lus": "common.messagesnonlus1",
  "Messages récents": "common.messagesrecents2",
  "Mettre à jour": "common.mettreajour3",
  "Minimum 6 caractères": "common.minimum6caracteres3",
  "Minimum 8 caractères": "common.minimum8caracteres1",
  "Mise à jour de l\\": "common.miseajourdel1",
  "Mise à jour des conditions de vente": "common.miseajourdesconditio4",
  "Mise à jour...": "common.miseajour",
  "Mobilier hôtelier": "common.mobilierhotelier1",
  "Mode & Beauté": "common.modebeaute7",
  "Mode, vêtements et accessoires.": "common.modevetementsetacces1",
  "Modifier": "forms.modifier2",
  "Modifier le conteneur": "forms.modifierleconteneur",
  "Modifier le produit": "forms.modifierleproduit",
  "Modération": "common.moderation2",
  "Mon profil": "common.monprofil2",
  "Mon profil fournisseur": "ecommerce.monprofilfournisseur1",
  "Montre Connectée": "common.montreconnectee1",
  "Montre Connectée Smartwatch Pro X1": "common.montreconnecteesmart1",
  "Montre connectée Apple Watch": "common.montreconnecteeapple1",
  "Montre connectée avec bracelet": "common.montreconnecteeavecb1",
  "Montre connectée haut de gamme avec écran AMOLED, GPS intégré et monitoring cardiaque.": "common.montreconnecteehautd1",
  "Montre connectée vue de face": "common.montreconnecteevuede1",
  "Montre connectée vue de profil": "common.montreconnecteevuede4",
  "Montre connectée écran allumé": "common.montreconnecteeecran1",
  "Montres connectées": "common.montresconnectees1",
  "Mot de passe mis à jour avec succès !": "auth.motdepassemisajourav1",
  "Mot de passe oublié ?": "auth.motdepasseoublie1",
  "Mot de passe trop court (min 6 caractères)": "auth.motdepassetropcourtm1",
  "Máquina de café espresso": "common.mquinadecafeespresso1",
  "Máquina de café expresso": "common.mquinadecafeexpresso1",
  "Mère, enfants et jouets": "common.mereenfantsetjouets1",
  "Médical": "common.medical3",
  "Mémoire": "common.memoire1",
  "Méthodes de contrôle qualité": "common.methodesdecontrolequ1",
  "Nantes, France": "common.nantesfrance",
  "Nenhum item neste contêiner": "common.nenhumitemnesteconte1",
  "Ningbo, Chine": "common.ningbochine",
  "No notifications": "common.nonotifications",
  "Nom Prénom": "forms.nomprenom1",
  "Nom du contact": "forms.nomducontact",
  "Nombre de followers pour chaque réseau": "forms.nombredefollowerspou1",
  "Nome do contêiner": "forms.nomedoconteiner1",
  "Nome é obrigatório": "forms.nomeeobrigatrio1",
  "Non connecté": "common.nonconnecte7",
  "Non défini": "common.nondefini3",
  "Non vérifiés": "common.nonverifies2",
  "Notes supplémentaires...": "common.notessupplementaires1",
  "Notifications": "common.notifications10",
  "Notifications mobiles": "common.notificationsmobiles",
  "Notifications par email": "auth.notificationsparemai1",
  "Notifications pour les messages de fournisseurs": "ecommerce.notificationspourles",
  "Notifications push": "common.notificationspush1",
  "Notifications push sur l\\": "common.notificationspushsur",
  "Notre plateforme vous connecte directement avec les meilleurs fournisseurs chinois": "ecommerce.notreplateformevousc",
  "Nous sommes désolés pour ce problème Pierre. Contactez-nous en privé pour que nous puissions vous aider à résoudre ce problème de batterie.": "common.noussommesdesolespou2",
  "Nouveau": "common.nouveau7",
  "Nouveau conteneur": "common.nouveauconteneur",
  "Nouveau fournisseur approuvé": "ecommerce.nouveaufournisseurap2",
  "Nouveau fournisseur inscrit": "ecommerce.nouveaufournisseurin",
  "Nouveau message": "common.nouveaumessage",
  "Nouveau message reçu": "common.nouveaumessagerecu2",
  "Nouveau mot de passe": "auth.nouveaumotdepasse2",
  "Nouveau utilisateur inscrit": "admin.nouveauutilisateurin",
  "Nouveaux avis": "common.nouveauxavis2",
  "Nouveaux clients": "common.nouveauxclients1",
  "Nouveaux messages": "common.nouveauxmessages3",
  "Nouvelles commandes": "ecommerce.nouvellescommandes3",
  "Numéro d": "common.numerod",
  "Numéro d'enregistrement légal": "common.numerodenregistremen",
  "Numéro de modèle": "common.numerodemodele2",
  "Négociation des prix en votre nom": "forms.negociationdesprixen1",
  "Négociation directe avec les fournisseurs": "ecommerce.negociationdirecteav2",
  "Négociez vos prix, obtenez des échantillons et lancez votre commande en toute sérénité.": "ecommerce.negociezvosprixobten1",
  "Orange énergie": "common.orangeenergie1",
  "Our platform connects you directly with the best Chinese suppliers": "ecommerce.ourplatformconnectsy",
  "Outils de beauté": "common.outilsdebeaute1",
  "Outils et matériel": "common.outilsetmateriel1",
  "Outils mécaniques": "common.outilsmecaniques1",
  "Outils professionnels et matériel.": "common.outilsprofessionnels1",
  "Outils électriques": "common.outilselectriques3",
  "Ouverture de la page des données collectées": "common.ouverturedelapagedes1",
  "PIÈCES & ACCESSOIRES": "common.piecesaccessoires5",
  "Painel solar flexível de 100W, alta eficiência, instalação fácil.": "common.painelsolarflexvelde1",
  "Panneau solaire flexible de 100W, haute efficacité, installation facile.": "common.panneausolaireflexib1",
  "Paramètres": "admin.parametres18",
  "Paramètres sauvegardés": "admin.parametressauvegarde2",
  "Paramètres sauvegardés avec succès !": "admin.parametressauvegarde5",
  "Parcourez notre catalogue de milliers de produits et fournisseurs vérifiés selon vos besoins.": "ecommerce.parcoureznotrecatalo2",
  "Parfums personnalisés": "common.parfumspersonnalises1",
  "Paris, France": "common.parisfrance2",
  "Partage des statistiques activé": "common.partagedesstatistiqu1",
  "Payez en sécurité": "admin.payezensecurite2",
  "Pays et région de production": "forms.paysetregiondeproduc1",
  "Pays ou région majoritaire, âge moyen": "forms.paysouregionmajorita1",
  "Pays/Région": "forms.paysregion1",
  "Perceuse électrique 18V": "common.perceuseelectrique183",
  "Permissions insuffisantes pour créer un utilisateur. Vérifiez les règles de sécurité Firestore.": "admin.permissionsinsuffisa2",
  "Permissions insuffisantes pour écrire en base": "common.permissionsinsuffisa1",
  "Permissions insuffisantes. Vérifiez les règles Firestore": "common.permissionsinsuffisa3",
  "Permissions insuffisantes. Vérifiez les règles Firestore.": "common.permissionsinsuffisa7",
  "Personnalisation des produits": "ecommerce.personnalisationdesp",
  "Personne de contact": "common.personnedecontact",
  "Photo de profil mise à jour avec succès !": "common.photodeprofilmiseajo2",
  "Pièces automobiles": "common.piecesautomobiles1",
  "Pièces de Qualité": "common.piecesdequalite5",
  "Pièces détachées et accessoires automobiles.": "common.piecesdetacheesetacc1",
  "Pièces et accessoires auto": "common.piecesetaccessoiresa1",
  "Plastique ABS, Métal": "common.plastiqueabsmetal1",
  "Plateforme B2B pour le commerce avec la Chine": "common.plateformeb2bpourlec",
  "Please provide the links to your profiles": "common.pleaseprovidethelink",
  "Please provide the links to your profiles for each selected social network:": "common.pleaseprovidethelink1",
  "Plus de 1000 fournisseurs vérifiés": "ecommerce.plusde1000fournisseu6",
  "Plusieurs tentatives de connexion échouées depuis l\\": "auth.plusieurstentativesd2",
  "Plusieurs échecs de paiement détectés pour le fournisseur Shanghai Electronics Co.": "ecommerce.plusieursechecsdepai1",
  "Polarisé": "common.polarise3",
  "Polarisés anti-reflet": "common.polarisesantireflet1",
  "Politique de confidentialité": "common.politiquedeconfident5",
  "Polyester recyclé, PFC-free DWR": "common.polyesterrecyclepfcf1",
  "Portugal": "common.portugal",
  "Português": "common.portugues1",
  "Powerbank portable de 10000mAh avec charge rapide et connectivité multiple.": "common.powerbankportablede11",
  "Prix Compétitifs": "ecommerce.prixcompetitifs1",
  "Produit ajouté avec succès": "ecommerce.produitajouteavecsuc3",
  "Produit mis à jour avec succès": "ecommerce.produitmisajouravecs3",
  "Produit potentiellement contrefait - iPhone 15 à 50€": "forms.produitpotentielleme1",
  "Produit précédent": "navigation.produitprecedent1",
  "Produit supprimé avec succès": "ecommerce.produitsupprimeavecs3",
  "Produit supprimé avec succès !": "ecommerce.produitsupprimeavecs5",
  "Produit suspect signalé": "ecommerce.produitsuspectsignal1",
  "Produits": "ecommerce.produits7",
  "Produits bio": "ecommerce.produitsbio",
  "Produits certifiés CE et contrôlés qualité": "ecommerce.produitscertifiescee2",
  "Produits cosmétiques": "ecommerce.produitscosmetiques5",
  "Produits et solutions pour l’environnement.": "ecommerce.produitsetsolutionsp",
  "Produits favoris": "ecommerce.produitsfavoris",
  "Produits les plus vendus": "ecommerce.produitslesplusvendu",
  "Produits recommandés pour vous": "ecommerce.produitsrecommandesp2",
  "Produits secs": "ecommerce.produitssecs",
  "Produits totaux": "ecommerce.produitstotaux1",
  "Profil": "common.profil1",
  "Profil influenceur créé:": "common.profilinfluenceurcre1",
  "Profil mis à jour": "common.profilmisajour2",
  "Profil mis à jour avec succès !": "common.profilmisajouravecsu2",
  "Profil utilisateur non trouvé. Contactez l\\": "admin.profilutilisateurnon1",
  "Promotion des vêtements de sport été Adidas": "common.promotiondesvetement3",
  "Pré-pedido de espaço em contêiner": "common.prepedidodeespacoemc1",
  "Pré-pedir": "common.prepedir1",
  "Précommande d": "ecommerce.precommanded",
  "Précommande d'espace conteneur": "ecommerce.precommandedespaceco",
  "Précommander": "ecommerce.precommander1",
  "Préférences de notification": "common.preferencesdenotific2",
  "Préférences linguistiques et régionales": "common.preferenceslinguisti4",
  "Préparation": "common.preparation3",
  "Présentez-vous brièvement": "common.presentezvousbrievem1",
  "Prévisualisation": "common.previsualisation5",
  "Prévisualiser": "common.previsualiser7",
  "Prêt à développer votre business ?": "common.pretadeveloppervotre1",
  "Puzzle 1000 pièces": "common.puzzle1000pieces1",
  "Qingdao, Chine": "common.qingdaochine",
  "Qualité Certifiée": "common.qualitecertifiee5",
  "Qualité Garantie": "common.qualitegarantie1",
  "Qualité moyenne": "common.qualitemoyenne1",
  "Quantité": "common.quantite5",
  "Quantité (CBM)": "common.quantitecbm1",
  "Quantité minimum (MOQ)": "common.quantiteminimummoq1",
  "Quantité minimum de commande": "ecommerce.quantiteminimumdecom1",
  "Quanzhou, Chine": "common.quanzhouchine",
  "Rafraîchir": "common.rafraichir3",
  "Randonnée, Sport, Casual": "common.randonneesportcasual1",
  "Rapport activité janvier 2024.docx": "common.rapportactivitejanvi1",
  "Recevoir les dernières nouvelles et offres": "common.recevoirlesdernieres1",
  "Recevoir un email pour chaque nouveau message": "auth.recevoirunemailpourc",
  "Recevoir une notification push pour chaque nouveau message": "common.recevoirunenotificat",
  "Recherche avancée avec tous les filtres": "common.rechercheavanceeavec2",
  "Recherche de base": "common.recherchedebase",
  "Recherche:": "common.recherche3",
  "Rechercher": "common.rechercher3",
  "Rechercher conversations...": "common.rechercherconversati",
  "Rechercher dans les alertes...": "common.rechercherdanslesale",
  "Rechercher dans les avis...": "common.rechercherdanslesavi1",
  "Rechercher des produits...": "ecommerce.rechercherdesproduit2",
  "Rechercher par client ou numéro...": "common.rechercherparcliento2",
  "Rechercher par email ou nom...": "auth.rechercherparemailou",
  "Rechercher par nom ou description...": "forms.rechercherparnomoude",
  "Rechercher par nom ou email...": "auth.rechercherparnomouem",
  "Rechercher par nom, description ou tags...": "forms.rechercherparnomdesc",
  "Rechercher par nom, email ou entreprise...": "auth.rechercherparnomemai1",
  "Rechercher par nom, email ou localisation...": "auth.rechercherparnomemai2",
  "Rechercher par numéro de suivi, commande ou client...": "ecommerce.rechercherparnumerod2",
  "Rechercher par numéro, client ou fournisseur...": "ecommerce.rechercherparnumeroc2",
  "Rechercher un document...": "common.rechercherundocument2",
  "Rechercher un influenceur": "common.rechercheruninfluenc1",
  "Rechercher un message...": "common.rechercherunmessage",
  "Rechercher un produit...": "ecommerce.rechercherunproduit3",
  "Rechercher une carte...": "ecommerce.rechercherunecarte",
  "Rechercher...": "common.rechercher5",
  "Recherchez efficacement": "common.recherchezefficaceme",
  "Recherchez un produit, une marque...": "ecommerce.recherchezunproduitu2",
  "Recommandé": "common.recommande3",
  "Refusé": "common.refuse1",
  "Rejeté": "common.rejete6",
  "Reserve seu espaço neste contêiner antes que fique cheio.": "common.reserveseuespaconest1",
  "Restaurer par défaut": "common.restaurerpardefaut1",
  "Retour au tableau de bord": "navigation.retourautableaudebor17",
  "Retour au tableau de bord admin": "navigation.retourautableaudebor18",
  "Robe Élégante Zara": "common.robeelegantezara1",
  "Robe élégante pour toutes occasions": "common.robeelegantepourtout1",
  "Robot Télécommandé": "common.robottelecommande1",
  "Rouge à Lèvres Mat": "common.rougealevresmat1",
  "Réduction bruit": "common.reductionbruit1",
  "Réduction de bruit": "common.reductiondebruit3",
  "Réinitialiser": "common.reinitialiser3",
  "Répondre": "common.repondre5",
  "Répondus aujourd": "common.repondusaujourd",
  "Répondus aujourd'hui": "common.repondusaujourdhui",
  "Réponse": "common.reponse1",
  "Réponse du fournisseur": "ecommerce.reponsedufournisseur2",
  "Réseau global": "common.reseauglobal3",
  "Réseaux sociaux": "common.reseauxsociaux1",
  "Réservez votre espace dans ce conteneur avant qu": "common.reservezvotreespaced",
  "Réservez votre espace dans ce conteneur avant qu'il ne soit complet.": "common.reservezvotreespaced1",
  "Résistance": "common.resistance1",
  "Résultats visibles rapidement": "common.resultatsvisiblesrap1",
  "Rôle": "common.role12",
  "Rôle invalide": "common.roleinvalide1",
  "Sac à Dos Business Laptop": "common.sacadosbusinesslapto1",
  "Sac à Dos Ordinateur Business": "common.sacadosordinateurbus1",
  "Sac à dos business noir": "common.sacadosbusinessnoir1",
  "Sac à dos porté": "common.sacadosporte1",
  "Sac à dos professionnel avec compartiment laptop 15.6": "common.sacadosprofessionnel1",
  "Sac à dos professionnel avec compartiment laptop 15.6\" et port USB.": "common.sacadosprofessionnel2",
  "Sac à dos professionnel avec compartiment laptop 15.6\", port USB, matériau imperméable et design ergonomique.": "forms.sacadosprofessionnel",
  "Santé": "common.sante3",
  "Sauvegarde automatique activée": "common.sauvegardeautomatiqu1",
  "Sauvegarde terminée": "common.sauvegardeterminee1",
  "Service de gestion des utilisateurs non disponible": "admin.servicedegestiondesu",
  "Seu pré-pedido foi registrado com sucesso!": "common.seuprepedidofoiregis1",
  "Shanghai, Chine": "common.shanghaichine3",
  "Shenzhen, Chine": "common.shenzhenchine8",
  "Shenzhen, Guangdong, Chine": "common.shenzhenguangdongchi",
  "Smartphone haute performance avec écran 6.7 pouces, processeur octa-core et appareil photo 108MP": "forms.smartphonehauteperfo1",
  "Spécialiste en composants électroniques et appareils grand public": "common.specialisteencomposa1",
  "Spécifications techniques": "common.specificationstechni4",
  "Stock faible détecté": "common.stockfaibledetecte1",
  "Style corporate sérieux": "common.stylecorporateserieu1",
  "Style traditionnel et élégant": "common.styletraditionnelete1",
  "Suivez l'état de vos commandes en temps réel depuis votre tableau de bord": "admin.suivezletatdevoscomm",
  "Support": "common.support",
  "Support 24": "common.support242",
  "Support ChineTonUsine": "common.supportchinetonusine1",
  "Support Téléphone": "forms.supporttelephone2",
  "Support prioritaire": "common.supportprioritaire",
  "SupportTeam2024!": "common.supportteam2024",
  "Supprimer": "forms.supprimer7",
  "Supprimer tous les fichiers de cette catégorie ?": "forms.supprimertouslesfich2",
  "Synchronisé avec l": "common.synchroniseavecl",
  "Synchronisé avec l'onglet Découvrir": "common.synchroniseaveclongl",
  "Système": "common.systeme3",
  "Sécateur Pro": "common.secateurpro1",
  "Sécurité": "admin.securite11",
  "Sécurité du compte": "admin.securiteducompte4",
  "Sélecteur de langue": "common.selecteurdelangue2",
  "Sélectionnez une catégorie": "common.selectionnezunecateg1",
  "Sélectionnez vos réseaux sociaux": "common.selectionnezvosresea1",
  "Sérum Anti-Âge": "common.serumantiage1",
  "Sérum vitamine C": "common.serumvitaminec3",
  "Tableau de Bord Sourceur": "admin.tableaudebordsourceu",
  "Tableau de bord": "admin.tableaudebord2",
  "Tableau de bord fournisseur": "admin.tableaudebordfournis1",
  "Taux de réponse": "common.tauxdereponse1",
  "Telescópio astronômico 150mm": "common.telescpioastronomico1",
  "Tentative de connexion Google depuis le contexte...": "auth.tentativedeconnexion",
  "Tentative de connexion depuis le contexte...": "auth.tentativedeconnexion1",
  "Tentative de connexion suspecte": "auth.tentativedeconnexion2",
  "Terminé": "common.termine3",
  "Test Connexion": "auth.testconnexion",
  "Test Connexion Admin": "auth.testconnexionadmin1",
  "Test Création": "common.testcreation1",
  "Test et présentation du nouveau Galaxy S24 Ultra": "common.testetpresentationdu5",
  "Thaïlande": "common.thailande1",
  "Thé Vert Premium": "common.thevertpremium1",
  "Total Messages": "common.totalmessages",
  "Total Produits": "ecommerce.totalproduits2",
  "Total commandes": "ecommerce.totalcommandes",
  "Total dépensé": "common.totaldepense2",
  "Tous les rôles": "common.touslesroles2",
  "Toutes les catégories": "common.touteslescategories13",
  "Toutes les notifications ont été chargées": "common.touteslesnotificatio6",
  "Traduction automatique des messages": "common.traductionautomatiqu",
  "Triple caméra": "common.triplecamera1",
  "Trop de tentatives de connexion. Réessayez plus tard": "auth.tropdetentativesdeco2",
  "Trouvez rapidement les produits que vous cherchez grâce à nos filtres avancés": "ecommerce.trouvezrapidementles2",
  "Trouvez votre usine en Chine en seulement 3 étapes": "common.trouvezvotreusineenc2",
  "Très satisfaite de mon achat. Le smartphone correspond exactement à la description et la livraison a été très rapide. Je recommande ce fournisseur.": "forms.tressatisfaitedemona1",
  "Type d'activité": "common.typedactivite",
  "Télescope astronomique 150mm": "forms.telescopeastronomiqu3",
  "Téléchargement de la carte de visite (fonctionnalité à implémenter)": "ecommerce.telechargementdelaca1",
  "Téléchargements": "common.telechargements8",
  "Télécharger": "common.telecharger13",
  "Télécharger un document": "common.telechargerundocumen1",
  "Téléphone": "forms.telephone9",
  "Téléphone du contact": "forms.telephoneducontact2",
  "URL doit contenir le bon domaine\",\n    \"socialMediaModal.close\": \"Fermer\",\n    \"socialMediaModal.cancel\": \"Annuler\",\n    \"socialMediaModal.save\": \"Valider\",\n    \"socialMediaValidation.noNetworkSelected\": \"Veuillez sélectionner au moins un réseau social\",\n    \"socialMediaValidation.noLinksProvided\": \"Veuillez renseigner les liens de vos profils\",\n\n    \"homepage.title\": \"Chine ton usine\",\n    \"homepage.subtitle\": \"ÇA VA VOUS\",\n    \"homepage.subtitle.highlight\": \"PLAIRE\",\n    \"homepage.tagline\": \"Coup de foudre inévitable.\",\n    \"homepage.search.placeholder\": \"Recherchez un produit, une marque...\",\n    \"homepage.recommendations.badge\": \"Recommandé\",\n    \"homepage.recommendations.title\": \"Produits recommandés pour vous\",\n    \"homepage.recommendations.subtitle\": \"Découvrez notre sélection personnalisée de produits\",\n    \"homepage.recommendations.viewAll\": \"Voir tout\",\n    \"homepage.recommendations.discover\": \"Découvrir\",\n\n    \"homepage.categories.home\": \"Accueil\",\n    \"homepage.categories.electronics\": \"Électronique\",\n    \"homepage.categories.fashion\": \"Mode\",\n    \"homepage.categories.home.category\": \"Maison\",\n    \"homepage.categories.beauty\": \"Beauté\",\n    \"homepage.categories.sports\": \"Sport\",\n    \"homepage.categories.automotive\": \"Auto\",\n    \"homepage.categories.tools\": \"Outils\",\n    \"homepage.categories.toys\": \"Jouets\",\n    \"homepage.categories.books\": \"Livres\",\n    \"homepage.categories.music\": \"Musique\",\n    \"homepage.categories.garden\": \"Jardin\",\n\n    \"homepage.network.badge\": \"Réseau global\",\n    \"homepage.network.suppliers\": \"Plus de 1000 fournisseurs vérifiés\",\n\n    \"homepage.cards.technology\": \"TECHNOLOGIE\",\n    \"homepage.cards.electronics\": \"ÉLECTRONIQUE\",\n    \"homepage.cards.electronics.description\": \"Composants & Gadgets\",\n    \"homepage.cards.explore\": \"Explorer\",\n    \"homepage.cards.fashion.title\": \"MODE & VÊTEMENTS\",\n    \"homepage.cards.textile\": \"TEXTILE\",\n    \"homepage.cards.textile.description\": \"Fabrication Premium\",\n    \"homepage.cards.industrial\": \"ÉQUIPEMENT INDUSTRIEL\",\n    \"homepage.cards.machinery\": \"MACHINERIE\",\n    \"homepage.cards.machinery.description\": \"Performance & Innovation\",\n    \"homepage.cards.decoration\": \"DÉCORATION & MOBILIER\",\n    \"homepage.cards.home.garden\": \"MAISON & JARDIN\",\n    \"homepage.cards.home.garden.description\": \"Design & Confort\",\n    \"homepage.cards.new\": \"Nouveau\",\n    \"homepage.cards.educational\": \"ÉDUCATIF & LUDIQUE\",\n    \"homepage.cards.toys.children\": \"JOUETS & ENFANTS\",\n    \"homepage.cards.toys.description\": \"Qualité Certifiée\",\n    \"homepage.cards.parts\": \"PIÈCES & ACCESSOIRES\",\n    \"homepage.cards.auto.moto\": \"AUTO & MOTO\",\n    \"homepage.cards.auto.description\": \"Pièces de Qualité\",\n\n    \"homepage.cta.title\": \"ÇA VA VOUS\",\n    \"homepage.cta.highlight\": \"PLAIRE\",\n    \"homepage.cta.subtitle\": \"Coup de foudre inévitable.\",\n    \"homepage.cta.button\": \"Découvrir tous les fournisseurs\",\n\n    \"homepage.how.title\": \"Comment ça marche ?\",\n    \"homepage.how.subtitle\": \"Trouvez votre usine en Chine en seulement 3 étapes\",\n    \"homepage.how.step1.title\": \"1. Recherchez vos produits\",\n    \"homepage.how.step1.description\": \"Utilisez nos filtres avancés pour trouver exactement ce que vous cherchez parmi des millions de produits.\",\n    \"homepage.how.step2.title\": \"2. Contactez les fournisseurs\",\n    \"homepage.how.step2.description\": \"Entrez en contact direct avec des usines chinoises vérifiées et fiables, sans intermédiaire.\",\n    \"homepage.how.step3.title\": \"3. Commandez et importez\",\n    \"homepage.how.step3.description\": \"Négociez vos prix, obtenez des échantillons et lancez votre commande en toute sérénité.\",\n    \"homepage.how.cta\": \"Créer un compte\",\n\n    \"homepage.discover.title\": \"DÉCOUVREZ TOUS NOS\",\n    \"homepage.discover.highlight\": \"FOURNISSEURS\",\n    \"homepage.discover.subtitle\": \"Des milliers de fournisseurs vérifiés vous attendent.\",\n    \"homepage.discover.button\": \"Découvrir tous les fournisseurs\",\n\n    \"homepage.process.title\": \"Comment ça marche ?\",\n    \"homepage.process.subtitle\": \"Notre plateforme vous connecte directement avec les meilleurs fournisseurs chinois\",\n    \"homepage.process.step1.title\": \"1. Explorez\",\n    \"homepage.process.step1.description\": \"Parcourez notre catalogue de milliers de produits et fournisseurs vérifiés selon vos besoins.\",\n    \"homepage.process.step2.title\": \"2. Comparez\",\n    \"homepage.process.step2.description\": \"Évaluez les prix, la qualité, les certifications et les avis pour choisir le meilleur fournisseur.\",\n    \"homepage.process.step3.title\": \"3. Contactez\",\n    \"homepage.process.step3.description\": \"Échangez directement avec les fournisseurs pour négocier les prix et demander des échantillons.\",\n    \"homepage.process.step4.title\": \"4. Commandez\",\n    \"homepage.process.step4.description\": \"Finalisez votre commande en toute sécurité avec notre système de paiement protégé.\",\n    \"homepage.process.cta\": \"Commencer maintenant\",\n\n    \"homepage.optimize.title\": \"Optimisez votre processus d": "navigation.urldoitcontenirlebon",
  "URL pour le téléchargement\r\n        };\r\n      });\r\n\r\n      setDocuments(prev => [...newDocuments, ...prev]);\r\n      \r\n      // Afficher un message de succès\r\n      const successCount = results.filter(r => r.success).length;\r\n      alert(`${successCount}/${files.length} document(s) téléchargé(s) avec succès !`);\r\n    } catch (error) {\r\n      console.error(": "common.urlpourletelechargem1",
  "Une erreur est survenue lors de la connexion Google": "auth.uneerreurestsurvenue",
  "Une erreur est survenue lors de la connexion Google.": "auth.uneerreurestsurvenue3",
  "Une erreur inattendue est survenue lors de la connexion Google.": "auth.uneerreurinattenduee",
  "Utilisateur SANS déconnexion admin\r\n * \r\n * Ce service permet de créer des utilisateurs depuis l": "auth.utilisateursansdecon2",
  "Utilisateur admin configuré avec succès. Reconnectez-vous pour tester la redirection.": "admin.utilisateuradminconf1",
  "Utilisateur créant de multiples comptes": "admin.utilisateurcreantdem1",
  "Utilisateur créé dans Firestore uniquement. En production, utilisez Firebase Admin SDK pour créer aussi dans Firebase Auth.": "admin.utilisateurcreedansf2",
  "Utilisateur créé dans Firestore. Firebase Auth doit être configuré séparément.": "admin.utilisateurcreedansf4",
  "Utilisateur déconnecté": "admin.utilisateurdeconnect1",
  "Utilisateur influenceur créé:": "admin.utilisateurinfluence1",
  "Utilisateur mis à jour avec succès": "admin.utilisateurmisajoura5",
  "Utilisateur non trouvé": "admin.utilisateurnontrouve1",
  "Utilisateurs": "admin.utilisateurs1",
  "Utilisateurs\r\n                    <": "admin.utilisateurs2",
  "Utilisateurs de test créés avec succès (Firestore seulement) !": "admin.utilisateursdetestcr2",
  "Utilisez nos filtres avancés pour trouver exactement ce que vous cherchez parmi des millions de produits.": "ecommerce.utiliseznosfiltresav2",
  "Validation réussie": "common.validationreussie1",
  "Vase Céramique": "common.vaseceramique1",
  "Vendre vos produits aux clients": "ecommerce.vendrevosproduitsaux",
  "Veste imperméable fabriquée à partir de matériaux recyclés, respectueuse de l\\": "common.vesteimpermeablefabr1",
  "Veste imperméable recyclée": "common.vesteimpermeablerecy7",
  "Veuillez renseigner les liens de vos profils": "common.veuillezrenseignerle",
  "Veuillez renseigner les liens de vos profils pour chaque réseau social sélectionné :": "common.veuillezrenseignerle3",
  "Veuillez sélectionner au moins un réseau social": "common.veuillezselectionner1",
  "Veuillez sélectionner une image valide": "common.veuillezselectionner3",
  "Vidéo de présentation ou lien YouTube (optionnel)": "common.videodepresentationo1",
  "Visibilité du profil modifiée": "common.visibiliteduprofilmo2",
  "Você deve aceitar os termos e condições": "common.vocedeveaceitaroster1",
  "Voir les détails": "common.voirlesdetails2",
  "Voir tous les produits": "ecommerce.voirtouslesproduits1",
  "Voir toutes les catégories": "common.voirtouteslescategor1",
  "Votre commande #ORD-2024-002 a été expédiée avec le numéro de suivi TRK987654321": "ecommerce.votrecommandeord20241",
  "Votre commande a été expédiée.": "ecommerce.votrecommandeaeteexp1",
  "Votre compte sera validé manuellement par notre équipe": "common.votrecompteseravalid3",
  "Votre demande a été envoyée pour validation": "common.votredemandeaeteenvo3",
  "Votre précommande a été enregistrée avec succès !": "ecommerce.votreprecommandeaete1",
  "Vous avez déjà un compte ?": "common.vousavezdejauncompte1",
  "Vous devez accepter la vérification de vos informations": "common.vousdevezaccepterlav2",
  "Vous devez accepter les conditions générales": "common.vousdevezaccepterles2",
  "Vous devez être connecté avec admin@chinetonusine.com": "admin.vousdevezetreconnect1",
  "Vous devez être connecté en tant qu\\": "common.vousdevezetreconnect10",
  "Vous pouvez ajouter jusqu": "forms.vouspouvezajouterjus",
  "Vous pouvez ajouter jusqu'à 8 images. Formats acceptés: JPG, PNG, GIF. Taille max par image.": "forms.vouspouvezajouterjus1",
  "Vous serez contacté pour finaliser votre inscription fournisseur": "auth.vousserezcontactepou2",
  "Vous serez contacté pour finaliser votre inscription sourceur": "auth.vousserezcontactepou5",
  "Vue d'ensemble de votre activité": "common.vuedensembledevotrea1",
  "Vues produits": "ecommerce.vuesproduits",
  "Vérification de la session...": "common.verificationdelasess4",
  "Vérification qualité pré-expédition": "common.verificationqualitep1",
  "Vérifié": "common.verifie2",
  "Vérifiés": "common.verifies2",
  "Vêtements": "common.vetements11",
  "Vêtements de travail": "common.vetementsdetravail1",
  "Vêtements et accessoires": "common.vetementsetaccessoir1",
  "You have no notifications at the moment": "common.youhavenonotificatio",
  "You must accept the terms and conditions": "common.youmustaccepttheterm",
  "You will be contacted to finalize your sourcer registration": "common.youwillbecontactedto",
  "You will be contacted to finalize your supplier registration": "ecommerce.youwillbecontactedto",
  "Your Profile Links": "common.yourprofilelinks",
  "Yuan chinois": "common.yuanchinois2",
  "Zhongshan, Chine": "common.zhongshanchine1",
  "\\n👥 Création de nouveaux utilisateurs...\\n": "admin.ncreationdenouveauxu",
  "\\n👥 Création des comptes utilisateurs...\\n": "admin.ncreationdescomptesu2",
  "\\n💡 Utilisez ces identifiants pour tester les différents rôles de l\\": "common.nutilisezcesidentifi1",
  "\\n💾 Vérification en Firestore...": "common.nverificationenfires1",
  "\\n📊 Statistiques des utilisateurs...": "admin.nstatistiquesdesutil",
  "\\n📱 Vérification de l\\": "common.nverificationdel",
  "\\n🔐 === IDENTIFIANTS CRÉÉS ===": "common.nidentifiantscrees",
  "\\n🔐 Vérification du rôle admin...": "admin.nverificationdurolea1",
  "\\n🔑 INFORMATIONS DE CONNEXION DES UTILISATEURS DE TEST:": "auth.ninformationsdeconne",
  "]\r\n                  });\r\n                }}\r\n                className=\"w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              >\r\n                <option value=\"all\">Tous les types</option>\r\n                <option value=\"order\">Commandes</option>\r\n                <option value=\"payment\">Paiements</option>\r\n                <option value=\"shipment\">Expéditions</option>\r\n                <option value=\"system\">Système</option>\r\n                <option value=\"info\">Informations</option>\r\n                <option value=\"warning\">Avertissements</option>\r\n                <option value=\"error\">Erreurs</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"flex space-x-2\">\r\n              <button\r\n                onClick={clearFilters}\r\n                className=\"flex-1 px-3 py-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\r\n              >\r\n                Effacer\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Actions */}\r\n        {unreadCount > 0 && (\r\n          <div className=\"p-4 border-b border-gray-200 dark:border-gray-600\">\r\n            <button\r\n              onClick={handleMarkAllAsRead}\r\n              disabled={markingAllAsRead}\r\n              className=\"w-full flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n              {markingAllAsRead ? (\r\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n              ) : (\r\n                <CheckCheck className=\"h-4 w-4\" />\r\n              )}\r\n              <span>Marquer tout comme lu</span>\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Liste des notifications */}\r\n        <div\r\n          ref={scrollContainerRef}\r\n          className=\"flex-1 overflow-y-auto\"\r\n        >\r\n          {error && (\r\n            <div className=\"p-4 m-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\r\n              <div className=\"flex items-center space-x-2 text-red-800 dark:text-red-300\">\r\n                <AlertCircle className=\"h-5 w-5\" />\r\n                <p className=\"text-sm\">{error}</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {notifications.length === 0 && !loading ? (\r\n            <div className=\"flex flex-col items-center justify-center h-full p-8 text-gray-500 dark:text-gray-400\">\r\n              <Bell className=\"h-12 w-12 mb-4 opacity-50\" />\r\n              <p className=\"text-lg font-medium mb-2\">Aucune notification</p>\r\n              <p className=\"text-sm text-center\">\r\n                Vous n": "forms.classnamewfullpx3py22",
  "]\r\n        },\r\n        (fileIndex, progress) => {\r\n          console.log(`Fichier ${fileIndex + 1}: ${progress}% uploadé`);\r\n        }\r\n      );\r\n\r\n      // Ajouter les nouveaux documents à la liste\r\n      const newDocuments = files.map((file, index) => {\r\n        const result = results[index];\r\n        return {\r\n          id: `new-${Date.now()}-${index}`,\r\n          name: file.name,\r\n          type: metadata.type,\r\n          size: formatFileSize(file.size),\r\n          uploadDate: new Date().toISOString().split(": "forms.fileindexprogresscon2",
  "]\r\n        },\r\n        (fileIndex, progress) => {\r\n          console.log(`Fichier ${fileIndex + 1}: ${progress}%`);\r\n        }\r\n      );\r\n\r\n      const successUrls = results\r\n        .filter(result => result.success)\r\n        .map(result => result.url!)\r\n        .filter(Boolean);\r\n\r\n      setUploadedFiles(prev => [...prev, ...successUrls]);\r\n      \r\n      alert(`${successUrls.length}/${files.length} fichiers uploadés avec succès !`);\r\n    } catch (error) {\r\n      console.error(": "common.fileindexprogresscon1",
  "]\r\n      }\r\n    ];\r\n    \r\n    for (const product of additionalProducts) {\r\n      await productService.addProduct(product);\r\n    }\r\n    \r\n    console.log(`✅ ${additionalProducts.length} produits de test ajoutés !`);\r\n    return { success: true, count: additionalProducts.length };\r\n    \r\n  } catch (error) {\r\n    console.error(": "forms.forconstproductofadd2",
  "] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600\"></div>\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderSecuritySettings = () => (\r\n    <div className=\"space-y-6\">\r\n      <div>\r\n        <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Sécurité du compte</h3>\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n            <div>\r\n              <p className=\"font-medium text-gray-900 dark:text-white\">Authentification à deux facteurs</p>\r\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">Ajouter une couche de sécurité supplémentaire</p>\r\n            </div>\r\n            <label className=\"relative inline-flex items-center cursor-pointer\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.security.twoFactorAuth}\r\n                onChange={(e) => handleInputChange(": "forms.afterabsoluteafterto",
  "],\r\n                createdAt: new Date(),\r\n                updatedAt: new Date()\r\n            },\r\n            {\r\n                influencerId: profileRef.id,\r\n                brand: ": "common.createdatnewdateupda1",
  "],\r\n    commissionRate: 5.0,\r\n    minOrderAmount: 100,\r\n    // Paramètres de sécurité par défaut\r\n    passwordMinLength: 8,\r\n    passwordRequireUppercase: true,\r\n    passwordRequireNumbers: true,\r\n    passwordRequireSymbols: false,\r\n    sessionTimeout: 30,\r\n    maxLoginAttempts: 5,\r\n    lockoutDuration: 15,\r\n    twoFactorRequired: false,\r\n    ipWhitelistEnabled: false,\r\n    allowedIPs: [": "auth.commissionrate50mino2",
  "],\r\n    lastMessage: mockMessages[1],\r\n    unreadCount: 0,\r\n    subject: ": "common.lastmessagemockmessa",
  "],\r\n    lastMessage: mockMessages[2],\r\n    unreadCount: 1,\r\n    subject: ": "common.lastmessagemockmessa1",
  "],\r\n    lastMessage: mockMessages[3],\r\n    unreadCount: 0,\r\n    subject: ": "common.lastmessagemockmessa2",
  "], // Image par défaut si pas d": "common.imagepardefautsipasd1",
  "].map((filter) => (\r\n                        <button\r\n                            key={filter}\r\n                            className=\"px-4 py-2 bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors\"\r\n                        >\r\n                            {getStatusText(filter)}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"grid gap-6\">\r\n                {collaborations.map((collab) => (\r\n                    <div\r\n                        key={collab.id}\r\n                        className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 border border-gray-200 dark:border-gray-700 hover:shadow-lg transition-all duration-300\"\r\n                    >\r\n                        <div className=\"flex items-start justify-between mb-4\">\r\n                            <div>\r\n                                <div className=\"flex items-center gap-3 mb-2\">\r\n                                    <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n                                        {collab.brand}\r\n                                    </h3>\r\n                                    <span className={`px-3 py-1 rounded-full text-sm font-medium flex items-center gap-1 ${getStatusColor(collab.status)}`}>\r\n                                        {getStatusIcon(collab.status)}\r\n                                        {getStatusText(collab.status)}\r\n                                    </span>\r\n                                </div>\r\n                                <p className=\"text-lg text-gray-700 dark:text-gray-300 font-medium\">\r\n                                    {collab.campaign}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"text-right\">\r\n                                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n                                    {collab.budget.toLocaleString()}€\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\r\n                            {collab.description}\r\n                        </p>\r\n\r\n                        <div className=\"grid md:grid-cols-2 gap-6 mb-4\">\r\n                            <div>\r\n                                <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">\r\n                                    Période\r\n                                </h4>\r\n                                <div className=\"flex items-center gap-2 text-gray-600 dark:text-gray-400\">\r\n                                    <Calendar size={16} />\r\n                                    <span>\r\n                                        {new Date(collab.startDate).toLocaleDateString()} - {new Date(collab.endDate).toLocaleDateString()}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">\r\n                                    Exigences\r\n                                </h4>\r\n                                <div className=\"space-y-1\">\r\n                                    {collab.requirements.map((req, index) => (\r\n                                        <div key={index} className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                                            <div className=\"w-1.5 h-1.5 bg-blue-500 rounded-full\"></div>\r\n                                            {req}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"flex gap-3\">\r\n                            <button className=\"flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2\">\r\n                                <Eye size={16} />\r\n                                Voir détails\r\n                            </button>\r\n                            {collab.status === ": "forms.mapfilterbuttonkeyfi",
  "];\r\n\r\nconst ProductsPage: React.FC = () => {\r\n    // Récupération des produits depuis Firebase\r\n    const { products, loading, error } = useProducts();\r\n    const { filteredProducts, filters, updateFilters } = useProductFilters(products);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n\r\n    ": "forms.constproductspagerea1",
  "];\r\n\r\nconst ProductsPage: React.FC = () => {\r\n    // Récupération des produits depuis Firebase\r\n    const { products, loading, error } = useProducts();\r\n    const { filteredProducts, filters, updateFilters } = useProductFilters(products);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n\r\n    // États locaux\r\n    const [selectedProduct, setSelectedProduct] = useState<ProductListItem | null>(null);\r\n    const [showQuickView, setShowQuickView] = useState(false);\r\n    const [quantities, setQuantities] = useState<Record<string, number>>({});\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    ": "forms.constproductspagerea2",
  "];\r\n\r\nconst ProductsPage: React.FC = () => {\r\n    // Récupération des produits depuis Firebase\r\n    const { products, loading, error } = useProducts();\r\n    const { filteredProducts, filters, updateFilters } = useProductFilters(products);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n\r\n    // États locaux\r\n    const [selectedProduct, setSelectedProduct] = useState<ProductListItem | null>(null);\r\n    const [showQuickView, setShowQuickView] = useState(false);\r\n    const [quantities, setQuantities] = useState<Record<string, number>>({});\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    // Fonctions utilitaires\r\n    const toggleFavorite = (productId: string) => {\r\n        setFavorites(prev => {\r\n            const newFavorites = new Set(prev);\r\n            if (newFavorites.has(productId)) {\r\n                newFavorites.delete(productId);\r\n            } else {\r\n                newFavorites.add(productId);\r\n            }\r\n            return newFavorites;\r\n        });\r\n    };\r\n\r\n    const updateQuantity = (productId: string, quantity: number) => {\r\n        const product = products.find(p => p.id === productId);\r\n        if (product && quantity >= product.moq) {\r\n            setQuantities(prev => ({ ...prev, [productId]: quantity }));\r\n        }\r\n    };\r\n\r\n    const getQuantity = (productId: string) => {\r\n        const product = products.find(p => p.id === productId);\r\n        return quantities[productId] || product?.moq || 0;\r\n    };\r\n\r\n    const calculateTotal = (product: ProductListItem, quantity: number) => {\r\n        let price = product.price * quantity;\r\n        if (product.discount && quantity >= product.discount.minQty) {\r\n            price = price * (1 - product.discount.percentage / 100);\r\n        }\r\n        return price;\r\n    };\r\n\r\n    const openQuickView = (product: ProductListItem) => {\r\n        setSelectedProduct(product);\r\n        setShowQuickView(true);\r\n        document.body.style.overflow = ": "forms.constproductspagerea3",
  "];\r\n\r\nconst ProductsPage: React.FC = () => {\r\n    // Récupération des produits depuis Firebase\r\n    const { products, loading, error } = useProducts();\r\n    const { filteredProducts, filters, updateFilters } = useProductFilters(products);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n\r\n    // États locaux\r\n    const [selectedProduct, setSelectedProduct] = useState<ProductListItem | null>(null);\r\n    const [showQuickView, setShowQuickView] = useState(false);\r\n    const [quantities, setQuantities] = useState<Record<string, number>>({});\r\n    const [showFilters, setShowFilters] = useState(false);\r\n        stock: 50000,\r\n        tags: [": "forms.constproductspagerea5",
  "];\r\n\r\nconst ProductsPageB2B: React.FC = () => {\r\n    // Récupération des produits depuis Firebase\r\n    const { products, loading, error } = useProducts();\r\n    const { filteredProducts, filters, updateFilters } = useProductFilters(products);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n\r\n    ": "forms.constproductspageb2b",
  "];\r\n\r\nconst ProductsPageB2B: React.FC = () => {\r\n    // Récupération des produits depuis Firebase\r\n    const { products, loading, error } = useProducts();\r\n    const { filteredProducts, filters, updateFilters } = useProductFilters(products);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n\r\n    // États locaux\r\n    const [selectedProduct, setSelectedProduct] = useState<ProductListItem | null>(null);\r\n    const [showQuickView, setShowQuickView] = useState(false);\r\n    const [quantities, setQuantities] = useState<Record<string, number>>({});\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    ": "forms.constproductspageb2b1",
  "];\r\n\r\nconst ProductsPageB2B: React.FC = () => {\r\n    // Récupération des produits depuis Firebase\r\n    const { products, loading, error } = useProducts();\r\n    const { filteredProducts, filters, updateFilters } = useProductFilters(products);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n\r\n    // États locaux\r\n    const [selectedProduct, setSelectedProduct] = useState<ProductListItem | null>(null);\r\n    const [showQuickView, setShowQuickView] = useState(false);\r\n    const [quantities, setQuantities] = useState<Record<string, number>>({});\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    // Fonctions utilitaires\r\n    const updateQuantity = (productId: string, quantity: number) => {\r\n        const product = products.find(p => p.id === productId);\r\n        if (product && quantity >= product.moq) {\r\n            setQuantities(prev => ({ ...prev, [productId]: quantity }));\r\n        }\r\n    };\r\n\r\n    const getQuantity = (productId: string) => {\r\n        const product = products.find(p => p.id === productId);\r\n        return quantities[productId] || product?.moq || 0;\r\n    };\r\n\r\n    const calculateTotal = (product: ProductListItem, quantity: number) => {\r\n        let price = product.price * quantity;\r\n        if (product.discount && quantity >= product.discount.minQty) {\r\n            price = price * (1 - product.discount.percentage / 100);\r\n        }\r\n        return price;\r\n    };\r\n\r\n    const openQuickView = (product: ProductListItem) => {\r\n        setSelectedProduct(product);\r\n        setShowQuickView(true);\r\n        document.body.style.overflow = ": "forms.constproductspageb2b2",
  "];\r\n\r\nconst ProductsPageB2B: React.FC = () => {\r\n    // Récupération des produits depuis Firebase\r\n    const { products, loading, error } = useProducts();\r\n    const { filteredProducts, filters, updateFilters } = useProductFilters(products);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n    const { showToast } = useToast();\r\n\r\n    ": "forms.constproductspageb2b3",
  "];\r\n\r\nconst ProductsPageB2B: React.FC = () => {\r\n    // Récupération des produits depuis Firebase\r\n    const { products, loading, error } = useProducts();\r\n    const { filteredProducts, filters, updateFilters } = useProductFilters(products);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n    const { showToast } = useToast();\r\n\r\n    // États locaux\r\n    const [selectedProduct, setSelectedProduct] = useState<ProductListItem | null>(null);\r\n    const [showQuickView, setShowQuickView] = useState(false);\r\n    const [quantities, setQuantities] = useState<Record<string, number>>({});\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    ": "forms.constproductspageb2b4",
  "];\r\n\r\nconst ProductsPageB2B: React.FC = () => {\r\n    // Récupération des produits depuis Firebase\r\n    const { products, loading, error } = useProducts();\r\n    const { filteredProducts, filters, updateFilters } = useProductFilters(products);\r\n\r\n    // Contextes pour favoris et devis\r\n    const { toggleFavorite, isFavorite } = useFavorites();\r\n    const { addToQuote, getItemQuantity } = useQuote();\r\n    const { showToast } = useToast();\r\n\r\n    // États locaux\r\n    const [selectedProduct, setSelectedProduct] = useState<ProductListItem | null>(null);\r\n    const [showQuickView, setShowQuickView] = useState(false);\r\n    const [quantities, setQuantities] = useState<Record<string, number>>({});\r\n    const [showFilters, setShowFilters] = useState(false);\r\n\r\n    // Fonctions utilitaires\r\n    const updateQuantity = (productId: string, quantity: number) => {\r\n        const product = products.find(p => p.id === productId);\r\n        if (product && quantity >= product.moq) {\r\n            setQuantities(prev => ({ ...prev, [productId]: quantity }));\r\n        }\r\n    };\r\n\r\n    const getQuantity = (productId: string) => {\r\n        const product = products.find(p => p.id === productId);\r\n        return quantities[productId] || product?.moq || 0;\r\n    };\r\n\r\n    const calculateTotal = (product: ProductListItem, quantity: number) => {\r\n        let price = product.price * quantity;\r\n        if (product.discount && quantity >= product.discount.minQty) {\r\n            price = price * (1 - product.discount.percentage / 100);\r\n        }\r\n        return price;\r\n    };\r\n\r\n    const openQuickView = (product: ProductListItem) => {\r\n        setSelectedProduct(product);\r\n        setShowQuickView(true);\r\n        document.body.style.overflow = ": "forms.constproductspageb2b5",
  "];\r\n  dateFrom?: Date;\r\n  dateTo?: Date;\r\n}\r\n\r\nexport interface NotificationResponse {\r\n  notifications: Notification[];\r\n  total: number;\r\n  unreadCount: number;\r\n  hasMore: boolean;\r\n}\r\n\r\nexport interface CreateNotificationRequest {\r\n  title: string;\r\n  message: string;\r\n  type: Notification[": "common.datefromdatedatetoda",
  "]}\r\n                    onSearch={setSearchTerm}\r\n                    filterComponent={<FilterComponent />}\r\n                    emptyMessage=\"Aucune entreprise trouvée\"\r\n                    loading={loading}\r\n                />\r\n            </div>\r\n\r\n            {/* Indicateurs de performance (development only) */}\r\n            {process.env.NODE_ENV === ": "common.onsearchsetsearchter",
  "]}\r\n              />\r\n            </div>\r\n\r\n            {/* Information sur les formats acceptés *": "common.divinformationsurles",
  "]}\r\n              />\r\n            </div>\r\n\r\n            {/* Information sur les formats acceptés */}\r\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\r\n              <h4 className=\"text-sm font-medium text-blue-800 dark:text-blue-200 mb-2\">\r\n                Formats acceptés\r\n              </h4>\r\n              <ul className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\r\n                <li>• Documents: PDF, DOC, DOCX, TXT</li>\r\n                <li>• Images: JPG, JPEG, PNG</li>\r\n                <li>• Taille maximum: 20 MB par fichier</li>\r\n                <li>• Maximum 5 fichiers par upload</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Footer */}\r\n          <div className=\"px-6 py-4 bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 flex justify-end space-x-3\">            <Button\r\n              onClick={onClose}\r\n              variant=\"outline\"\r\n              disabled={isUploading}\r\n            >\r\n              {t(": "forms.divinformationsurles",
  "]}\r\n            />\r\n          </div>\r\n\r\n          {/* Liste des fichiers uploadés *": "common.divlistedesfichiersu",
  "]}\r\n            />\r\n          </div>\r\n\r\n          {/* Liste des fichiers uploadés */}\r\n          {uploadedFiles.length > 0 && (\r\n            <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Fichiers uploadés ({uploadedFiles.length})</h3>\r\n              <div className=\"space-y-2\">\r\n                {uploadedFiles.map((url, index) => (\r\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <FileText className=\"w-5 h-5 text-blue-500\" />\r\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                        {url.split(": "forms.divlistedesfichiersu",
  "]}\r\n          </div>\r\n          <div>\r\n            <strong>Types supportés :<": "common.divdivstrongtypessup1",
  "]}\r\n          </div>\r\n          <div>\r\n            <strong>Types supportés :</strong> PDF, DOC, DOCX, TXT, JPG, PNG, XLSX\r\n          </div>\r\n          <div>\r\n            <strong>Taille max :</strong> 10MB par fichier (documents), 5MB (images)\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\r\n          <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\r\n            <strong>Note :</strong> Actuellement en mode simulation. Les fichiers ne sont pas réellement stockés. \r\n            Pour activer l": "forms.divdivstrongtypessup",
  "]}>\r\n                        <SupplierMessagesPage ": "ecommerce.suppliermessagespage",
  "]}>\r\n            <AdminDatabasePage />\r\n          </RoleBasedRoute>\r\n        }\r\n      />\r\n\r\n      {/* Pages pour le profil utilisateur *": "admin.admindatabasepagerol",
  "]}>\r\n            <SupplierMessagesPage ": "ecommerce.suppliermessagespage1",
  "`);\r\n    \r\n    // 5. Tester la récupération par ID\r\n    if (products.length > 0) {\r\n      const firstProduct = products[0];\r\n      if (firstProduct.id) {\r\n        console.log(": "ecommerce.5testerlarecuperatio",
  "`);\r\n      }\r\n      \r\n      setShowAddModal(false);\r\n    } catch (err) {\r\n      console.error('Erreur lors de la sauvegarde:', err);\r\n      error('Erreur lors de la sauvegarde du produit');\r\n    }\r\n  };\r\n  const handleDeleteProduct = (productId: string) => {\r\n    if (confirm(t('supplier.products.deleteConfirm'))) {\r\n      setProductsList(prev => prev.filter(p => p.id !== productId));\r\n      success(t('supplier.products.deleteSuccess'));\r\n    }\r\n  };\r\n\r\n  const handleResetToDefault = () => {\r\n    if (confirm('Êtes-vous sûr de vouloir restaurer les produits par défaut ? Tous vos produits ajoutés seront perdus.')) {\r\n      setProductsList(products);\r\n      localStorage.removeItem(STORAGE_KEY);\r\n      // Réinitialiser aussi le service global\r\n      productsService.resetToDefault();\r\n      success(t('supplier.products.resetSuccess'));\r\n    }\r\n  };\r\n  return (\r\n    <SupplierLayout>\r\n      <div className=": "forms.setshowaddmodalfalse",
  "`);\r\n      }\r\n      \r\n      setShowAddModal(false);\r\n    } catch (err) {\r\n      console.error('Erreur lors de la sauvegarde:', err);\r\n      error(t('supplier.products.error.save'));\r\n    }\r\n  };\r\n\r\n  const handleDeleteProduct = (productId: string) => {    if (confirm(t('supplier.products.confirm.delete'))) {\r\n      setProductsList(prev => prev.filter(p => p.id !== productId));\r\n      success(t('supplier.products.success.deleted'));\r\n    }\r\n  };\r\n\r\n  const handleResetToDefault = () => {    if (confirm(t('supplier.products.confirm.reset'))) {\r\n      setProductsList(products);\r\n      localStorage.removeItem(STORAGE_KEY);\r\n      // Réinitialiser aussi le service global\r\n      productsService.resetToDefault();\r\n      success(t('supplier.products.success.reset'));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=": "forms.setshowaddmodalfalse1",
  "`);\r\n      } else {\r\n        // Créer un produit simple pour la démonstration\r\n        const newProduct: Product = {\r\n          ...products[0], ": "ecommerce.elsecreerunproduitsi3",
  "`);\r\n      } else {\r\n        // Créer un produit simple pour la démonstration\r\n        const newProduct: Product = {\r\n          ...products[0], // Copier toute la structure existante\r\n          id: `prod_${Date.now()}`,\r\n          name: productData.name,\r\n          category: productData.category,\r\n          description: {\r\n            ...(products[0].description as any),\r\n            fr: productData.description || `Description de ${productData.name}`\r\n          },\r\n          images: productData.images && productData.images.length > 0 \r\n            ? productData.images \r\n            : ['/api/placeholder/100/100'],\r\n          moq: productData.minOrder || 1,\r\n          price: {\r\n            cny: productData.price || 0,\r\n            unitCny: productData.price || 0\r\n          },\r\n          specifications: {\r\n            ...(products[0].specifications || {}),\r\n            brand: productData.brand || 'Marque inconnue',\r\n            origin: productData.origin || 'Origine inconnue',\r\n            material: productData.material || 'Matériau non spécifié',\r\n            modelNumber: productData.modelNumber || productData.sku || ''\r\n          }\r\n        };\r\n        \r\n        setProductsList(prev => [newProduct, ...prev]);\r\n        success(`${t('supplier.products.addSuccess')} ": "forms.elsecreerunproduitsi",
  "`);\r\n      } else {\r\n        // Créer un produit simple pour la démonstration\r\n        const newProduct: Product = {\r\n          ...products[0], // Copier toute la structure existante\r\n          id: `prod_${Date.now()}`,\r\n          name: productData.name,\r\n          category: productData.category,\r\n          description: {\r\n            ...(products[0].description as { fr?: string }),\r\n            fr: productData.description || `Description de ${productData.name}`\r\n          },\r\n          images: productData.images && productData.images.length > 0 \r\n            ? productData.images \r\n            : ['/api/placeholder/100/100'],\r\n          moq: productData.minOrder || 1,\r\n          price: {\r\n            cny: productData.price || 0,\r\n            unitCny: productData.price || 0\r\n          },\r\n          specifications: {\r\n            ...(products[0].specifications || {}),\r\n            brand: productData.brand || 'Marque inconnue',\r\n            origin: productData.origin || 'Origine inconnue',\r\n            material: productData.material || 'Matériau non spécifié',\r\n            modelNumber: productData.modelNumber || productData.sku || ''\r\n          }\r\n        };\r\n        \r\n        setProductsList(prev => [newProduct, ...prev]);\r\n        success(`${t('supplier.products.success.added')} ": "forms.elsecreerunproduitsi1",
  "`}\r\n            </div>\r\n\r\n            {/* Liste avec pagination pour éviter la virtualisation complexe *": "common.divlisteavecpaginati",
  "`}\r\n            </div>\r\n\r\n            {/* Liste avec pagination pour éviter la virtualisation complexe */}\r\n            {filteredItems.length === 0 ? (\r\n                <div className=": "forms.divlisteavecpaginati",
  "abonnement au démontage\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  // Synchronise l’URL et la sélection\r\n  useEffect(() => {\r\n    const match = location.pathname.match(": "forms.abonnementaudemontag",
  "abonnement au démontage\r\n    return unsubscribe;\r\n  }, []);const handleSearch = (filters: SearchFilters) => {\r\n    // Filtrer les produits selon les critères\r\n    const filtered = allProducts.filter(() => {\r\n      ": "ecommerce.abonnementaudemontag",
  "abonnement au démontage\r\n    return unsubscribe;\r\n  }, []);const handleSearch = (filters: SearchFilters) => {\r\n    // Filtrer les produits selon les critères\r\n    const filtered = allProducts.filter(() => {\r\n      // TODO: Implémenter les filtres complets\r\n      return true; ": "ecommerce.abonnementaudemontag1",
  "abonnement au démontage\r\n    return unsubscribe;\r\n  }, []);const handleSearch = (filters: SearchFilters) => {\r\n    // Filtrer les produits selon les critères\r\n    const filtered = allProducts.filter(() => {\r\n      // TODO: Implémenter les filtres complets\r\n      return true; // Pour l": "ecommerce.abonnementaudemontag2",
  "abonner aux changements pour mise à jour automatique\r\n    const unsubscribe = productsService.subscribe(loadProducts);\r\n    \r\n    ": "ecommerce.abonnerauxchangement1",
  "abonner aux changements pour mise à jour automatique\r\n    const unsubscribe = productsService.subscribe(loadProducts);\r\n    \r\n    // Nettoyer l": "ecommerce.abonnerauxchangement2",
  "abonnés *": "common.abonnes",
  "abord créer dans Supabase Auth\r\n            const { data, error } = await fetch(": "common.abordcreerdanssupaba1",
  "abord le profil influenceur pour avoir l": "common.abordleprofilinfluen1",
  "accepte de partager mes statistiques détaillées sur demande": "common.acceptedepartagermes",
  "accepte de partager mes statistiques détaillées sur demande\",\n    \"mediaKit\": \"Kit média\",\n    \"message\": \"Message\",\n    \"messagePlaceholder\": \"Présentez-vous brièvement\",\n    \"socialMediaLinks\": \"Liens vers les réseaux sociaux\",\n    \"socialMediaLinksPlaceholder\": \"Instagram, TikTok, YouTube, etc.\",\n    \"followerCount\": \"Nombre de followers\",\n    \"followerCountPlaceholder\": \"Nombre de followers pour chaque réseau\",\n    \"category\": \"Catégorie d": "forms.acceptedepartagermes",
  "accepte les conditions générales": "common.acceptelesconditions1",
  "accepte les conditions générales\",\n    \"preorder.termsRequired\": \"Vous devez accepter les conditions générales\",\n\n    // Traductions pour les articles de conteneurs\n    \"containerItems.title\": \"Articles du conteneur\",\n    \"containerItems.productId\": \"ID Produit\",\n    \"containerItems.quantity\": \"Quantité\",\n    \"containerItems.userId\": \"Utilisateur\",\n    \"containerItems.loading\": \"Chargement des articles...\",\n    \"containerItems.error\": \"Erreur lors du chargement des articles\",\n    \"containerItems.noItems\": \"Aucun article dans ce conteneur\",\n    \"containerItems.addItem\": \"Ajouter un article\",\n\n    // Traductions communes\n    \"units\": \"unités\",\n    \"cbm\": \"CBM\",\n    \"cancel\": \"Annuler\",\n    \"confirm\": \"Confirmer\",\n    \"close\": \"Fermer\"\n  },\n  \"en\": {\n    \"home\": \"Home\",\n    \"search\": \"Search\",\n    \"search.placeholder\": \"Search for products...\",\n    \"dashboard\": \"Dashboard\",\n    \"nav.login\": \"Login\",\n    \"logout\": \"Logout\",\n    \"discover\": \"Discover\",\n\n    \"notifications.title\": \"Notifications\",\n    \"notifications.noNotifications\": \"No notifications\",\n    \"notifications.noNotificationsMessage\": \"You have no notifications at the moment\",\n    \"notifications.markAllAsRead\": \"Mark all as read\",\n    \"notifications.markAsRead\": \"Mark as read\",\n    \"notifications.refresh\": \"Refresh\",\n    \"notifications.filters\": \"Filters\",\n    \"notifications.status\": \"Status\",\n    \"notifications.type\": \"Type\",\n    \"notifications.all\": \"All\",\n    \"notifications.unread\": \"Unread\",\n    \"notifications.read\": \"Read\",\n    \"notifications.allTypes\": \"All types\",\n    \"notifications.orders\": \"Orders\",\n    \"notifications.payments\": \"Payments\",\n    \"notifications.shipments\": \"Shipments\",\n    \"notifications.system\": \"System\",\n    \"notifications.info\": \"Information\",\n    \"notifications.warnings\": \"Warnings\",\n    \"notifications.errors\": \"Errors\",\n    \"notifications.clearFilters\": \"Clear\",\n    \"notifications.loading\": \"Loading...\",\n    \"notifications.error\": \"Error loading notifications\",\n    \"notifications.seeDetails\": \"See details\",\n    \"notifications.timeAgo.now\": \"Just now\",\n    \"notifications.timeAgo.minutes\": \"{0} min ago\",\n    \"notifications.timeAgo.hours\": \"{0}h ago\",\n    \"notifications.timeAgo.days\": \"{0}d ago\",\n    \"notifications.priority.urgent\": \"Urgent\",\n    \"notifications.priority.high\": \"High\",\n    \"notifications.priority.medium\": \"Medium\",\n    \"notifications.priority.low\": \"Low\",\n    \"notifications.allLoaded\": \"All notifications have been loaded\",\n    \"notifications.count.singular\": \"{0} unread\",\n    \"notifications.count.plural\": \"{0} unread\",\n\n    \"email\": \"Email\",\n    \"password\": \"Password\",\n    \"confirmPassword\": \"Confirm Password\",\n    \"login\": \"Login\",\n    \"register\": \"Register\",\n    \"loginDescription\": \"Sign in to access your account\",\n    \"accountType\": \"Account Type\",\n    \"role.customer\": \"Customer\",\n    \"role.supplier\": \"Supplier\",\n    \"role.sourcer\": \"Sourcer\",\n    \"role.influencer\": \"Influencer\",\n    \"emailPlaceholder\": \"your@email.com\",\n    \"passwordPlaceholder\": \"••••••••\",\n    \"rememberMe\": \"Remember me\",\n    \"forgotPassword\": \"Forgot password?\",\n    \"loginButton\": \"Sign in\",\n    \"loggingIn\": \"Signing in...\",\n    \"createAccount\": \"Create Account\",\n    \"registerDescription\": \"Create your account to get started\",\n    \"fullName\": \"Full Name\",\n    \"yourNamePlaceholder\": \"Your full name\",\n    \"nameRequired\": \"Name is required\",\n    \"emailRequired\": \"Email is required\",\n    \"passwordMinLength\": \"Password must be at least 6 characters\",\n    \"passwordsDoNotMatch\": \"Passwords do not match\",\n    \"registrationError\": \"Registration error\",\n    \"creatingAccount\": \"Creating account...\",\n    \"createMyAccount\": \"Create My Account\",\n    \"hasAccountQuestion\": \"Already have an account?\",\n    \"role.customerTitle\": \"Customer\",\n    \"role.supplierTitle\": \"Supplier\",\n    \"role.sourcerTitle\": \"Sourcer\",\n    \"role.customerDescription\": \"Buy products from suppliers\",\n    \"role.supplierDescription\": \"Sell your products to customers\",\n    \"role.sourcerDescription\": \"Help customers find the best suppliers\",\n    \"common.optional\": \"Optional\",\n    \"fashion\": \"Fashion\",\n    \"tech\": \"Tech\",\n    \"beauty\": \"Beauty\",\n    \"sports\": \"Sports\",\n    \"mainAudience\": \"Main audience\",\n    \"mainAudiencePlaceholder\": \"Main country or region, average age\",\n    \"engagementRate\": \"Engagement rate\",\n    \"engagementRatePlaceholder\": \"Optional, useful for evaluating interaction\",\n    \"shareStatsAgreement\": \"I agree to share my detailed statistics on request\",\n    \"mediaKit\": \"Media kit\",\n    \"message\": \"Message\",\n    \"messagePlaceholder\": \"Briefly introduce yourself\",\n    \"socialMediaLinks\": \"Social media links\",\n    \"socialMediaLinksPlaceholder\": \"Instagram, TikTok, YouTube, etc.\",\n    \"followerCount\": \"Follower count\",\n    \"followerCountPlaceholder\": \"Number of followers for each network\",\n    \"category\": \"Influence category\",\n\n    \"emptyFields\": \"Please fill in all fields\",\n    \"loginError\": \"Login error\",\n    \"loginErrorTitle\": \"Login Error\",\n    \"registerNow\": \"Register now\",\n    \"noAccountQuestion\": \"Don": "auth.acceptelesconditions",
  "accepte que mes informations soient vérifiées": "common.acceptequemesinforma1",
  "accepte que mes informations soient vérifiées\",\n    \"supplier.registration.message\": \"Vous serez contacté pour finaliser votre inscription fournisseur\",\n    \"supplier.registration.validation\": \"Votre compte sera validé manuellement par notre équipe\",\n    \"supplier.registration.title\": \"Information Importante\",\n    \"supplier.registration.submitButton\": \"Soumettre la demande\",\n    \"sourcer.registration.message\": \"Vous serez contacté pour finaliser votre inscription sourceur\",\n    \"sourcer.registration.validation\": \"Votre compte sera validé manuellement par notre équipe\",\n    \"sourcer.registration.title\": \"Information Importante\",\n    \"sourcer.registration.submitButton\": \"Soumettre la demande\",\n    \"fileUpload.dragDrop\": \"Glissez et déposez un fichier ici\",\n    \"fileUpload.orClick\": \"ou cliquez pour sélectionner\",\n    \"fileUpload.applicationpdf\": \"PDF\",\n    \"fileUpload.imageall\": \"Images\",\n    \"fileUpload.remove\": \"Supprimer\",\n    \"fileUpload.title\": \"Kit média\",\n\n    // Traductions manquantes pour le tableau de bord fournisseur\n    \"supplier.dashboard.title\": \"Tableau de bord fournisseur\",\n    \"supplier.dashboard.overview\": \"Vue d": "auth.acceptequemesinforma",
  "accessibilité clavier\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if (e.key === ": "common.accessibiliteclavier1",
  "accounting@chinetousine.com": "common.accountingchinetousi",
  "accueil\n          <": "navigation.accueil4",
  "accueil\r\n                        <": "navigation.accueil6",
  "accueil\r\n                    <": "navigation.accueil7",
  "accueil\r\n          <": "navigation.accueil8",
  "accueil\r\n    window.location.href = ": "navigation.accueilwindowlocatio",
  "accueil.\\n\\nContinuer ?": "navigation.accueilnncontinuer",
  "accès admin</li>\r\n              <li>• Surveillez régulièrement les alertes de sécurité</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistiques de sécurité en temps réel *": "admin.accesadminlilisurvei1",
  "accès et surveillance</h3>\r\n        </div>\r\n\r\n        <div className=\"space-y-6\">\r\n          <div className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n            <div>\r\n              <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">Liste blanche IP</h4>\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">Restreindre l": "forms.accesetsurveillanceh",
  "accès à certaines IP<": "common.accesacertainesip",
  "action */}\r\n            {notification.actionUrl && (\r\n              <div className=\"flex items-center text-xs text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200\">\r\n                <ExternalLink className=\"h-3 w-3 mr-1\" />\r\n                <span>Voir détails</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Badge de priorité */}\r\n          {notification.priority === ": "forms.actionnotificationac",
  "activité": "common.activite4",
  "activée": "common.activee1",
  "adapte à tous les styles, que ce soit pour un usage professionnel ou décontracté. Ces lunettes sont parfaites pour la revente en boutiques d": "common.adapteatouslesstyles1",
  "adapter à tous vos besoins : lecture, travail sur écran, ou détente. Le dimmer tactile permet un réglage précis de l": "common.adapteratousvosbesoi1",
  "admin\r\n     * \r\n     * 🎯 SOLUTION : Cette méthode crée seulement le document Firestore\r\n     * et n": "admin.adminsolutioncetteme1",
  "admin\r\n     * \r\n     * 🎯 TECHNIQUE AVANCÉE : Utilise une instance Firebase séparée\r\n     *": "admin.admintechniqueavance",
  "admin\r\n     * \r\n     * 🎯 TECHNIQUE AVANCÉE : Utilise une instance Firebase séparée\r\n     */\r\n    async createUserWithFirebaseAuth(userData: CreateUserData): Promise<{\r\n        success: boolean;\r\n        user?: AdminUser;\r\n        error?: string;\r\n        sessionPreserved?: boolean;\r\n    }> {\r\n        let tempUser: any = null;\r\n\r\n        try {\r\n            console.log(": "admin.admintechniqueavance1",
  "admin lors de la création d": "admin.adminlorsdelacreatio1",
  "admin.backup@chinetonusine.com": "navigation.adminbackupchinetonu",
  "admin2@chinetonusine.com": "admin.admin2chinetonusinec2",
  "admin@chine-ton-usine.com": "admin.adminchinetonusineco1",
  "admin@chinetonusine.com": "admin.adminchinetonusineco16",
  "admin@chinetousine.com": "admin.adminchinetousinecom6",
  "administrateur pour créer un utilisateur": "admin.administrateurpourcr",
  "administrateur pour créer un utilisateur.": "admin.administrateurpourcr3",
  "administrateur à :\r\n\r\n📧 support@chinetonusine.com\r\n📞 +33 1 00 00 00 00\r\n\r\nPrécisez votre adresse email et votre demande sera traitée dans les plus brefs délais.`);\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=": "auth.administrateurasuppo",
  "administrateurs prédéfinis\r\n  private static readonly ADMIN_EMAILS = [\r\n    ": "auth.administrateursprede1",
  "administrator@chinetonusine.com": "admin.administratorchineto3",
  "affaires avec la Chine": "common.affairesaveclachine2",
  "affaires mensuel\",\n    \"supplier.dashboard.customerSatisfaction\": \"Satisfaction client\",\n    \"supplier.dashboard.viewAllProducts\": \"Voir tous les produits\",\n    \"supplier.dashboard.viewAnalytics\": \"Voir les analyses\",\n    \"supplier.dashboard.viewReviews\": \"Voir les avis\",\n    \"supplier.dashboard.importantAlerts\": \"Alertes importantes\",\n    \"supplier.dashboard.addProduct\": \"Ajouter un produit\",\n    \"supplier.dashboard.addProductDesc\": \"Créer une nouvelle fiche produit\",\n    \"supplier.dashboard.messages\": \"Messages\",\n    \"supplier.dashboard.threeNewMessages\": \"3 nouveaux messages\",\n    \"supplier.dashboard.documents\": \"Documents\",\n    \"supplier.dashboard.manageDocuments\": \"Gérer vos documents\",\n    \"supplier.dashboard.salesPerformance\": \"Performance des ventes\",\n    \"supplier.dashboard.revenue\": \"Chiffre d": "forms.affairesmensuelsuppl",
  "affaires\",\n    \"supplier.analytics.orders\": \"Commandes\",\n    \"supplier.analytics.customers\": \"Nouveaux clients\",\n    \"supplier.analytics.productViews\": \"Vues produits\",\n    \"supplier.analytics.salesEvolution\": \"Évolution des ventes\",\n    \"supplier.analytics.vsLastMonth\": \"vs mois dernier\",\n    \"supplier.analytics.topProducts\": \"Produits les plus vendus\",\n    \"supplier.analytics.customerSatisfaction\": \"Satisfaction client\",\n    \"supplier.analytics.loading\": \"Chargement des données...\",\n    \"supplier.analytics.error\": \"Erreur lors du chargement des analyses\",\n\n    // Traductions pour les paramètres\n    \"supplier.settings.title\": \"Paramètres\",\n    \"supplier.settings.subtitle\": \"Configurez votre compte et vos préférences\",\n    \"supplier.settings.back\": \"Retour au tableau de bord\",\n    \"supplier.settings.company\": \"Entreprise\",\n    \"supplier.settings.profile\": \"Profil\",\n    \"supplier.settings.notifications\": \"Notifications\",\n    \"supplier.settings.security\": \"Sécurité\",\n    \"supplier.settings.billing\": \"Facturation\",\n    \"supplier.settings.companyInfo\": \"Informations de l": "navigation.affairessupplieranal",
  "affaires\",\n    \"supplier.customers.name\": \"Nom\",\n    \"supplier.customers.email\": \"Email\",\n    \"supplier.customers.company\": \"Entreprise\",\n    \"supplier.customers.location\": \"Localisation\",\n    \"supplier.customers.joinDate\": \"Client depuis\",\n    \"supplier.customers.totalOrders\": \"Total commandes\",\n    \"supplier.customers.totalSpent\": \"Total dépensé\",\n    \"supplier.customers.lastOrder\": \"Dernière commande\",\n    \"supplier.customers.status\": \"Statut\",\n    \"supplier.customers.actions\": \"Actions\",\n    \"supplier.customers.view\": \"Voir\",\n    \"supplier.customers.message\": \"Message\",\n    \"supplier.customers.loading\": \"Chargement...\",\n    \"supplier.customers.error\": \"Erreur lors du chargement des clients\",\n\n    // Traductions pour les messages\n    \"supplier.messages.title\": \"Messages\",\n    \"supplier.messages.subtitle\": \"Communiquez avec vos clients\",\n    \"supplier.messages.back\": \"Retour au tableau de bord\",\n    \"supplier.messages.searchPlaceholder\": \"Rechercher un message...\",\n    \"supplier.messages.allTypes\": \"Tous les types\",\n    \"supplier.messages.inquiry\": \"Demande\",\n    \"supplier.messages.order\": \"Commande\",\n    \"supplier.messages.support\": \"Support\",\n    \"supplier.messages.totalMessages\": \"Total Messages\",\n    \"supplier.messages.unreadMessages\": \"Messages non lus\",\n    \"supplier.messages.respondedToday\": \"Répondus aujourd": "auth.affairessuppliercust",
  "affaires\",\n    \"supplier.dashboard.last30Days\": \"30 derniers jours\",\n    \"supplier.dashboard.month\": \"Mois\",\n    \"supplier.dashboard.year\": \"Année\",\n    \"supplier.dashboard.salesChart\": \"Graphique des ventes\",\n    \"supplier.dashboard.dataWillDisplay\": \"Les données seront affichées ici\",\n\n    \"fileUpload.dragDrop\": \"Glissez et déposez un fichier ici\",\n    \"fileUpload.orClick\": \"ou cliquez pour sélectionner\",\n    \"fileUpload.applicationpdf\": \"PDF\",\n    \"fileUpload.imageall\": \"Images\",\n    \"fileUpload.remove\": \"Supprimer\",\n    \"fileUpload.title\": \"Kit média\",\n\n    // Container translations\n    \"containers\": \"Containers\",\n    \"containers.title\": \"Container List\",\n    \"containers.loading\": \"Loading containers...\",\n    \"containers.error\": \"Loading error\",\n    \"containers.name\": \"Container name\",\n    \"containers.departure\": \"Departure location\",\n    \"containers.arrival\": \"Arrival location\",\n    \"containers.estimatedDeparture\": \"Estimated departure date\",\n    \"containers.status\": \"Status\",\n    \"containers.status.active\": \"Active\",\n    \"containers.status.closed\": \"Closed\",\n    \"containers.capacity\": \"Capacity\",\n    \"containers.usedCapacity\": \"Used capacity\",\n    \"containers.availableCapacity\": \"Available capacity\",\n    \"containers.totalCapacity\": \"Total capacity\",\n    \"containers.closedMessage\": \"This container is closed and no longer bookable.\",\n    \"containers.almostFullMessage\": \"This container is almost full, book quickly!\",\n    \"containers.availableMessage\": \"This container is available for new reservations.\",\n\n    // Container preorder translations\n    \"preorder.title\": \"Container Space Preorder\",\n    \"preorder.description\": \"Reserve your space in this container before it gets full.\",\n    \"preorder.quantity\": \"Quantity (CBM)\",\n    \"preorder.button\": \"Preorder\",\n    \"preorder.confirm\": \"Confirm preorder\",\n    \"preorder.cancel\": \"Cancel\",\n    \"preorder.success\": \"Your preorder has been successfully registered!\",\n    \"preorder.availableCapacity\": \"Available capacity\",\n    \"preorder.terms\": \"I accept the terms and conditions\",\n    \"preorder.termsRequired\": \"You must accept the terms and conditions\",\n\n    // Container items translations\n    \"containerItems.title\": \"Container items\",\n    \"containerItems.productId\": \"Product ID\",\n    \"containerItems.quantity\": \"Quantity\",\n    \"containerItems.userId\": \"User\",\n    \"containerItems.loading\": \"Loading items...\",\n    \"containerItems.error\": \"Error loading items\",\n    \"containerItems.noItems\": \"No items in this container\",\n    \"containerItems.addItem\": \"Add item\",\n\n    // Common translations\n    \"units\": \"units\",\n    \"cbm\": \"CBM\",\n    \"cancel\": \"Cancel\",\n    \"confirm\": \"Confirm\",\n    \"close\": \"Close\"\n  },\n  \"es\": {\n    \"home\": \"Inicio\",\n    \"search\": \"Buscar\",\n    \"search.placeholder\": \"Buscar productos...\",\n    \"dashboard\": \"Panel\",\n    \"nav.login\": \"Acceso\",\n    \"logout\": \"Cerrar sesión\",\n    \"discover\": \"Descubrir\",\n    \"email\": \"Correo electrónico\",\n    \"password\": \"Contraseña\",\n    \"confirmPassword\": \"Confirmar contraseña\",\n    \"login\": \"Acceso\",\n    \"register\": \"Registro\",\n    \"loginDescription\": \"Inicia sesión para acceder a tu cuenta\",\n    \"accountType\": \"Tipo de cuenta\",\n    \"role.customer\": \"Cliente\",\n    \"role.supplier\": \"Proveedor\",\n    \"role.sourcer\": \"Sourcer\",\n    \"role.influencer\": \"Influencer\",\n    \"emailPlaceholder\": \"tu@email.com\",\n    \"passwordPlaceholder\": \"••••••••\",\n    \"rememberMe\": \"Recordarme\",\n    \"forgotPassword\": \"¿Olvidaste la contraseña?\",\n    \"loginButton\": \"Iniciar sesión\",\n    \"loggingIn\": \"Iniciando sesión...\",\n    \"createAccount\": \"Crear cuenta\",\n    \"registerDescription\": \"Crea tu cuenta para comenzar\",\n    \"fullName\": \"Nombre completo\",\n    \"yourNamePlaceholder\": \"Tu nombre completo\",\n    \"nameRequired\": \"El nombre es obligatorio\",\n    \"emailRequired\": \"El email es obligatorio\",\n    \"passwordMinLength\": \"La contraseña debe tener al menos 6 caracteres\",\n    \"passwordsDoNotMatch\": \"Las contraseñas no coinciden\",\n    \"registrationError\": \"Error de registro\",\n    \"creatingAccount\": \"Creando cuenta...\",\n    \"createMyAccount\": \"Crear mi cuenta\",\n    \"hasAccountQuestion\": \"¿Ya tienes una cuenta?\",\n    \"role.customerTitle\": \"Cliente\",\n    \"role.supplierTitle\": \"Proveedor\",\n    \"role.sourcerTitle\": \"Sourcer\",\n    \"role.customerDescription\": \"Comprar productos a proveedores\",\n    \"role.supplierDescription\": \"Vender tus productos a clientes\",\n    \"role.sourcerDescription\": \"Ayudar a los clientes a encontrar los mejores proveedores\",\n    \"emptyFields\": \"Por favor, rellene todos los campos\",\n    \"loginError\": \"Error de inicio de sesión\",\n    \"loginErrorTitle\": \"Error de inicio de sesión\",\n    \"registerNow\": \"Registrarse ahora\",\n    \"noAccountQuestion\": \"¿No tienes una cuenta?\",\n    \"termsOfUse\": \"términos de uso\",\n    \"privacyPolicy\": \"política de privacidad\",\n    \"googleLoginError\": \"Error de inicio de sesión con Google\",\n    \"orContinueWith\": \"O continuar con\",\n    \"signInWithGoogle\": \"Continuar con Google\",\n    \"agreementPrefix\": \"Al continuar, aceptas nuestros\",\n    \"agreementSuffix\": \".\",\n    \"and\": \"y\",\n    \"andOur\": \"y nuestra\",\n    \"termsOfService\": \"términos de servicio\",\n    \"loginNow\": \"Iniciar sesión ahora\",\n    \"registrationErrorTitle\": \"Error de registro\",\n\n    // Traducciones de contenedores\n    \"containers\": \"Contenedores\",\n    \"containers.title\": \"Lista de contenedores\",\n    \"containers.loading\": \"Cargando contenedores...\",\n    \"containers.error\": \"Error de carga\",\n    \"containers.name\": \"Nombre del contenedor\",\n    \"containers.departure\": \"Lugar de salida\",\n    \"containers.arrival\": \"Lugar de llegada\",\n    \"containers.estimatedDeparture\": \"Fecha estimada de salida\",\n    \"containers.status\": \"Estado\",\n    \"containers.status.active\": \"Activo\",\n    \"containers.status.closed\": \"Cerrado\",\n    \"containers.capacity\": \"Capacidad\",\n    \"containers.usedCapacity\": \"Capacidad utilizada\",\n    \"containers.availableCapacity\": \"Capacidad disponible\",\n    \"containers.totalCapacity\": \"Capacidad total\",\n    \"containers.closedMessage\": \"Este contenedor está cerrado y ya no se puede reservar.\",\n    \"containers.almostFullMessage\": \"Este contenedor está casi lleno, ¡reserva rápido!\",\n    \"containers.availableMessage\": \"Este contenedor está disponible para nuevas reservas.\",\n\n    // Traducciones de preorden de contenedores\n    \"preorder.title\": \"Preorden de espacio en contenedor\",\n    \"preorder.description\": \"Reserva tu espacio en este contenedor antes de que se llene.\",\n    \"preorder.quantity\": \"Cantidad (CBM)\",\n    \"preorder.button\": \"Preordenar\",\n    \"preorder.confirm\": \"Confirmar preorden\",\n    \"preorder.cancel\": \"Cancelar\",\n    \"preorder.success\": \"¡Tu preorden ha sido registrada con éxito!\",\n    \"preorder.availableCapacity\": \"Capacidad disponible\",\n    \"preorder.terms\": \"Acepto los términos y condiciones\",\n    \"preorder.termsRequired\": \"Debes aceptar los términos y condiciones\",\n\n    // Traducciones de artículos de contenedores\n    \"containerItems.title\": \"Artículos del contenedor\",\n    \"containerItems.productId\": \"ID del producto\",\n    \"containerItems.quantity\": \"Cantidad\",\n    \"containerItems.userId\": \"Usuario\",\n    \"containerItems.loading\": \"Cargando artículos...\",\n    \"containerItems.error\": \"Error al cargar artículos\",\n    \"containerItems.noItems\": \"No hay artículos en este contenedor\",\n    \"containerItems.addItem\": \"Agregar artículo\",\n\n    // Traducciones comunes\n    \"units\": \"unidades\",\n    \"cbm\": \"CBM\",\n    \"cancel\": \"Cancelar\",\n    \"confirm\": \"Confirmar\",\n    \"close\": \"Cerrar\"\n  },\n  \"ar\": {\n    \"home\": \"الرئيسية\",\n    \"search\": \"بحث\",\n    \"search.placeholder\": \"البحث عن المنتجات...\",\n    \"dashboard\": \"لوحة القيادة\",\n    \"nav.login\": \"تسجيل الدخول\",\n    \"logout\": \"تسجيل الخروج\",\n    \"discover\": \"اكتشف\",\n    \"email\": \"البريد الإلكتروني\",\n    \"password\": \"كلمة المرور\",\n    \"confirmPassword\": \"تأكيد كلمة المرور\",\n    \"login\": \"تسجيل الدخول\",\n    \"register\": \"التسجيل\",\n    \"loginDescription\": \"سجل الدخول للوصول إلى حسابك\",\n    \"accountType\": \"نوع الحساب\",\n    \"role.customer\": \"عميل\",\n    \"role.supplier\": \"مورد\",\n    \"role.sourcer\": \"باحث\",\n    \"role.influencer\": \"مؤثر\",\n    \"emailPlaceholder\": \"بريدك@الإلكتروني.com\",\n    \"passwordPlaceholder\": \"••••••••\",\n    \"rememberMe\": \"تذكرني\",\n    \"forgotPassword\": \"نسيت كلمة المرور؟\",\n    \"loginButton\": \"تسجيل الدخول\",\n    \"loggingIn\": \"جاري تسجيل الدخول...\",\n    \"createAccount\": \"إنشاء حساب\",\n    \"registerDescription\": \"أنشئ حسابك للبدء\",\n    \"fullName\": \"الاسم الكامل\",\n    \"yourNamePlaceholder\": \"اسمك الكامل\",\n    \"nameRequired\": \"الاسم مطلوب\",\n    \"emailRequired\": \"البريد الإلكتروني مطلوب\",\n    \"passwordMinLength\": \"يجب أن تحتوي كلمة المرور على 6 أحرف على الأقل\",\n    \"passwordsDoNotMatch\": \"كلمات المرور غير متطابقة\",\n    \"registrationError\": \"خطأ في التسجيل\",\n    \"creatingAccount\": \"جاري إنشاء الحساب...\",\n    \"createMyAccount\": \"إنشاء حسابي\",\n    \"hasAccountQuestion\": \"هل لديك حساب بالفعل؟\",\n    \"role.customerTitle\": \"عميل\",\n    \"role.supplierTitle\": \"مورد\",\n    \"role.sourcerTitle\": \"باحث\",\n    \"role.customerDescription\": \"شراء المنتجات من الموردين\",\n    \"role.supplierDescription\": \"بيع منتجاتك للعملاء\",\n    \"role.sourcerDescription\": \"مساعدة العملاء في العثور على أفضل الموردين\",\n    \"emptyFields\": \"يرجى ملء جميع الحقول\",\n    \"loginError\": \"خطأ في تسجيل الدخول\",\n    \"loginErrorTitle\": \"خطأ في تسجيل الدخول\",\n    \"registerNow\": \"سجل الآن\",\n    \"noAccountQuestion\": \"ليس لديك حساب؟\",\n    \"termsOfUse\": \"شروط الاستخدام\",\n    \"privacyPolicy\": \"سياسة الخصوصية\",\n    \"googleLoginError\": \"خطأ في تسجيل الدخول بجوجل\",\n    \"orContinueWith\": \"أو تابع مع\",\n    \"signInWithGoogle\": \"تابع مع جوجل\",\n    \"agreementPrefix\": \"بالمتابعة، فإنك توافق على\",\n    \"agreementSuffix\": \".\",\n    \"and\": \"و\",\n    \"andOur\": \"وسياسة\",\n    \"termsOfService\": \"شروط الخدمة\",\n    \"loginNow\": \"سجل الدخول الآن\",\n    \"registrationErrorTitle\": \"خطأ في التسجيل\",\n\n    // ترجمات الحاويات\n    \"containers\": \"الحاويات\",\n    \"containers.title\": \"قائمة الحاويات\",\n    \"containers.loading\": \"جاري تحميل الحاويات...\",\n    \"containers.error\": \"خطأ في التحميل\",\n    \"containers.name\": \"اسم الحاوية\",\n    \"containers.departure\": \"مكان المغادرة\",\n    \"containers.arrival\": \"مكان الوصول\",\n    \"containers.estimatedDeparture\": \"تاريخ المغادرة المقدر\",\n    \"containers.status\": \"الحالة\",\n    \"containers.status.active\": \"نشط\",\n    \"containers.status.closed\": \"مغلق\",\n    \"containers.capacity\": \"السعة\",\n    \"containers.usedCapacity\": \"السعة المستخدمة\",\n    \"containers.availableCapacity\": \"السعة المتاحة\",\n    \"containers.totalCapacity\": \"السعة الإجمالية\",\n    \"containers.closedMessage\": \"هذه الحاوية مغلقة ولا يمكن حجزها بعد الآن.\",\n    \"containers.almostFullMessage\": \"هذه الحاوية ممتلئة تقريباً، احجز بسرعة!\",\n    \"containers.availableMessage\": \"هذه الحاوية متاحة للحجوزات الجديدة.\",\n\n    // ترجمات الطلب المسبق للحاويات\n    \"preorder.title\": \"طلب مسبق لمساحة الحاوية\",\n    \"preorder.description\": \"احجز مساحتك في هذه الحاوية قبل أن تمتلئ.\",\n    \"preorder.quantity\": \"الكمية (متر مكعب)\",\n    \"preorder.button\": \"طلب مسبق\",\n    \"preorder.confirm\": \"تأكيد الطلب المسبق\",\n    \"preorder.cancel\": \"إلغاء\",\n    \"preorder.success\": \"تم تسجيل طلبك المسبق بنجاح!\",\n    \"preorder.availableCapacity\": \"السعة المتاحة\",\n    \"preorder.terms\": \"أوافق على الشروط والأحكام\",\n    \"preorder.termsRequired\": \"يجب أن توافق على الشروط والأحكام\",\n\n    // ترجمات عناصر الحاويات\n    \"containerItems.title\": \"عناصر الحاوية\",\n    \"containerItems.productId\": \"معرف المنتج\",\n    \"containerItems.quantity\": \"الكمية\",\n    \"containerItems.userId\": \"المستخدم\",\n    \"containerItems.loading\": \"جاري تحميل العناصر...\",\n    \"containerItems.error\": \"خطأ في تحميل العناصر\",\n    \"containerItems.noItems\": \"لا توجد عناصر في هذه الحاوية\",\n    \"containerItems.addItem\": \"إضافة عنصر\",\n\n    // ترجمات مشتركة\n    \"units\": \"وحدات\",\n    \"cbm\": \"متر مكعب\",\n    \"cancel\": \"إلغاء\",\n    \"confirm\": \"تأكيد\",\n    \"close\": \"إغلاق\"\n  },\n  \"zh\": {\n    \"home\": \"首页\",\n    \"search\": \"搜索\",\n    \"search.placeholder\": \"搜索产品...\",\n    \"dashboard\": \"仪表板\",\n    \"nav.login\": \"登录\",\n    \"logout\": \"登出\",\n    \"discover\": \"发现\",\n    \"email\": \"邮箱\",\n    \"password\": \"密码\",\n    \"confirmPassword\": \"确认密码\",\n    \"login\": \"登录\",\n    \"register\": \"注册\",\n    \"loginDescription\": \"登录以访问您的账户\",\n    \"accountType\": \"账户类型\",\n    \"role.customer\": \"客户\",\n    \"role.supplier\": \"供应商\",\n    \"role.sourcer\": \"采购商\",\n    \"role.influencer\": \"影响者\",\n    \"emailPlaceholder\": \"您的@邮箱.com\",\n    \"passwordPlaceholder\": \"••••••••\",\n    \"rememberMe\": \"记住我\",\n    \"forgotPassword\": \"忘记密码？\",\n    \"loginButton\": \"登录\",\n    \"loggingIn\": \"登录中...\",\n    \"createAccount\": \"创建账户\",\n    \"registerDescription\": \"创建您的账户开始使用\",\n    \"fullName\": \"全名\",\n    \"yourNamePlaceholder\": \"您的全名\",\n    \"nameRequired\": \"姓名是必需的\",\n    \"emailRequired\": \"邮箱是必需的\",\n    \"passwordMinLength\": \"密码必须至少6个字符\",\n    \"passwordsDoNotMatch\": \"密码不匹配\",\n    \"registrationError\": \"注册错误\",\n    \"creatingAccount\": \"创建账户中...\",\n    \"createMyAccount\": \"创建我的账户\",\n    \"hasAccountQuestion\": \"已经有账户了？\",\n    \"role.customerTitle\": \"客户\",\n    \"role.supplierTitle\": \"供应商\",\n    \"role.sourcerTitle\": \"采购商\",\n    \"role.customerDescription\": \"从供应商购买产品\",\n    \"role.supplierDescription\": \"向客户销售您的产品\",\n    \"role.sourcerDescription\": \"帮助客户找到最好的供应商\",\n    \"emptyFields\": \"请填写所有字段\",\n    \"loginError\": \"登录错误\",\n    \"loginErrorTitle\": \"登录错误\",\n    \"registerNow\": \"立即注册\",\n    \"noAccountQuestion\": \"没有账户？\",\n    \"termsOfUse\": \"使用条款\",\n    \"privacyPolicy\": \"隐私政策\",\n    \"googleLoginError\": \"谷歌登录错误\",\n    \"orContinueWith\": \"或继续使用\",\n    \"signInWithGoogle\": \"使用谷歌继续\",\n    \"agreementPrefix\": \"继续即表示您同意我们的\",\n    \"agreementSuffix\": \"。\",\n    \"and\": \"和\",\n    \"andOur\": \"和我们的\",\n    \"termsOfService\": \"服务条款\",\n    \"loginNow\": \"立即登录\",\n    \"registrationErrorTitle\": \"注册错误\",\n\n    // 集装箱翻译\n    \"containers\": \"集装箱\",\n    \"containers.title\": \"集装箱列表\",\n    \"containers.loading\": \"加载集装箱中...\",\n    \"containers.error\": \"加载错误\",\n    \"containers.name\": \"集装箱名称\",\n    \"containers.departure\": \"出发地点\",\n    \"containers.arrival\": \"到达地点\",\n    \"containers.estimatedDeparture\": \"预计出发日期\",\n    \"containers.status\": \"状态\",\n    \"containers.status.active\": \"活跃\",\n    \"containers.status.closed\": \"已关闭\",\n    \"containers.capacity\": \"容量\",\n    \"containers.usedCapacity\": \"已用容量\",\n    \"containers.availableCapacity\": \"可用容量\",\n    \"containers.totalCapacity\": \"总容量\",\n    \"containers.closedMessage\": \"此集装箱已关闭，无法再预订。\",\n    \"containers.almostFullMessage\": \"此集装箱几乎满了，请快速预订！\",\n    \"containers.availableMessage\": \"此集装箱可供新预订。\",\n\n    // 集装箱预订翻译\n    \"preorder.title\": \"集装箱空间预订\",\n    \"preorder.description\": \"在此集装箱装满之前预订您的空间。\",\n    \"preorder.quantity\": \"数量（立方米）\",\n    \"preorder.button\": \"预订\",\n    \"preorder.confirm\": \"确认预订\",\n    \"preorder.cancel\": \"取消\",\n    \"preorder.success\": \"您的预订已成功注册！\",\n    \"preorder.availableCapacity\": \"可用容量\",\n    \"preorder.terms\": \"我接受条款和条件\",\n    \"preorder.termsRequired\": \"您必须接受条款和条件\",\n\n    // 集装箱物品翻译\n    \"containerItems.title\": \"集装箱物品\",\n    \"containerItems.productId\": \"产品ID\",\n    \"containerItems.quantity\": \"数量\",\n    \"containerItems.userId\": \"用户\",\n    \"containerItems.loading\": \"加载物品中...\",\n    \"containerItems.error\": \"加载物品错误\",\n    \"containerItems.noItems\": \"此集装箱中没有物品\",\n    \"containerItems.addItem\": \"添加物品\",\n\n    // 通用翻译\n    \"units\": \"单位\",\n    \"cbm\": \"立方米\",\n    \"cancel\": \"取消\",\n    \"confirm\": \"确认\",\n    \"close\": \"关闭\"\n  },\n  \"pt\": {\n    \"home\": \"Início\",\n    \"search\": \"Pesquisar\",\n    \"search.placeholder\": \"Pesquisar produtos...\",\n    \"dashboard\": \"Painel\",\n    \"nav.login\": \"Entrar\",\n    \"logout\": \"Sair\",\n    \"discover\": \"Descobrir\",\n    \"email\": \"Email\",\n    \"password\": \"Senha\",\n    \"confirmPassword\": \"Confirmar senha\",\n    \"login\": \"Entrar\",\n    \"register\": \"Registrar\",\n    \"loginDescription\": \"Entre para acessar sua conta\",\n    \"accountType\": \"Tipo de conta\",\n    \"role.customer\": \"Cliente\",\n    \"role.supplier\": \"Fornecedor\",\n    \"role.sourcer\": \"Sourcer\",\n    \"role.influencer\": \"Influenciador\",\n    \"emailPlaceholder\": \"seu@email.com\",\n    \"passwordPlaceholder\": \"••••••••\",\n    \"rememberMe\": \"Lembrar de mim\",\n    \"forgotPassword\": \"Esqueceu a senha?\",\n    \"loginButton\": \"Entrar\",\n    \"loggingIn\": \"Entrando...\",\n    \"createAccount\": \"Criar conta\",\n    \"registerDescription\": \"Crie sua conta para começar\",\n    \"fullName\": \"Nome completo\",\n    \"yourNamePlaceholder\": \"Seu nome completo\",\n    \"nameRequired\": \"Nome é obrigatório\",\n    \"emailRequired\": \"Email é obrigatório\",\n    \"passwordMinLength\": \"A senha deve ter pelo menos 6 caracteres\",\n    \"passwordsDoNotMatch\": \"As senhas não coincidem\",\n    \"registrationError\": \"Erro de registro\",\n    \"creatingAccount\": \"Criando conta...\",\n    \"createMyAccount\": \"Criar minha conta\",\n    \"hasAccountQuestion\": \"Já tem uma conta?\",\n    \"role.customerTitle\": \"Cliente\",\n    \"role.supplierTitle\": \"Fornecedor\",\n    \"role.sourcerTitle\": \"Sourcer\",\n    \"role.customerDescription\": \"Comprar produtos de fornecedores\",\n    \"role.supplierDescription\": \"Vender seus produtos para clientes\",\n    \"role.sourcerDescription\": \"Ajudar clientes a encontrar os melhores fornecedores\",\n    \"emptyFields\": \"Por favor, preencha todos os campos\",\n    \"loginError\": \"Erro de login\",\n    \"loginErrorTitle\": \"Erro de login\",\n    \"registerNow\": \"Registrar agora\",\n    \"noAccountQuestion\": \"Não tem uma conta?\",\n    \"termsOfUse\": \"termos de uso\",\n    \"privacyPolicy\": \"política de privacidade\",\n    \"googleLoginError\": \"Erro de login do Google\",\n    \"orContinueWith\": \"Ou continue com\",\n    \"signInWithGoogle\": \"Continue com Google\",\n    \"agreementPrefix\": \"Ao continuar, você aceita nossos\",\n    \"agreementSuffix\": \".\",\n    \"and\": \"e\",\n    \"andOur\": \"e nossa\",\n    \"termsOfService\": \"termos de serviço\",\n    \"loginNow\": \"Entrar agora\",\n    \"registrationErrorTitle\": \"Erro de registro\",\n\n    // Traduções de contêineres\n    \"containers\": \"Contêineres\",\n    \"containers.title\": \"Lista de contêineres\",\n    \"containers.loading\": \"Carregando contêineres...\",\n    \"containers.error\": \"Erro de carregamento\",\n    \"containers.name\": \"Nome do contêiner\",\n    \"containers.departure\": \"Local de partida\",\n    \"containers.arrival\": \"Local de chegada\",\n    \"containers.estimatedDeparture\": \"Data estimada de partida\",\n    \"containers.status\": \"Status\",\n    \"containers.status.active\": \"Ativo\",\n    \"containers.status.closed\": \"Fechado\",\n    \"containers.capacity\": \"Capacidade\",\n    \"containers.usedCapacity\": \"Capacidade utilizada\",\n    \"containers.availableCapacity\": \"Capacidade disponível\",\n    \"containers.totalCapacity\": \"Capacidade total\",\n    \"containers.closedMessage\": \"Este contêiner está fechado e não pode mais ser reservado.\",\n    \"containers.almostFullMessage\": \"Este contêiner está quase cheio, reserve rapidamente!\",\n    \"containers.availableMessage\": \"Este contêiner está disponível para novas reservas.\",\n\n    // Traduções de pré-pedido de contêineres\n    \"preorder.title\": \"Pré-pedido de espaço em contêiner\",\n    \"preorder.description\": \"Reserve seu espaço neste contêiner antes que fique cheio.\",\n    \"preorder.quantity\": \"Quantidade (CBM)\",\n    \"preorder.button\": \"Pré-pedir\",\n    \"preorder.confirm\": \"Confirmar pré-pedido\",\n    \"preorder.cancel\": \"Cancelar\",\n    \"preorder.success\": \"Seu pré-pedido foi registrado com sucesso!\",\n    \"preorder.availableCapacity\": \"Capacidade disponível\",\n    \"preorder.terms\": \"Aceito os termos e condições\",\n    \"preorder.termsRequired\": \"Você deve aceitar os termos e condições\",\n\n    // Traduções de itens de contêineres\n    \"containerItems.title\": \"Itens do contêiner\",\n    \"containerItems.productId\": \"ID do produto\",\n    \"containerItems.quantity\": \"Quantidade\",\n    \"containerItems.userId\": \"Usuário\",\n    \"containerItems.loading\": \"Carregando itens...\",\n    \"containerItems.error\": \"Erro ao carregar itens\",\n    \"containerItems.noItems\": \"Nenhum item neste contêiner\",\n    \"containerItems.addItem\": \"Adicionar item\",\n\n    // Traduções comuns\n    \"units\": \"unidades\",\n    \"cbm\": \"CBM\",\n    \"cancel\": \"Cancelar\",\n    \"confirm\": \"Confirmar\",\n    \"close\": \"Fechar\"\n  },\n  \"nl\": {\n    \"home\": \"Home\",\n    \"search\": \"Zoeken\",\n    \"search.placeholder\": \"Zoek naar producten...\",\n    \"dashboard\": \"Dashboard\",\n    \"nav.login\": \"Inloggen\",\n    \"logout\": \"Uitloggen\",\n    \"discover\": \"Ontdekken\",\n    \"email\": \"Email\",\n    \"password\": \"Wachtwoord\",\n    \"confirmPassword\": \"Bevestig wachtwoord\",\n    \"login\": \"Inloggen\",\n    \"register\": \"Registreren\",\n    \"loginDescription\": \"Log in om toegang te krijgen tot uw account\",\n    \"accountType\": \"Accounttype\",\n    \"role.customer\": \"Klant\",\n    \"role.supplier\": \"Leverancier\",\n    \"role.sourcer\": \"Sourcer\",\n    \"role.influencer\": \"Influencer\",\n    \"emailPlaceholder\": \"uw@email.com\",\n    \"passwordPlaceholder\": \"••••••••\",\n    \"rememberMe\": \"Onthoud mij\",\n    \"forgotPassword\": \"Wachtwoord vergeten?\",\n    \"loginButton\": \"Inloggen\",\n    \"loggingIn\": \"Inloggen...\",\n    \"createAccount\": \"Account aanmaken\",\n    \"registerDescription\": \"Maak uw account aan om te beginnen\",\n    \"fullName\": \"Volledige naam\",\n    \"yourNamePlaceholder\": \"Uw volledige naam\",\n    \"nameRequired\": \"Naam is verplicht\",\n    \"emailRequired\": \"Email is verplicht\",\n    \"passwordMinLength\": \"Wachtwoord moet minimaal 6 tekens hebben\",\n    \"passwordsDoNotMatch\": \"Wachtwoorden komen niet overeen\",\n    \"registrationError\": \"Registratiefout\",\n    \"creatingAccount\": \"Account aanmaken...\",\n    \"createMyAccount\": \"Mijn account aanmaken\",\n    \"hasAccountQuestion\": \"Heeft u al een account?\",\n    \"role.customerTitle\": \"Klant\",\n    \"role.supplierTitle\": \"Leverancier\",\n    \"role.sourcerTitle\": \"Sourcer\",\n    \"role.customerDescription\": \"Producten kopen van leveranciers\",\n    \"role.supplierDescription\": \"Uw producten verkopen aan klanten\",\n    \"role.sourcerDescription\": \"Klanten helpen de beste leveranciers te vinden\",\n    \"emptyFields\": \"Vul alle velden in\",\n    \"loginError\": \"Inlogfout\",\n    \"loginErrorTitle\": \"Inlogfout\",\n    \"registerNow\": \"Nu registreren\",\n    \"noAccountQuestion\": \"Geen account?\",\n    \"termsOfUse\": \"gebruiksvoorwaarden\",\n    \"privacyPolicy\": \"privacybeleid\",\n    \"googleLoginError\": \"Google inlogfout\",\n    \"orContinueWith\": \"Of ga verder met\",\n    \"signInWithGoogle\": \"Ga verder met Google\",\n    \"agreementPrefix\": \"Door verder te gaan, accepteert u onze\",\n    \"agreementSuffix\": \".\",\n    \"and\": \"en\",\n    \"andOur\": \"en ons\",\n    \"termsOfService\": \"servicevoorwaarden\",\n    \"loginNow\": \"Nu inloggen\",\n    \"registrationErrorTitle\": \"Registratiefout\",\n\n    // Container vertalingen\n    \"containers\": \"Containers\",\n    \"containers.title\": \"Container lijst\",\n    \"containers.loading\": \"Containers laden...\",\n    \"containers.error\": \"Laadfout\",\n    \"containers.name\": \"Container naam\",\n    \"containers.departure\": \"Vertreklocatie\",\n    \"containers.arrival\": \"Aankomstlocatie\",\n    \"containers.estimatedDeparture\": \"Geschatte vertrekdatum\",\n    \"containers.status\": \"Status\",\n    \"containers.status.active\": \"Actief\",\n    \"containers.status.closed\": \"Gesloten\",\n    \"containers.capacity\": \"Capaciteit\",\n    \"containers.usedCapacity\": \"Gebruikte capaciteit\",\n    \"containers.availableCapacity\": \"Beschikbare capaciteit\",\n    \"containers.totalCapacity\": \"Totale capaciteit\",\n    \"containers.closedMessage\": \"Deze container is gesloten en kan niet meer gereserveerd worden.\",\n    \"containers.almostFullMessage\": \"Deze container is bijna vol, reserveer snel!\",\n    \"containers.availableMessage\": \"Deze container is beschikbaar voor nieuwe reserveringen.\",\n\n    // Container voorbestelling vertalingen\n    \"preorder.title\": \"Container ruimte voorbestelling\",\n    \"preorder.description\": \"Reserveer uw ruimte in deze container voordat deze vol is.\",\n    \"preorder.quantity\": \"Hoeveelheid (CBM)\",\n    \"preorder.button\": \"Voorbestellen\",\n    \"preorder.confirm\": \"Voorbestelling bevestigen\",\n    \"preorder.cancel\": \"Annuleren\",\n    \"preorder.success\": \"Uw voorbestelling is succesvol geregistreerd!\",\n    \"preorder.availableCapacity\": \"Beschikbare capaciteit\",\n    \"preorder.terms\": \"Ik accepteer de algemene voorwaarden\",\n    \"preorder.termsRequired\": \"U moet de algemene voorwaarden accepteren\",\n\n    // Container items vertalingen\n    \"containerItems.title\": \"Container items\",\n    \"containerItems.productId\": \"Product ID\",\n    \"containerItems.quantity\": \"Hoeveelheid\",\n    \"containerItems.userId\": \"Gebruiker\",\n    \"containerItems.loading\": \"Items laden...\",\n    \"containerItems.error\": \"Fout bij het laden van items\",\n    \"containerItems.noItems\": \"Geen items in deze container\",\n    \"containerItems.addItem\": \"Item toevoegen\",\n\n    // Algemene vertalingen\n    \"units\": \"eenheden\",\n    \"cbm\": \"CBM\",\n    \"cancel\": \"Annuleren\",\n    \"confirm\": \"Bevestigen\",\n    \"close\": \"Sluiten\"\n  }\n};\n\nconst languageNames: Record<UserLanguage, string> = {\n  ": "auth.affairessupplierdash",
  "affichage réel\r\n          if (file.type.startsWith(": "common.affichagereeliffilet",
  "aide": "common.aide",
  "aide<": "common.aide1",
  "ajout des produits de test:": "ecommerce.ajoutdesproduitsdete",
  "ajout/édition *": "common.ajoutedition2",
  "ajoute à la liste\r\n                        if (result.message.includes(": "common.ajoutealalisteifresu1",
  "ajouter le produit": "forms.ajouterleproduit",
  "ancienne version pour comparaison *": "common.ancienneversionpourc1",
  "aperçu rapide *": "common.apercurapide1",
  "approbation\",\n    \"supplier.documents.downloads\": \"Téléchargements\",\n    \"supplier.documents.document\": \"Document\",\n    \"supplier.documents.type\": \"Type\",\n    \"supplier.documents.size\": \"Taille\",\n    \"supplier.documents.uploadDate\": \"Date d": "forms.approbationsupplierd",
  "après les logs, le problème vient du AuthContext qui déclenche automatiquement\r\n * une déconnexion/reconnexion lors de la création d": "auth.apresleslogsleproble2",
  "arrivée": "common.arrivee1",
  "arrivée\r\n                  <": "common.arrivee2",
  "arrivée\",\n    \"containers.estimatedDeparture\": \"Date de départ estimée\",\n    \"containers.status\": \"Statut\",\n    \"containers.status.active\": \"Actif\",\n    \"containers.status.closed\": \"Clôturé\",\n    \"containers.capacity\": \"Capacité\",\n    \"containers.usedCapacity\": \"Capacité utilisée\",\n    \"containers.availableCapacity\": \"Capacité disponible\",\n    \"containers.totalCapacity\": \"Capacité totale\",\n    \"containers.closedMessage\": \"Ce conteneur est clôturé et n": "common.arriveecontainersest",
  "article\r\n        const newItem: ContainerItem = {\r\n          id: `item${Date.now()}`,\r\n          containerId,\r\n          productId,\r\n          quantity,\r\n          userId,\r\n        };\r\n        currentContainerItems.set(newItem.id, newItem);        // Mettre à jour la capacité du conteneur\r\n        const updatedUsedCapacity = container.usedCapacity + quantity;\r\n        try {\r\n          await this.updateContainerCapacity(containerId, updatedUsedCapacity);\r\n          resolve(newItem);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }, 300); ": "admin.articleconstnewitemc",
  "assure que usedCapacity ne dépasse pas totalCapacity\r\n          newStatus = ": "common.assurequeusedcapacit1",
  "authentification\n      const user = await this.getCurrentUser();\n      \n      // Vérifier Firestore\n      const usersRef = collection(db, ": "admin.authentificationcons1",
  "authentification\r\n     */\r\n    private formatAuthError(error: AuthError): string {\r\n        const errorMessages: Record<string, string> = {\r\n            ": "common.authentificationpriv",
  "authentification arrêtée": "common.authentificationarre1",
  "authentification sécurisé\r\n                const currentUser = await secureAuthService.initialize();\r\n\r\n                if (mounted) {\r\n                    setUser(currentUser);\r\n                    setLoading(false);\r\n\r\n                    if (currentUser) {\r\n                        console.log(`✅ Utilisateur connecté: ${currentUser.name} (${currentUser.role})`);\r\n                    } else {\r\n                        console.log(": "forms.authentificationsecu1",
  "authentification sécurisé pour la production\r\n * Gère les connexions, redirections et sécurité des sessions\r\n *": "auth.authentificationsecu1",
  "authentification sécurisé...": "common.authentificationsecu3",
  "authentification universelle\r\n * Simplifie le processus en attribuant automatiquement les rôles\r\n */\r\nexport class UniversalAuthService {\r\n  // Rôle par défaut pour tous les nouveaux utilisateurs\r\n  private static readonly DEFAULT_ROLE: UserRole = ": "admin.authentificationuniv",
  "authentification à deux facteurs\r\n                        </p>\r\n                        <p className=\"text-xs text-green-500 dark:text-green-400 mt-1\">\r\n                          Activée le 15 juin 2024\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\r\n                        <CheckCircle size={14} className=\"mr-1\" />\r\n                        Sécurisé\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                    <div className=\"interactive-card p-4 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700\">\r\n                      <div className=\"flex items-center gap-3 mb-3\">\r\n                        <div className=\"p-2 bg-blue-100 dark:bg-blue-900 rounded-lg\">\r\n                          <Smartphone size={16} className=\"text-blue-600 dark:text-blue-400\" />\r\n                        </div>\r\n                        <div>\r\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">Application mobile</h4>\r\n                          <p className=\"text-sm text-gray-500 dark:text-gray-400\">Google Authenticator</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"text-xs text-green-600 dark:text-green-400 font-medium\">Configurée</span>\r\n                        <button className=\"text-xs px-3 py-1 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-full transition-colors\">\r\n                          Reconfigurer\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"interactive-card p-4 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700\">\r\n                      <div className=\"flex items-center gap-3 mb-3\">\r\n                        <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-lg\">\r\n                          <Mail size={16} className=\"text-green-600 dark:text-green-400\" />\r\n                        </div>\r\n                        <div>\r\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">Codes de secours</h4>\r\n                          <p className=\"text-sm text-gray-500 dark:text-gray-400\">8 codes disponibles</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"text-xs text-blue-600 dark:text-blue-400 font-medium\">Prêts</span>\r\n                        <button className=\"text-xs px-3 py-1 bg-blue-100 hover:bg-blue-200 dark:bg-blue-900 dark:hover:bg-blue-800 text-blue-700 dark:text-blue-300 rounded-full transition-colors\">\r\n                          Voir les codes\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex gap-3\">\r\n                    <button\r\n                      onClick={() => showNotification(": "forms.authentificationadeu2",
  "autonomie exceptionnelle de 6h par écouteur (24h avec le boîtier) vous accompagne toute la journée.\r\n\r\nLe design ergonomique assure un confort optimal même lors d": "forms.autonomieexceptionne1",
  "autre\r\n * Si même cela cause une déconnexion, le problème est dans React": "auth.autresimemecelacause",
  "avez pas de notifications pour le moment\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {notifications.map((notification) => (\r\n                <NotificationItem\r\n                  key={notification.id}\r\n                  notification={notification}\r\n                  onMarkAsRead={handleMarkAsRead}\r\n                  onNotificationClick={handleNotificationClick}\r\n                ": "common.avezpasdenotificatio1",
  "chine-ton-usine-2c999": "common.chinetonusine2c9991",
  "chine-ton-usine-2c999.firebaseapp.com": "common.chinetonusine2c999fi1",
  "chine-ton-usine-2c999.firebasestorage.app": "common.chinetonusine2c999fi3",
  "chine-ton-usine-favorites": "common.chinetonusinefavorit",
  "chine-ton-usine-quote": "common.chinetonusinequote1",
  "client@chinetonusine.com": "common.clientchinetonusinec1",
  "conditions d": "common.conditionsd3",
  "contact@ecowear.cn": "common.contactecowearcn",
  "contact@shanghai-electronics.com": "common.contactshanghaielect",
  "contact@shenzhenaudiotech.com": "common.contactshenzhenaudio",
  "contact@technomax.com": "forms.contacttechnomaxcom",
  "contact@techsupplypro.com": "common.contacttechsupplypro",
  "contactPerson": "common.contactperson3",
  "contactSupplier": "ecommerce.contactsupplier",
  "contactSupplierDescription": "ecommerce.contactsupplierdescr",
  "contactSupplierTitle": "ecommerce.contactsuppliertitle",
  "cosmétique": "common.cosmetique1",
  "dashboard.contactSupplier": "admin.dashboardcontactsupp",
  "dashboard.messages": "admin.dashboardmessages",
  "dashboard.noMessages": "forms.dashboardnomessages",
  "désactivée": "common.desactivee1",
  "eau IPX7, ils sont parfaits pour le sport et les activités en extérieur. Compatible avec tous les appareils Bluetooth.`,\r\n        price: 2.30,\r\n        moq: 120,\r\n        category: ": "ecommerce.eauipx7ilssontparfai1",
  "edit_profile": "forms.editprofile",
  "email ${userData.email} existe déjà` };\r\n            }\r\n\r\n            // 3. Créer l": "auth.emailuserdataemailex2",
  "email existe déjà\r\n            const emailExists = await this.checkIfEmailExists(userData.email);\r\n            if (emailExists) {\r\n                return {\r\n                    success: false,\r\n                    error: ": "auth.emailexistedejaconst3",
  "email-messages": "auth.emailmessages",
  "emailMessages": "auth.emailmessages1",
  "ensemble de votre activité": "common.ensembledevotreactiv1",
  "ensemble de votre activité\",\n    \"supplier.dashboard.totalProducts\": \"Produits totaux\",\n    \"supplier.dashboard.monthlyRevenue\": \"Chiffre d": "admin.ensembledevotreactiv",
  "entreprise\r\n                                    </label>\r\n                                    <div className=\"flex items-center space-x-4\">\r\n                                        {cardData.logo && (\r\n                                            <img\r\n                                                src={cardData.logo}\r\n                                                alt=\"Logo actuel\"\r\n                                                className=\"w-16 h-16 rounded-lg object-cover border border-gray-300\"\r\n                                            />\r\n                                        )}\r\n                                        <div>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                placeholder=\"URL du logo\"\r\n                                                value={cardData.logo}\r\n                                                onChange={(e) => updateCardData({ logo: e.target.value })}\r\n                                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white mb-2\"\r\n                                            />\r\n                                            <button className=\"flex items-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\">\r\n                                                <Upload className=\"h-4 w-4\" />\r\n                                                <span>Télécharger une image</span>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        Image de fond (optionnel)\r\n                                    </label>\r\n                                    <div className=\"flex items-center space-x-4\">\r\n                                        {cardData.backgroundImage && (\r\n                                            <img\r\n                                                src={cardData.backgroundImage}\r\n                                                alt=\"Fond actuel\"\r\n                                                className=\"w-16 h-16 rounded-lg object-cover border border-gray-300\"\r\n                                            />\r\n                                        )}\r\n                                        <div>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                placeholder=\"URL de l": "navigation.entrepriselabeldivcl",
  "entreprise\r\n                                    </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={cardData.companyName}\r\n                                        onChange={(e) => updateCardData({ companyName: e.target.value })}\r\n                                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                    />\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        Slogan\r\n                                    </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={cardData.tagline}\r\n                                        onChange={(e) => updateCardData({ tagline: e.target.value })}\r\n                                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"grid grid-cols-2 gap-4\">\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                            Nom de contact\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={cardData.contactPerson}\r\n                                            onChange={(e) => updateCardData({ contactPerson: e.target.value })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                    </div>\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                            Poste\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={cardData.position}\r\n                                            onChange={(e) => updateCardData({ position: e.target.value })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"grid grid-cols-2 gap-4\">\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                            Téléphone\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={cardData.phone}\r\n                                            onChange={(e) => updateCardData({ phone: e.target.value })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                    </div>\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                            Email\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"email\"\r\n                                            value={cardData.email}\r\n                                            onChange={(e) => updateCardData({ email: e.target.value })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        Site web\r\n                                    </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={cardData.website}\r\n                                        onChange={(e) => updateCardData({ website: e.target.value })}\r\n                                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                    />\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                        Adresse\r\n                                    </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={cardData.address}\r\n                                        onChange={(e) => updateCardData({ address: e.target.value })}\r\n                                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"grid grid-cols-3 gap-4\">\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                            LinkedIn\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={cardData.linkedin || ": "auth.entrepriselabelinput",
  "entreprise\r\n            const companyData = {\r\n                name: formData.name,\r\n                country: formData.country,\r\n                email: formData.email,\r\n                phone: formData.phone,\r\n                contact_person: formData.contactPerson,\r\n                preferred_currency: formData.preferredCurrency,\r\n                interested_products: formData.interestedProducts,\r\n                website: formData.website,\r\n                updated_at: new Date().toISOString()\r\n            };\r\n\r\n            // Données du profil\r\n            const profileData = {\r\n                monthly_sales_volume: formData.monthlySalesVolume,\r\n                has_merchandising: formData.hasMerchandising,\r\n                is_top_importer: formData.isTopImporter,\r\n                has_warehouses: formData.hasWarehouses,\r\n                warehouse_count: formData.hasWarehouses ? parseInt(formData.warehouseCount) || 0 : null,\r\n                has_logistics_vehicles: formData.hasLogisticsVehicles,\r\n                vehicle_count: formData.hasLogisticsVehicles ? parseInt(formData.vehicleCount) || 0 : null,\r\n                business_type: formData.businessType,\r\n                notes: formData.notes,\r\n                updated_at: new Date().toISOString()\r\n            };\r\n\r\n            ": "auth.entrepriseconstcompa",
  "entreprise avec optimistic update\r\n            await companyMutation.update(\r\n                prospect.id,\r\n                companyData,\r\n                optimisticUpdateCompany\r\n            );\r\n\r\n            // Mise à jour du profil\r\n            if (profile) {\r\n                await profileMutation.update(profile.id, profileData);\r\n            } else {\r\n                await profileMutation.insert({\r\n                    ...profileData,\r\n                    company_id: prospect.id,\r\n                    created_at: new Date().toISOString()\r\n                });\r\n            }\r\n\r\n            onClose();\r\n        } catch (err) {\r\n            console.error(": "common.entrepriseavecoptimi2",
  "entreprise\"\r\n                                    name=\"name\"\r\n                                    value={formData.name}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    icon={<Building2 className=\"text-gray-400\" size={20} />}\r\n                                />\r\n\r\n                                <Input\r\n                                    label=\"Pays\"\r\n                                    name=\"country\"\r\n                                    value={formData.country}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    icon={<MapPin className=\"text-gray-400\" size={20} />}\r\n                                />\r\n\r\n                                <Input\r\n                                    label=\"Email\"\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    value={formData.email}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    icon={<Mail className=\"text-gray-400\" size={20} />}\r\n                                />\r\n\r\n                                <Input\r\n                                    label=\"Téléphone\"\r\n                                    type=\"tel\"\r\n                                    name=\"phone\"\r\n                                    value={formData.phone}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    icon={<Phone className=\"text-gray-400\" size={20} />}\r\n                                />\r\n\r\n                                <Input\r\n                                    label=\"Personne de contact\"\r\n                                    name=\"contactPerson\"\r\n                                    value={formData.contactPerson}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    icon={<User className=\"text-gray-400\" size={20} />}\r\n                                />\r\n\r\n                                <Input\r\n                                    label=\"Site web\"\r\n                                    type=\"url\"\r\n                                    name=\"website\"\r\n                                    value={formData.website}\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"https://example.com\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Informations commerciales</h3>\r\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                                <Select\r\n                                    label=\"Devise préférée\"\r\n                                    name=\"preferredCurrency\"\r\n                                    value={formData.preferredCurrency}\r\n                                    onChange={(value) => setFormData(prev => ({ ...prev, preferredCurrency: value }))}\r\n                                    options={currencyOptions}\r\n                                />\r\n\r\n                                <Select\r\n                                    label=\"Type d": "auth.entreprisenamenameva",
  "entreprise\",\n    \"supplier.legalRegistrationNumber\": \"Numéro d": "ecommerce.entreprisesupplierle",
  "entreprise\",\n    \"supplier.settings.contactEmail\": \"Email de contact\",\n    \"supplier.settings.phone\": \"Téléphone\",\n    \"supplier.settings.address\": \"Adresse\",\n    \"supplier.settings.city\": \"Ville\",\n    \"supplier.settings.postalCode\": \"Code postal\",\n    \"supplier.settings.country\": \"Pays\",\n    \"supplier.settings.website\": \"Site web\",\n    \"supplier.settings.description\": \"Description de l": "auth.entreprisesupplierse",
  "entrée\r\n        if (supplier) {\r\n            const timer = setTimeout(() => setIsLoaded(true), 100);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [supplier]);\r\n\r\n    if (!supplier) {\r\n        return (\r\n            <div className=": "forms.entreeifsuppliercons",
  "environnement de production\r\n * Gère la création, suppression et synchronisation des utilisateurs Firebase\r\n *": "admin.environnementdeprodu",
  "environnement de production\r\n * Gère la création, suppression et synchronisation des utilisateurs Firebase\r\n */\r\nexport class ProductionUserService {\r\n    private static instance: ProductionUserService;\r\n    private authStateUnsubscribe: (() => void) | null = null;\r\n\r\n    public static getInstance(): ProductionUserService {\r\n        if (!ProductionUserService.instance) {\r\n            ProductionUserService.instance = new ProductionUserService();\r\n        }\r\n        return ProductionUserService.instance;\r\n    }\r\n\r\n    /**\r\n     * Initialiser la surveillance de l": "admin.environnementdeprodu1",
  "erreur Firebase\n            if (mounted && !user) {\n              setUser(null);\n            }\n          }\n        } else {\n          // Déconnexion complète si pas d": "auth.erreurfirebaseifmoun2",
  "erreur en français\r\n     *": "common.erreurenfrancais1",
  "erreur en français\r\n     */\r\n    private getErrorMessage(errorMessage: string): string {\r\n        const errorMap: Record<string, string> = {\r\n            ": "common.erreurenfrancaispriv",
  "erreur et de succès *": "common.erreuretdesucces",
  "erreur et de succès */}\r\n                        {error && (\r\n                            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 flex items-start\">\r\n                                <AlertCircle className=\"h-5 w-5 text-red-400 mt-0.5 mr-3 flex-shrink-0\" />\r\n                                <div>\r\n                                    <h3 className=\"text-sm font-medium text-red-800\">Erreur de connexion</h3>\r\n                                    <p className=\"text-sm text-red-700 mt-1\">{error}</p>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {success && (\r\n                            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 flex items-start\">\r\n                                <CheckCircle className=\"h-5 w-5 text-green-400 mt-0.5 mr-3 flex-shrink-0\" />\r\n                                <div>\r\n                                    <h3 className=\"text-sm font-medium text-green-800\">Connexion réussie</h3>\r\n                                    <p className=\"text-sm text-green-700 mt-1\">{success}</p>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* Bouton de connexion */}\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={isLoading}\r\n                            className=\"w-full flex justify-center items-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                        >\r\n                            {isLoading ? (\r\n                                <>\r\n                                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n                                    Connexion en cours...\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Lock className=\"h-4 w-4 mr-2\" />\r\n                                    Se connecter\r\n                                </>\r\n                            )}\r\n                        </button>\r\n\r\n                        {/* Mot de passe oublié */}\r\n                        <div className=\"text-center\">\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={handleForgotPassword}\r\n                                disabled={isLoading}\r\n                                className=\"text-sm text-blue-600 hover:text-blue-800 transition-colors duration-200 disabled:opacity-50\"\r\n                            >\r\n                                Mot de passe oublié ?\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n                {/* Informations de sécurité */}\r\n                <div className=\"bg-blue-50 rounded-lg p-4 border border-blue-200\">\r\n                    <div className=\"flex\">\r\n                        <Shield className=\"h-5 w-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0\" />\r\n                        <div>\r\n                            <h3 className=\"text-sm font-medium text-blue-800\">Sécurité renforcée</h3>\r\n                            <p className=\"text-sm text-blue-700 mt-1\">\r\n                                Votre connexion est protégée par un chiffrement SSL et des règles de sécurité strictes.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Lien retour */}\r\n                <div className=\"text-center\">\r\n                    <Link\r\n                        to=\"/\"\r\n                        className=\"text-sm text-gray-600 hover:text-gray-900 transition-colors duration-200\"\r\n                    >\r\n                        ← Retour à l": "auth.erreuretdesucceserro",
  "erreur spécifiques\r\n            if (error.code === ": "common.erreurspecifiquesife1",
  "erreur, utiliser la déconnexion d": "auth.erreurutiliserladeco2",
  "espace conteneur\",\n    \"preorder.description\": \"Réservez votre espace dans ce conteneur avant qu": "ecommerce.espaceconteneurpreor",
  "est en cours\r\n\r\n        // Vérifier l": "common.estencoursverifierl1",
  "est la carte par défaut, enlever le statut des autres\r\n        if (newCard.isDefault) {\r\n            cards.forEach(card => {\r\n                if (card.supplierId === newCard.supplierId) {\r\n                    card.isDefault = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        cards.push(newCard);\r\n        this.saveToStorage(cards);\r\n\r\n        return newCard;\r\n    }\r\n\r\n    // Mettre à jour une carte existante\r\n    async updateCard(cardId: string, updates: Partial<SavedBusinessCard>): Promise<SavedBusinessCard | null> {\r\n        const cards = this.getStoredCards();\r\n        const cardIndex = cards.findIndex(card => card.id === cardId);\r\n\r\n        if (cardIndex === -1) {\r\n            return null;\r\n        }\r\n\r\n        const updatedCard = {\r\n            ...cards[cardIndex],\r\n            ...updates,\r\n            updatedAt: new Date()\r\n        };\r\n\r\n        ": "forms.estlacartepardefaute",
  "est la carte par défaut, enlever le statut des autres\r\n        if (newCard.isDefault) {\r\n            cards.forEach(card => {\r\n                if (card.supplierId === newCard.supplierId) {\r\n                    card.isDefault = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        cards.push(newCard);\r\n        this.saveToStorage(cards);\r\n\r\n        return newCard;\r\n    }\r\n\r\n    // Mettre à jour une carte existante\r\n    async updateCard(cardId: string, updates: Partial<SavedBusinessCard>): Promise<SavedBusinessCard | null> {\r\n        const cards = this.getStoredCards();\r\n        const cardIndex = cards.findIndex(card => card.id === cardId);\r\n\r\n        if (cardIndex === -1) {\r\n            return null;\r\n        }\r\n\r\n        const updatedCard = {\r\n            ...cards[cardIndex],\r\n            ...updates,\r\n            updatedAt: new Date()\r\n        };\r\n\r\n        // Si c": "forms.estlacartepardefaute1",
  "est maintenant la carte par défaut, enlever le statut des autres\r\n        if (updates.isDefault && updatedCard.isDefault) {\r\n            cards.forEach((card, index) => {\r\n                if (index !== cardIndex && card.supplierId === updatedCard.supplierId) {\r\n                    card.isDefault = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        cards[cardIndex] = updatedCard;\r\n        this.saveToStorage(cards);\r\n\r\n        return updatedCard;\r\n    }\r\n\r\n    // Supprimer une carte\r\n    async deleteCard(cardId: string): Promise<boolean> {\r\n        const cards = this.getStoredCards();\r\n        const initialLength = cards.length;\r\n        const filteredCards = cards.filter(card => card.id !== cardId);\r\n\r\n        if (filteredCards.length < initialLength) {\r\n            this.saveToStorage(filteredCards);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    ": "forms.estmaintenantlacarte",
  "est maintenant la carte par défaut, enlever le statut des autres\r\n        if (updates.isDefault && updatedCard.isDefault) {\r\n            cards.forEach((card, index) => {\r\n                if (index !== cardIndex && card.supplierId === updatedCard.supplierId) {\r\n                    card.isDefault = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        cards[cardIndex] = updatedCard;\r\n        this.saveToStorage(cards);\r\n\r\n        return updatedCard;\r\n    }\r\n\r\n    // Supprimer une carte\r\n    async deleteCard(cardId: string): Promise<boolean> {\r\n        const cards = this.getStoredCards();\r\n        const initialLength = cards.length;\r\n        const filteredCards = cards.filter(card => card.id !== cardId);\r\n\r\n        if (filteredCards.length < initialLength) {\r\n            this.saveToStorage(filteredCards);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Dupliquer une carte\r\n    async duplicateCard(cardId: string, newName: string): Promise<SavedBusinessCard | null> {\r\n        const originalCard = await this.getCard(cardId);\r\n        if (!originalCard) {\r\n            return null;\r\n        }\r\n\r\n        return this.saveCard({\r\n            name: newName,\r\n            data: { ...originalCard.data },\r\n            supplierId: originalCard.supplierId,\r\n            isDefault: false,\r\n            isPublic: originalCard.isPublic,\r\n            tags: [...originalCard.tags]\r\n        });\r\n    }\r\n\r\n    // Marquer une carte comme téléchargée\r\n    async incrementDownloads(cardId: string): Promise<void> {\r\n        const cards = this.getStoredCards();\r\n        const card = cards.find(c => c.id === cardId);\r\n        if (card) {\r\n            card.downloads += 1;\r\n            this.saveToStorage(cards);\r\n        }\r\n    }\r\n\r\n    // Marquer une carte comme partagée\r\n    async incrementShares(cardId: string): Promise<void> {\r\n        const cards = this.getStoredCards();\r\n        const card = cards.find(c => c.id === cardId);\r\n        if (card) {\r\n            card.shares += 1;\r\n            this.saveToStorage(cards);\r\n        }\r\n    }\r\n\r\n    // Obtenir la carte par défaut d": "forms.estmaintenantlacarte1",
  "est pas autorisé`\r\n        };\r\n      }\r\n    }\r\n\r\n    return { valid: true };\r\n  }\r\n  ": "common.estpasautorisereturn",
  "est pas autorisé`\r\n        };\r\n      }\r\n    }\r\n\r\n    return { valid: true };\r\n  }\r\n  /**\r\n   * Simulation d": "common.estpasautorisereturn1",
  "est pas autorisé`;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const handleFileSelect = async (files: FileList) => {\r\n    const fileArray = Array.from(files);\r\n    \r\n    // Vérifier le nombre maximum de fichiers\r\n    if (uploadFiles.length + fileArray.length > maxFiles) {\r\n      alert(`Vous ne pouvez télécharger que ${maxFiles} fichiers au maximum`);\r\n      return;\r\n    }\r\n\r\n    ": "forms.estpasautorisereturn",
  "est pas autorisé`;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const handleFileSelect = async (files: FileList) => {\r\n    const fileArray = Array.from(files);\r\n    \r\n    // Vérifier le nombre maximum de fichiers\r\n    if (uploadFiles.length + fileArray.length > maxFiles) {\r\n      alert(`Vous ne pouvez télécharger que ${maxFiles} fichiers au maximum`);\r\n      return;\r\n    }\r\n\r\n    // Valider chaque fichier\r\n    const validationErrors: string[] = [];\r\n    const validFiles: File[] = [];\r\n\r\n    for (const file of fileArray) {\r\n      const error = validateFile(file);\r\n      if (error) {\r\n        validationErrors.push(error);\r\n      } else {\r\n        validFiles.push(file);\r\n      }\r\n    }\r\n\r\n    if (validationErrors.length > 0) {\r\n      alert(validationErrors.join(": "forms.estpasautorisereturn1",
  "est pas dans Firestore\r\n            await this.ensureCurrentUserInFirestore();\r\n\r\n            // 3. Re-récupérer les utilisateurs après l": "admin.estpasdansfirestorea2",
  "est pas facilement accessible\r\n          uploadedAt: new Date(), // Date par défaut\r\n          path: itemRef.fullPath,\r\n          metadata: {\r\n            contentType: ": "common.estpasfacilementacce1",
  "est pas une image`;\r\n    }\r\n\r\n    // Vérifier la taille\r\n    if (file.size > maxSizePerImage * 1024 * 1024) {\r\n      return `L": "common.estpasuneimageverifi1",
  "est trouvé, proposer de créer des utilisateurs de test\r\n      if (convertedUsers.length === 0) {\r\n        console.log(": "admin.esttrouveproposerdec2",
  "est un compte fournisseur\r\n    permissions: string[];\r\n}\r\n\r\n// Hook pour gérer l": "ecommerce.estuncomptefournisse1",
  "est un fichier uploadé\r\n        if (document.url) {\r\n          await uploadService.deleteFile(document.url);\r\n        }\r\n        \r\n        ": "forms.estunfichieruploadei",
  "est un fichier uploadé\r\n        if (document.url) {\r\n          await uploadService.deleteFile(document.url);\r\n        }\r\n        \r\n        // Retirer de la liste locale\r\n        setDocuments(prev => prev.filter(doc => doc.id !== document.id));\r\n        \r\n        alert(": "forms.estunfichieruploadei1",
  "est une URL externe\r\n      window.document.body.appendChild(link);\r\n      link.click();\r\n      window.document.body.removeChild(link);\r\n    } else {\r\n      // Fallback: créer un PDF fictif pour les documents de démonstration\r\n      const link = window.document.createElement(": "navigation.estuneurlexternewind2",
  "excellence industrielle chinoise\r\n                        <": "common.excellenceindustriel",
  "existe pas\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Affiche les informations de connexion des utilisateurs de test\r\n   *": "auth.existepasreturnfalse",
  "existe pas ou a été déplacée.\n      <": "common.existepasouaetedepla",
  "expiration de session\",\n    \"supplier.settings.changePassword\": \"Changer le mot de passe\",\n    \"supplier.settings.currentPassword\": \"Mot de passe actuel\",\n    \"supplier.settings.newPassword\": \"Nouveau mot de passe\",\n    \"supplier.settings.confirmPassword\": \"Confirmer le mot de passe\",\n    \"supplier.settings.save\": \"Enregistrer\",\n    \"supplier.settings.saveChanges\": \"Enregistrer les modifications\",\n    \"supplier.settings.cancel\": \"Annuler\",\n    \"supplier.settings.loading\": \"Chargement...\",\n    \"supplier.settings.saved\": \"Paramètres sauvegardés\",\n    \"supplier.settings.error\": \"Erreur lors de la sauvegarde\",\n\n    // Traductions pour les filtres de recherche\n    \"search.filter.allCategories\": \"Toutes les catégories\",\n    \"search.filter.name\": \"Nom du produit\",\n    \"search.filter.category\": \"Catégorie\",\n    \"search.filter.moq\": \"Quantité minimum (MOQ)\",\n    \"search.filter.priceRange\": \"Fourchette de prix\",\n    \"search.filter.minPrice\": \"Prix minimum\",\n    \"search.filter.maxPrice\": \"Prix maximum\",\n    \"search.filter.ce\": \"Certifié CE\",\n\n    // Traductions pour le modal de produit\n    \"product.modal.addTitle\": \"Ajouter un produit\",\n    \"product.modal.editTitle\": \"Modifier le produit\",\n    \"product.modal.productName\": \"Nom du produit\",\n    \"product.modal.productNamePlaceholder\": \"Entrez le nom du produit\",\n    \"product.modal.productId\": \"ID Produit\",\n    \"product.modal.productIdPlaceholder\": \"Entrez l": "auth.expirationdesessions",
  "export\r\n                      </button>\r\n                    </div>\r\n\r\n                    <div className=\"interactive-card p-4 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 text-center\">\r\n                      <div className=\"p-3 bg-orange-100 dark:bg-orange-900 rounded-full w-fit mx-auto mb-3\">\r\n                        <Eye size={20} className=\"text-orange-600 dark:text-orange-400\" />\r\n                      </div>\r\n                      <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">Données collectées</h4>\r\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400 mb-3\">\r\n                        Voir quelles données nous stockons\r\n                      </p>\r\n                      <button\r\n                        onClick={() => showNotification(": "forms.exportbuttondivdivcl",
  "exécution :<": "common.execution",
  "exécution :</span>\r\n                    </div>\r\n                    <pre className=\"whitespace-pre-wrap overflow-x-auto\">\r\n                        {results}\r\n                    </pre>\r\n                </div>\r\n            )}\r\n\r\n            {/* Résultats du système ultime */}\r\n            {ultimateResult && ultimateResult.success && ultimateResult.accounts && (\r\n                <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\r\n                    <div className=\"flex items-start gap-3\">\r\n                        <CheckCircle className=\"h-6 w-6 text-green-500 mt-0.5\" />\r\n                        <div className=\"flex-1\">\r\n                            <h3 className=\"font-bold text-green-800 mb-3 flex items-center gap-2\">\r\n                                🎉 Système configuré avec succès !\r\n                                <span className=\"text-sm bg-green-100 px-2 py-1 rounded-full\">\r\n                                    {ultimateResult.accounts.length} comptes\r\n                                </span>\r\n                            </h3>\r\n\r\n                            <div className=\"grid gap-3\">\r\n                                {ultimateResult.accounts.map((account: any, index: number) => (\r\n                                    <div key={index} className=\"bg-white rounded-lg p-4 border border-green-200\">\r\n                                        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\r\n                                            <div>\r\n                                                <div className=\"flex items-center gap-2 mb-1\">\r\n                                                    {account.role === ": "forms.executionspandivprec",
  "fournisseur@chinetonusine.com": "ecommerce.fournisseurchinetonu1",
  "homepage.cards.machinery": "navigation.homepagecardsmachine3",
  "homepage.cards.machinery.description": "navigation.homepagecardsmachine7",
  "https://chinetousine.com": "common.httpschinetousinecom",
  "https://facebook.com/votre-profil": "common.httpsfacebookcomvotr",
  "https://instagram.com/votre-profil": "common.httpsinstagramcomvot",
  "https://linkedin.com/in/votre-profil": "common.httpslinkedincominvo",
  "https://tiktok.com/@votre-profil": "common.httpstiktokcomvotrep",
  "https://twitch.tv/votre-profil": "common.httpstwitchtvvotrepr",
  "https://x.com/votre-profil": "common.httpsxcomvotreprofil",
  "image principale\r\n            moq: product.moq,\r\n            category: product.category,\r\n            supplier: {\r\n                name: product.supplier.name,\r\n                location: product.supplier.location,\r\n                rating: product.supplier.rating,\r\n                verified: product.supplier.verified\r\n            },\r\n            variants: product.variants?.map(v => v.name) || [],\r\n            stock: product.stock || 0,\r\n            tags: product.tags || [],\r\n            discount: product.discount\r\n        };\r\n\r\n        addToQuote(productForQuote, quantity, selectedVariants);\r\n\r\n        // Notification de succès\r\n        showToast(`${product.name} ajouté au devis (${quantity} unités)`, ": "forms.imageprincipalemoqpr1",
  "image principale\r\n    supplier: {\r\n        name: string;\r\n        location: string;\r\n        rating: number;\r\n        verified: boolean;\r\n    };\r\n    description: string;\r\n    variants: string[]; // Noms simplifiés des variantes\r\n    stock: number;\r\n    tags: string[];\r\n    discount?: {\r\n        minQty: number;\r\n        percentage: number;\r\n    };\r\n}\r\n\r\nconst PRODUCTS_COLLECTION = ": "forms.imageprincipalesuppl",
  "image uploadée\r\n          const uploadedUrl = `https:": "common.imageuploadeeconstup",
  "image uploadée\r\n          const uploadedUrl = `https://example.com/uploads/${uploadImage.file?.name}`;\r\n          \r\n          setImages(prev => prev.map(img => \r\n            img.id === uploadImage.id \r\n              ? { ...img, progress: 100, status: ": "forms.imageuploadeeconstup",
  "images\r\n            </h2>\r\n            <ImageUpload\r\n              onUpload={handleImageUpload}\r\n              maxImages={8}\r\n              maxSizePerImage={5}\r\n              existingImages={uploadedImages}\r\n              onRemoveExisting={handleRemoveImage}\r\n            />\r\n          </div>\r\n\r\n          {/* Statistiques */}\r\n          {uploadedImages.length > 0 && (\r\n            <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Statistiques</h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\r\n                  <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n                    {uploadedImages.length}\r\n                  </div>\r\n                  <div className=\"text-sm text-blue-600 dark:text-blue-400\">Images uploadées</div>\r\n                </div>\r\n                <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\r\n                  <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\r\n                    100%\r\n                  </div>\r\n                  <div className=\"text-sm text-green-600 dark:text-green-400\">Taux de réussite</div>\r\n                </div>\r\n                <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\r\n                  <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\r\n                    5MB\r\n                  </div>\r\n                  <div className=\"text-sm text-purple-600 dark:text-purple-400\">Taille max</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Informations techniques */}\r\n      <div className=\"mt-8 bg-gray-50 dark:bg-gray-800 p-6 rounded-lg\">\r\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\r\n          <Package className=\"w-5 h-5\" />\r\n          Informations techniques\r\n        </h3>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\r\n          <div>\r\n            <strong>Mode actuel :</strong> {uploadService[": "forms.imagesh2imageuploado",
  "images avec redimensionnement automatique\r\n   */\r\n  async uploadImages(\r\n    files: File[],\r\n    options: UploadOptions & {\r\n      maxWidth?: number;\r\n      maxHeight?: number;\r\n      quality?: number;\r\n    } = {},\r\n    onProgress?: (fileIndex: number, progress: number) => void\r\n  ): Promise<UploadResult[]> {\r\n    const processedFiles: File[] = [];\r\n\r\n    // Redimensionner les images si nécessaire\r\n    for (const file of files) {\r\n      if (file.type.startsWith(": "common.imagesavecredimensio1",
  "images pour un produit spécifique\r\n   */\r\n  async uploadProductImages(\r\n    files: File[],\r\n    productId: string,\r\n    options: UploadOptions = {}\r\n  ): Promise<BatchUploadResult> {\r\n    const basePath = `products/${productId}/images`;\r\n    return this.uploadMultipleFiles(files, basePath, options);\r\n  }\r\n\r\n  /**\r\n   * Upload de vidéos pour un produit spécifique\r\n   */\r\n  async uploadProductVideos(\r\n    files: File[],\r\n    productId: string,\r\n    options: UploadOptions = {}\r\n  ): Promise<BatchUploadResult> {\r\n    const basePath = `products/${productId}/videos`;\r\n    return this.uploadMultipleFiles(files, basePath, options);\r\n  }\r\n\r\n  /**\r\n   * Upload de documents pour un produit spécifique\r\n   */\r\n  async uploadProductDocuments(\r\n    files: File[],\r\n    productId: string,\r\n    options: UploadOptions = {}\r\n  ): Promise<BatchUploadResult> {\r\n    const basePath = `products/${productId}/documents`;\r\n    return this.uploadMultipleFiles(files, basePath, options);\r\n  }\r\n\r\n  /**\r\n   * Obtenir tous les fichiers média d": "ecommerce.imagespourunproduits1",
  "importe quel bureau ou table de chevet.\r\n\r\nLes LED indicatrices informent du statut de charge en temps réel, tandis que les protections intégrées préviennent la surchauffe et les surtensions. Compatible avec iPhone, Samsung Galaxy, et tous les appareils Qi.\r\n\r\nDesign moderne et épuré, parfait pour les environnements professionnels ou domestiques haut de gamme.`,\r\n        price: 1.80,\r\n        moq: 150,\r\n        category: ": "forms.importequelbureauout1",
  "index du fichier si nécessaire\r\n            });\r\n          }\r\n        });\r\n\r\n        result.successful.push(mediaFile);\r\n        result.totalUploaded++;\r\n      } catch (error) {\r\n        result.failed.push({\r\n          file,\r\n          error: error instanceof Error ? error.message : ": "common.indexdufichiersinece",
  "information pour la connexion universelle *": "auth.informationpourlacon",
  "information pour la connexion universelle */}\r\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 text-blue-800 dark:text-blue-200 text-sm rounded-md p-4 mb-4\">\r\n            <div className=\"font-medium\">🌟 Connexion Universelle</div>\r\n            <div className=\"mt-1\">Connectez-vous simplement avec votre email et mot de passe. Votre rôle sera automatiquement attribué.</div>\r\n          </div>\r\n\r\n          <form className=\"auth-form\" onSubmit={handleSubmit}>\r\n            <div className=\"auth-form-group\">\r\n              <div className=\"auth-input-wrapper\">\r\n                <input\r\n                  type=\"email\"\r\n                  className=\"auth-input\"\r\n                  placeholder={t(": "auth.informationpourlacon1",
  "initialisation automatique désactivé pour éviter les erreurs Auth": "common.initialisationautoma1",
  "initialisation sécurisé qui n": "common.initialisationsecuri1",
  "initialisation sécurisée:": "common.initialisationsecuri3",
  "initializeWithSampleData appelée - version simplifiée": "common.initializewithsample1",
  "inscription universelle */}\r\n            <div className=\"auth-info-badge\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <div className=\"w-4 h-4 text-blue-300\">\r\n                  <svg fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                    <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                </div>\r\n                <span className=\"text-sm text-blue-100\">\r\n                  🌟 Connexion Universelle\r\n                </span>\r\n              </div>\r\n              <p className=\"text-xs text-blue-200 mt-2\">\r\n                Connectez-vous simplement avec votre email et mot de passe. Votre rôle sera automatiquement attribué.\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"auth-visual-illustration\">\r\n              <div className=\"illustration-circle\"></div>\r\n              <div className=\"illustration-circle\"></div>\r\n              <div className=\"illustration-center\">\r\n                <div className=\"w-6 h-6 text-white\">\r\n                  <svg fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Colonne formulaire */}\r\n        <div className=\"auth-form-column auth-form-spectacular\">\r\n          <div className=\"auth-form-header\">\r\n            <h1 className=\"auth-form-title\">{t(": "auth.inscriptionuniversel",
  "inscription universelle */}\r\n          <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200 text-sm rounded-md p-4 mb-4\">\r\n            <div className=\"font-medium\">🚀 Inscription Universelle</div>\r\n            <div className=\"mt-1\">Créez votre compte facilement. Votre rôle sera automatiquement attribué (Client par défaut, Admin si email admin).</div>\r\n          </div>\r\n\r\n          <form className=\"auth-form\" onSubmit={handleSubmit}>\r\n            <div className=\"auth-form-group\">\r\n              <div className=\"auth-input-wrapper\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"auth-input\"\r\n                  placeholder={t(": "auth.inscriptionuniversel2",
  "inscription\",\n    \"creatingAccount\": \"Création du compte...\",\n    \"createMyAccount\": \"Créer mon compte\",\n    \"hasAccountQuestion\": \"Vous avez déjà un compte ?\",\n    \"role.customerTitle\": \"Client\",\n    \"role.supplierTitle\": \"Fournisseur\",\n    \"role.sourcerTitle\": \"Sourceur\",\n    \"role.customerDescription\": \"Acheter des produits aux fournisseurs\",\n    \"role.supplierDescription\": \"Vendre vos produits aux clients\",\n    \"role.sourcerDescription\": \"Aider les clients à trouver les meilleurs fournisseurs\",\n    \"common.optional\": \"Optionnel\",\n    \"fashion\": \"Mode\",\n    \"tech\": \"Technologie\",\n    \"beauty\": \"Beauté\",\n    \"sports\": \"Sport\",\n    \"mainAudience\": \"Audience principale\",\n    \"mainAudiencePlaceholder\": \"Pays ou région majoritaire, âge moyen\",\n    \"engagementRate\": \"Taux d": "auth.inscriptioncreatinga",
  "inscription\",\n    \"search.button\": \"Rechercher\",\n\n    \"socialNetworkSelector.title\": \"Réseaux sociaux\",\n    \"socialNetworkSelector.subtitle\": \"Sélectionnez vos réseaux sociaux\",\n    \"socialNetworkSelector.modalInfo\": \"Un formulaire s": "auth.inscriptionsearchbut",
  "inscription: ${email}`);\r\n\r\n        try {\r\n            const result = await productionUserService.createProductionUser({\r\n                email,\r\n                password,\r\n                name,\r\n                role,\r\n                isActive: true\r\n            });\r\n\r\n            if (result.success && result.user) {\r\n                console.log(`✅ Inscription réussie: ${result.user.name}`);\r\n\r\n                ": "auth.inscriptionemailtryc",
  "inscription: ${email}`);\r\n\r\n        try {\r\n            const result = await productionUserService.createProductionUser({\r\n                email,\r\n                password,\r\n                name,\r\n                role,\r\n                isActive: true\r\n            });\r\n\r\n            if (result.success && result.user) {\r\n                console.log(`✅ Inscription réussie: ${result.user.name}`);\r\n\r\n                // Connecter automatiquement l": "auth.inscriptionemailtryc1",
  "inscrire\r\n                            </Link>\r\n                        </div>\r\n\r\n                        {/* Placeholder for future search */}\r\n                        <div className=\"max-w-2xl mx-auto relative\">\r\n                            <div className=\"relative\">\r\n                                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-6 h-6\" />\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"🚧 Nouvelle interface en cours de développement...\"\r\n                                    disabled\r\n                                    className=\"w-full pl-12 pr-4 py-4 bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-2xl text-lg text-gray-500 dark:text-gray-400 shadow-lg transition-all duration-300 cursor-not-allowed\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Stats Section */}\r\n            <div className=\"bg-white dark:bg-gray-800 shadow-xl border-y border-gray-200 dark:border-gray-700\">\r\n                <div className=\"container mx-auto px-4 py-12\">\r\n                    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-8\">\r\n                        {stats.map((stat, index) => (\r\n                            <div\r\n                                key={index}\r\n                                className={`text-center transition-all duration-500 ${visibleCards > index ? ": "forms.inscrirelinkdivplace",
  "inscrire\",\n    \"signInSubtitle\": \"Accédez à votre espace personnel\",\n    \"signUpSubtitle\": \"Créez votre compte en quelques étapes\",\n    \"googleLoginError\": \"Erreur de connexion Google\",\n    \"orContinueWith\": \"Ou continuer avec\",\n    \"signInWithGoogle\": \"Continuer avec Google\",\n    \"agreementPrefix\": \"En continuant, vous acceptez nos\",\n    \"agreementSuffix\": \".\",\n    \"and\": \"et\",\n    \"andOur\": \"et notre\",\n    \"termsOfService\": \"conditions d": "auth.inscriresigninsubtit",
  "instance secondaire\r\n            this.initializeSecondaryApp();\r\n\r\n            // 3. Vérifications basiques\r\n            if (!userData.email || !userData.email.includes(": "auth.instancesecondaireth1",
  "instant\",\n    \"notifications.timeAgo.minutes\": \"Il y a {0} min\",\n    \"notifications.timeAgo.hours\": \"Il y a {0}h\",\n    \"notifications.timeAgo.days\": \"Il y a {0}j\",\n    \"notifications.priority.urgent\": \"Urgent\",\n    \"notifications.priority.high\": \"Élevé\",\n    \"notifications.priority.medium\": \"Moyen\",\n    \"notifications.priority.low\": \"Faible\",\n    \"notifications.allLoaded\": \"Toutes les notifications ont été chargées\",\n    \"notifications.count.singular\": \"{0} non lu\",\n    \"notifications.count.plural\": \"{0} non lus\",\n\n    \"email\": \"Email\",\n    \"password\": \"Mot de passe\",\n    \"confirmPassword\": \"Confirmer le mot de passe\",\n    \"login\": \"Connexion\",\n    \"register\": \"Inscription\",\n    \"loginDescription\": \"Connectez-vous pour accéder à votre compte\",\n    \"accountType\": \"Type de compte\",\n    \"role.customer\": \"Client\",\n    \"role.supplier\": \"Fournisseur\",\n    \"role.sourcer\": \"Sourceur\",\n    \"role.influencer\": \"Influenceur\",\n    \"emailPlaceholder\": \"votre@email.com\",\n    \"passwordPlaceholder\": \"••••••••\",\n    \"rememberMe\": \"Se souvenir de moi\",\n    \"forgotPassword\": \"Mot de passe oublié ?\",\n    \"loginButton\": \"Se connecter\",\n    \"loggingIn\": \"Connexion...\",\n    \"createAccount\": \"Créer un compte\",\n    \"registerDescription\": \"Créez votre compte pour commencer\",\n    \"fullName\": \"Nom complet\",\n    \"yourNamePlaceholder\": \"Votre nom complet\",\n    \"nameRequired\": \"Le nom est requis\",\n    \"emailRequired\": \"L": "auth.instantnotifications",
  "instant, créons directement dans la table users\r\n            ": "admin.instantcreonsdirecte",
  "instant, créons directement dans la table users\r\n            // En production, il faudrait d": "admin.instantcreonsdirecte1",
  "instant, retourner tous les produits\r\n    });\r\n    setSearchResults(filtered);\r\n    console.log(": "navigation.instantretournertous",
  "interface\r\n    const [selectedImageIndex, setSelectedImageIndex] = useState(0);\r\n    const [quantity, setQuantity] = useState(0);\r\n    const [selectedVariants, setSelectedVariants] = useState<Record<string, string>>({});\r\n    const [showImageZoom, setShowImageZoom] = useState(false);\r\n    const [showContactForm, setShowContactForm] = useState(false);\r\n\r\n    ": "common.interfaceconstselect",
  "intègre parfaitement dans tout environnement moderne.`,\r\n        price: 4.50,\r\n        moq: 80,\r\n        category: ": "ecommerce.integreparfaitementd1",
  "intégration Firebase des produits\r\nexport const testFirebaseIntegration = async () => {\r\n  try {\r\n    console.log(": "ecommerce.integrationfirebased2",
  "intégration Firebase...": "common.integrationfirebase1",
  "intérêt\r\n                            <": "common.interet",
  "intérêt\r\n                            </label>\r\n                            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\r\n                                {productCategories.map(product => (\r\n                                    <label key={product} className=\"inline-flex items-center\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            checked={formData.interestedProducts.includes(product)}\r\n                                            onChange={() => handleProductSelect(product)}\r\n                                            className=\"h-4 w-4 text-blue-600 rounded\"\r\n                                        />\r\n                                        <span className=\"ml-2 text-sm\">{product}</span>\r\n                                    </label>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                                Notes\r\n                            </label>\r\n                            <textarea\r\n                                name=\"notes\"\r\n                                value={formData.notes}\r\n                                onChange={handleChange}\r\n                                rows={3}\r\n                                className=\"w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n                                placeholder=\"Notes supplémentaires...\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\r\n                            <Button\r\n                                type=\"button\"\r\n                                variant=\"outline\"\r\n                                onClick={onClose}\r\n                            >\r\n                                Annuler\r\n                            </Button>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                disabled={loading}\r\n                            >\r\n                                {loading ? ": "forms.interetlabeldivclass",
  "machine": "common.machine",
  "machinery": "common.machinery5",
  "mailto:contact@chinetonusine.com": "common.mailtocontactchineto",
  "manage_profile": "common.manageprofile",
  "manager@chinetousine.com": "common.managerchinetousinec",
  "messageSentConfirmation": "common.messagesentconfirmat",
  "messages": "common.messages11",
  "moderator@chinetousine.com": "common.moderatorchinetousin",
  "myProfile": "common.myprofile",
  "mySupplierProfile": "ecommerce.mysupplierprofile",
  "médical": "common.medical5",
  "notifications": "common.notifications15",
  "notifications.all": "common.notificationsall1",
  "notifications.allLoaded": "common.notificationsallload1",
  "notifications.allTypes": "common.notificationsalltype2",
  "notifications.clearFilters": "common.notificationsclearfi1",
  "notifications.count.plural": "common.notificationscountpl2",
  "notifications.count.singular": "common.notificationscountsi2",
  "notifications.error": "common.notificationserror1",
  "notifications.errors": "common.notificationserrors1",
  "notifications.filters": "common.notificationsfilters1",
  "notifications.info": "common.notificationsinfo1",
  "notifications.loading": "common.notificationsloading1",
  "notifications.markAllAsRead": "common.notificationsmarkall1",
  "notifications.markAsRead": "common.notificationsmarkasr1",
  "notifications.noNotifications": "common.notificationsnonotif1",
  "notifications.noNotificationsMessage": "common.notificationsnonotif4",
  "notifications.orders": "ecommerce.notificationsorders1",
  "notifications.payments": "common.notificationspayment1",
  "notifications.priority.high": "common.notificationspriorit1",
  "notifications.priority.low": "common.notificationspriorit3",
  "notifications.priority.medium": "common.notificationspriorit5",
  "notifications.priority.urgent": "common.notificationspriorit7",
  "notifications.read": "common.notificationsread1",
  "notifications.refresh": "common.notificationsrefresh1",
  "notifications.seeDetails": "common.notificationsseedeta1",
  "notifications.shipments": "common.notificationsshipmen1",
  "notifications.status": "common.notificationsstatus1",
  "notifications.system": "common.notificationssystem1",
  "notifications.timeAgo.days": "common.notificationstimeago2",
  "notifications.timeAgo.hours": "common.notificationstimeago5",
  "notifications.timeAgo.minutes": "common.notificationstimeago8",
  "notifications.timeAgo.now": "common.notificationstimeago11",
  "notifications.title": "common.notificationstitle2",
  "notifications.type": "common.notificationstype1",
  "notifications.unread": "common.notificationsunread1",
  "notifications.warnings": "common.notificationswarning1",
  "objet contenant name, email, password, confirmPassword\r\n   * @returns Un objet contenant la validité et les messages d": "auth.objetcontenantnameem2",
  "objet utilisateur démo\r\n   *": "admin.objetutilisateurdemo",
  "objet utilisateur démo\r\n   */\r\n  static createDemoUser(email: string, role: UserRole, name?: string) {\r\n    return {\r\n      id: `demo_${role}_${Date.now()}`,\r\n      email: email.trim(),\r\n      name: name?.trim() || `Utilisateur ${role}`,\r\n      role: role,\r\n      favorites: [],\r\n      browsingHistory: [],\r\n      messages: [],\r\n      subscription: ": "auth.objetutilisateurdemo1",
  "objet utilisateur à retourner\r\n            const newUser: AdminUser = {\r\n                ...userDoc,\r\n                uid\r\n            };\r\n\r\n            console.log(": "navigation.objetutilisateuraret1",
  "offres adaptées aux besoins de votre entreprise<": "common.offresadapteesauxbes",
  "onglet Découvrir\",\n    \"supplier.products.back\": \"Retour au tableau de bord\",\n    \"supplier.products.totalProducts\": \"Total Produits\",\n    \"supplier.products.stats.totalProducts\": \"Total Produits\",\n    \"supplier.products.stats.views\": \"Vues ce mois\",\n    \"supplier.products.stats.rating\": \"Note moyenne\",\n    \"supplier.products.stats.inStock\": \"En stock\",\n    \"supplier.products.inStock\": \"En stock\",\n    \"supplier.products.name\": \"Nom\",\n    \"supplier.products.category\": \"Catégorie\",\n    \"supplier.products.price\": \"Prix d": "navigation.ongletdecouvrirsuppl",
  "ont pas pu être créés": "common.ontpaspuetrecrees1",
  "ont pas pu être créés (ils existent peut-être déjà)": "common.ontpaspuetrecreesils1",
  "opération": "common.operation1",
  "orienter la lumière exactement où vous en avez besoin. Le port USB intégré vous permet de charger vos appareils directement depuis la lampe.\r\n\r\nConstruction robuste en alliage d": "common.orienterlalumiereexa1",
  "ou cliquez pour sélectionner": "common.oucliquezpourselecti5",
  "ou cliquez pour sélectionner des images": "common.oucliquezpourselecti7",
  "personnalisé": "common.personnalise1",
  "politique de confidentialité": "common.politiquedeconfident8",
  "product.modal.supportedFormats": "ecommerce.productmodalsupporte",
  "profile": "common.profile7",
  "pushMessages": "common.pushmessages",
  "quality@chinetousine.com": "common.qualitychinetousinec",
  "qualité": "common.qualite2",
  "réussie": "common.reussie3",
  "sales@beijing-machinery.com": "common.salesbeijingmachiner",
  "sourcer@chinetonusine.com": "common.sourcerchinetonusine",
  "superadmin@chinetonusine.com": "admin.superadminchinetonus",
  "supplier.categories.machinery": "ecommerce.suppliercategoriesma2",
  "supplier.dashboard.messages": "admin.supplierdashboardmes2",
  "supplier.dashboard.threeNewMessages": "admin.supplierdashboardthr2",
  "supplier.messages.allTypes": "ecommerce.suppliermessagesallt",
  "supplier.messages.back": "navigation.suppliermessagesback",
  "supplier.messages.date": "ecommerce.suppliermessagesdate",
  "supplier.messages.error": "ecommerce.suppliermessageserro",
  "supplier.messages.from": "ecommerce.suppliermessagesfrom",
  "supplier.messages.inquiry": "ecommerce.suppliermessagesinqu",
  "supplier.messages.loading": "ecommerce.suppliermessagesload",
  "supplier.messages.order": "ecommerce.suppliermessagesorde",
  "supplier.messages.reply": "ecommerce.suppliermessagesrepl",
  "supplier.messages.respondedToday": "ecommerce.suppliermessagesresp",
  "supplier.messages.searchPlaceholder": "ecommerce.suppliermessagessear",
  "supplier.messages.subject": "ecommerce.suppliermessagessubj",
  "supplier.messages.subtitle": "ecommerce.suppliermessagessubt",
  "supplier.messages.support": "ecommerce.suppliermessagessupp",
  "supplier.messages.totalMessages": "ecommerce.suppliermessagestota",
  "supplier.messages.type": "ecommerce.suppliermessagestype",
  "supplier.messages.unreadMessages": "ecommerce.suppliermessagesunre",
  "supplier.settings.contactEmail": "auth.suppliersettingscont",
  "supplier.settings.contactInfo": "admin.suppliersettingscont",
  "supplier.settings.contactName": "forms.suppliersettingscont",
  "supplier.settings.contactPhone": "forms.suppliersettingscont1",
  "supplier.settings.emailNotifications": "auth.suppliersettingsemai",
  "supplier.settings.marketingNotifications": "admin.suppliersettingsmark",
  "supplier.settings.messageNotifications": "admin.suppliersettingsmess",
  "supplier.settings.notifications": "admin.suppliersettingsnoti",
  "supplier.settings.orderNotifications": "admin.suppliersettingsorde",
  "supplier.settings.profile": "admin.suppliersettingsprof",
  "supplier.settings.pushNotifications": "admin.suppliersettingspush",
  "supplier.settings.reviewNotifications": "admin.suppliersettingsrevi",
  "supplier.sidebar.messages": "ecommerce.suppliersidebarmessa2",
  "support@chinetonusine.com": "common.supportchinetonusine2",
  "support@chinetousine.com": "common.supportchinetousinec",
  "sécurité": "admin.securite14",
  "termos de serviço": "common.termosdeservico1",
  "términos de servicio": "common.terminosdeservicio1",
  "términos de uso": "common.terminosdeuso1",
  "un admin\r\n   */\r\n  static isAdminEmail(email: string): boolean {\r\n    return this.ADMIN_EMAILS.includes(email.toLowerCase().trim());\r\n  }\r\n\r\n  /**\r\n   * Obtient la route de redirection appropriée après connexion\r\n   * @param role - Le rôle de l": "auth.unadminstaticisadmin2",
  "un appel API\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    mockNotifications = mockNotifications.filter(n => n.id !== notificationId);\r\n  }\r\n  ": "common.unappelapiawaitnewpr",
  "un appel API\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    mockNotifications = mockNotifications.map(notification => \r\n      notificationIds.includes(notification.id) \r\n        ? { ...notification, isRead: true, updatedAt: new Date() }\r\n        : notification\r\n    );\r\n  }\r\n\r\n  async markAllAsRead(): Promise<void> {\r\n    ": "common.unappelapiawaitnewpr1",
  "un appel API\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    \r\n    let filteredNotifications = [...mockNotifications];\r\n\r\n    // Appliquer les filtres\r\n    if (filters) {\r\n      if (filters.isRead !== undefined) {\r\n        filteredNotifications = filteredNotifications.filter(n => n.isRead === filters.isRead);\r\n      }\r\n      if (filters.type) {\r\n        filteredNotifications = filteredNotifications.filter(n => n.type === filters.type);\r\n      }\r\n      if (filters.priority) {\r\n        filteredNotifications = filteredNotifications.filter(n => n.priority === filters.priority);\r\n      }\r\n      if (filters.dateFrom) {\r\n        filteredNotifications = filteredNotifications.filter(n => n.createdAt >= filters.dateFrom!);\r\n      }\r\n      if (filters.dateTo) {\r\n        filteredNotifications = filteredNotifications.filter(n => n.createdAt <= filters.dateTo!);\r\n      }\r\n    }\r\n\r\n    // Trier par date décroissante\r\n    filteredNotifications.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\r\n\r\n    ": "common.unappelapiawaitnewpr2",
  "un appel API\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    \r\n    let filteredNotifications = [...mockNotifications];\r\n\r\n    // Appliquer les filtres\r\n    if (filters) {\r\n      if (filters.isRead !== undefined) {\r\n        filteredNotifications = filteredNotifications.filter(n => n.isRead === filters.isRead);\r\n      }\r\n      if (filters.type) {\r\n        filteredNotifications = filteredNotifications.filter(n => n.type === filters.type);\r\n      }\r\n      if (filters.priority) {\r\n        filteredNotifications = filteredNotifications.filter(n => n.priority === filters.priority);\r\n      }\r\n      if (filters.dateFrom) {\r\n        filteredNotifications = filteredNotifications.filter(n => n.createdAt >= filters.dateFrom!);\r\n      }\r\n      if (filters.dateTo) {\r\n        filteredNotifications = filteredNotifications.filter(n => n.createdAt <= filters.dateTo!);\r\n      }\r\n    }\r\n\r\n    // Trier par date décroissante\r\n    filteredNotifications.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\r\n\r\n    // Pagination\r\n    const startIndex = (page - 1) * limit;\r\n    const endIndex = startIndex + limit;\r\n    const paginatedNotifications = filteredNotifications.slice(startIndex, endIndex);\r\n\r\n    const unreadCount = mockNotifications.filter(n => !n.isRead).length;\r\n\r\n    return {\r\n      notifications: paginatedNotifications,\r\n      total: filteredNotifications.length,\r\n      unreadCount,\r\n      hasMore: endIndex < filteredNotifications.length\r\n    };\r\n  }\r\n\r\n  async markAsRead(notificationIds: string[]): Promise<void> {\r\n    ": "common.unappelapiawaitnewpr3",
  "un appel API\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    \r\n    mockNotifications = mockNotifications.map(notification => ({\r\n      ...notification,\r\n      isRead: true,\r\n      updatedAt: new Date()\r\n    }));\r\n  }\r\n\r\n  async createNotification(request: CreateNotificationRequest): Promise<Notification> {\r\n    ": "common.unappelapiawaitnewpr4",
  "un chargeur sans fil standard. Le design ultra-fin et élégant s": "common.unchargeursansfilsta1",
  "un conteneur et potentiellement son statut.\r\n   * Dans une application réelle, cela ferait un appel API pour mettre à jour la base de données.\r\n   * @param containerId L": "common.unconteneuretpotenti",
  "un des rôles spécifiés\r\n     *": "common.undesrolesspecifies",
  "un des rôles spécifiés\r\n     */\r\n    public hasAnyRole(roles: UserRole[]): boolean {\r\n        if (!this.currentUser) return false;\r\n        return roles.includes(this.currentUser.role);\r\n    }\r\n\r\n    /**\r\n     * Nettoyer le service lors de la destruction\r\n     */\r\n    public cleanup(): void {\r\n        console.log(": "admin.undesrolesspecifiesp",
  "un fournisseur\r\n    async getPublicCards(supplierId: string): Promise<SavedBusinessCard[]> {\r\n        const cards = await this.getSupplierCards(supplierId);\r\n        return cards.filter(card => card.isPublic);\r\n    }\r\n\r\n    // Méthodes privées\r\n    private getStoredCards(): SavedBusinessCard[] {\r\n        try {\r\n            const stored = localStorage.getItem(this.storageKey);\r\n            if (!stored) return this.getInitialCards();\r\n\r\n            const cards = JSON.parse(stored);\r\n            ": "forms.unfournisseurasyncge",
  "un fournisseur\r\n    async getPublicCards(supplierId: string): Promise<SavedBusinessCard[]> {\r\n        const cards = await this.getSupplierCards(supplierId);\r\n        return cards.filter(card => card.isPublic);\r\n    }\r\n\r\n    // Méthodes privées\r\n    private getStoredCards(): SavedBusinessCard[] {\r\n        try {\r\n            const stored = localStorage.getItem(this.storageKey);\r\n            if (!stored) return this.getInitialCards();\r\n\r\n            const cards = JSON.parse(stored);\r\n            // Convertir les dates string en objets Date\r\n            return cards.map((card: any) => ({\r\n                ...card,\r\n                createdAt: new Date(card.createdAt),\r\n                updatedAt: new Date(card.updatedAt)\r\n            }));\r\n        } catch {\r\n            return this.getInitialCards();\r\n        }\r\n    }\r\n\r\n    private saveToStorage(cards: SavedBusinessCard[]): void {\r\n        try {\r\n            localStorage.setItem(this.storageKey, JSON.stringify(cards));\r\n        } catch (error) {\r\n            console.error(": "forms.unfournisseurasyncge1",
  "un fournisseur\r\n    async getSupplierCards(supplierId: string): Promise<SavedBusinessCard[]> {\r\n        const cards = this.getStoredCards();\r\n        return cards.filter(card => card.supplierId === supplierId);\r\n    }\r\n\r\n    // Obtenir une carte spécifique\r\n    async getCard(cardId: string): Promise<SavedBusinessCard | null> {\r\n        const cards = this.getStoredCards();\r\n        return cards.find(card => card.id === cardId) || null;\r\n    }\r\n\r\n    ": "forms.unfournisseurasyncge2",
  "un fournisseur\r\n    async getSupplierCards(supplierId: string): Promise<SavedBusinessCard[]> {\r\n        const cards = this.getStoredCards();\r\n        return cards.filter(card => card.supplierId === supplierId);\r\n    }\r\n\r\n    // Obtenir une carte spécifique\r\n    async getCard(cardId: string): Promise<SavedBusinessCard | null> {\r\n        const cards = this.getStoredCards();\r\n        return cards.find(card => card.id === cardId) || null;\r\n    }\r\n\r\n    // Sauvegarder une nouvelle carte\r\n    async saveCard(cardData: Omit<SavedBusinessCard, ": "forms.unfournisseurasyncge3",
  "un fournisseur spécifique\r\n   * (pour la gestion côté fournisseur)\r\n   */\r\n  getSupplierProducts(supplierId?: string): Product[] {\r\n    const allProducts = this.getAllProducts();\r\n\r\n    // Si pas de supplierId spécifié, retourner tous les produits pour la démo\r\n    if (!supplierId) {\r\n      return allProducts;\r\n    }\r\n\r\n    // Filtrer par supplierId si disponible dans les données\r\n    return allProducts.filter(product =>\r\n      (product as any).supplierId === supplierId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtenir un produit par son ID (recherche dans tous les produits)\r\n   */\r\n  getProductById(id: string): Product | undefined {\r\n    const allProducts = this.getAllProducts();\r\n    return allProducts.find(product => product.id === id);\r\n  }\r\n\r\n  /**\r\n   * Réinitialiser aux produits par défaut\r\n   */\r\n  resetToDefault(): void {\r\n    this.saveProducts(initialProducts);\r\n  }\r\n\r\n  /**\r\n   * Synchroniser les données des fournisseurs avec la base globale\r\n   */\r\n  syncSupplierProducts(supplierProducts: Product[]): void {\r\n    const allProducts = this.getAllProducts();\r\n\r\n    // Récupérer les IDs des produits du fournisseur\r\n    const supplierProductIds = supplierProducts.map(p => p.id);\r\n\r\n    ": "navigation.unfournisseurspecifi",
  "un nouveau compte admin:": "admin.unnouveaucompteadmin",
  "un nouvel utilisateur (sans déconnexion admin):": "auth.unnouvelutilisateurs",
  "un utilisateur Firebase Auth est synchronisé dans Firestore\r\n     *": "admin.unutilisateurfirebas",
  "un utilisateur Firebase Auth est synchronisé dans Firestore\r\n     */\r\n    private async ensureUserSyncInFirestore(firebaseUser: FirebaseUser): Promise<void> {\r\n        try {\r\n            const userDocRef = doc(db, ": "admin.unutilisateurfirebas1",
  "un écran AMOLED HD de 1.4 pouces, elle offre une clarté exceptionnelle même en plein soleil. Le système GPS intégré permet un suivi précis de vos activités sportives, tandis que le capteur de fréquence cardiaque surveille votre santé 24h": "common.unecranamoledhdde14p",
  "un écran AMOLED HD de 1.4 pouces, elle offre une clarté exceptionnelle même en plein soleil. Le système GPS intégré permet un suivi précis de vos activités sportives, tandis que le capteur de fréquence cardiaque surveille votre santé 24h/24.\r\n\r\nAvec une autonomie exceptionnelle de 7 jours en utilisation normale et une certification d": "forms.unecranamoledhdde14p",
  "un écran Dynamic AMOLED 2X de 6.1 pouces, ce smartphone offre une expérience visuelle immersive avec des couleurs vives et des détails nets.": "forms.unecrandynamicamoled1",
  "une mise à jour de nos conditions générales de vente qui entrera en vigueur le 1er février 2024.": "common.unemiseajourdenoscon2",
  "une qualité sonore premium et d\\": "common.unequalitesonoreprem1",
  "une requête API\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      onReserve(container.id, quantity, estimatedPrice);\r\n      handleClose();\r\n    } catch (err) {\r\n      setError(": "ecommerce.unerequeteapiawaitne",
  "unités": "common.unites1",
  "upload\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n      // Ajouter les nouveaux documents à la liste\r\n      const newDocuments = files.map((file, index) => ({\r\n        id: `new-${Date.now()}-${index}`,\r\n        name: file.name,\r\n        type: metadata.type,\r\n        size: formatFileSize(file.size),\r\n        uploadDate: new Date().toISOString().split(": "forms.uploadawaitnewpromis",
  "upload\r\n  private mockMode = true; // Activer le mode simulation\r\n\r\n  /**\r\n   * Upload un seul fichier\r\n   */\r\n  async uploadFile(\r\n    file: File, \r\n    options: UploadOptions = {},\r\n    onProgress?: (progress: number) => void\r\n  ): Promise<UploadResult> {\r\n    try {\r\n      // Validation du fichier\r\n      const validation = this.validateFile(file, options);\r\n      if (!validation.valid) {\r\n        return { success: false, error: validation.error };\r\n      }\r\n\r\n      if (this.mockMode) {\r\n        return this.simulateUpload(file, options, onProgress);\r\n      }\r\n\r\n      // Upload réel avec FormData\r\n      const formData = new FormData();\r\n      formData.append(": "common.uploadprivatemockmod1",
  "upload pour les tests\r\n   */\r\n  private simulateUpload(\r\n    file: File,\r\n    options: UploadOptions,\r\n    onProgress?: (progress: number) => void\r\n  ): Promise<UploadResult> {\r\n    return new Promise((resolve) => {\r\n      let progress = 0;\r\n      const interval = setInterval(() => {\r\n        progress += Math.random() * 25;\r\n        if (progress >= 100) {\r\n          progress = 100;\r\n          clearInterval(interval);\r\n          \r\n          // Pour les images, créer un data URL pour l": "common.uploadpourlestestspr1",
  "urgence\r\n        emergencyLogout();\r\n    };\r\n\r\n    if (!user) return null;\r\n\r\n    return (\r\n        <div className=\"fixed bottom-4 right-4 z-50\">\r\n            <div className=\"flex flex-col gap-2\">\r\n                <button\r\n                    onClick={handleQuickLogout}\r\n                    onDoubleClick={handleDoubleClick}\r\n                    className=\"bg-red-500 hover:bg-red-600 text-white p-3 rounded-full shadow-lg transition-all duration-300 transform hover:scale-110 flex items-center gap-2\"\r\n                    title=\"Clic: déconnexion normale | Double-clic: déconnexion d": "auth.urgenceemergencylogo",
  "useAuth doit être utilisé dans un AuthProvider": "common.useauthdoitetreutili3",
  "usine\",\n    \"product.modal.category\": \"Catégorie\",\n    \"product.modal.selectCategory\": \"Sélectionnez une catégorie\",\n    \"product.modal.minOrder\": \"Commande minimum\",\n    \"product.modal.minOrderPlaceholder\": \"Quantité minimum de commande\",\n    \"product.modal.stockAvailable\": \"Stock disponible\",\n    \"product.modal.tags\": \"Tags\",\n    \"product.modal.addTag\": \"Ajouter un tag...\",\n    \"product.modal.specifications\": \"Spécifications techniques\",\n    \"product.modal.brand\": \"Marque\",\n    \"product.modal.brandPlaceholder\": \"Ex. Apple, Samsung...\",\n    \"product.modal.origin\": \"Origine\",\n    \"product.modal.originPlaceholder\": \"Ex. Chine, France...\",\n    \"product.modal.material\": \"Matériau\",\n    \"product.modal.materialPlaceholder\": \"Ex. Plastique, Métal...\",\n    \"product.modal.modelNumber\": \"Numéro de modèle\",\n    \"product.modal.modelNumberPlaceholder\": \"Ex. iPHB-128\",\n    \"product.modal.images\": \"Images du produit\",\n    \"product.modal.dropImages\": \"Déposez vos images ici\",\n    \"product.modal.selectImages\": \"ou cliquez pour sélectionner des images\",\n    \"product.modal.supportedFormats\": \"Formats acceptés: JPG, JPEG, PNG, GIF | Taille max: 5MB par image\",\n    \"product.modal.maxImages\": \"Vous pouvez ajouter jusqu": "forms.usineproductmodalcat",
  "usure quotidienne. Les multiples compartiments organisent efficacement vos affaires : documents, câbles, power bank, et accessoires.\r\n\r\nParfait pour les voyages d": "common.usurequotidiennelesm",
  "utilisateur\r\n     */\r\n    async createUserWithoutDisconnect(userData: CreateUserData): Promise<{\r\n        success: boolean;\r\n        user?: AdminUser;\r\n        error?: string;\r\n        warning?: string;\r\n    }> {\r\n        // Déléguer au service spécialisé qui évite la déconnexion\r\n        return adminUserCreationServiceFixed.createUser(userData);\r\n    }\r\n\r\n    /**\r\n     * Récupérer tous les utilisateurs (de Firestore + utilisateurs connectés récemment)\r\n     *": "auth.utilisateurasynccrea",
  "utilisateur\r\n   * @param role - Le rôle de l": "admin.utilisateurparamrole1",
  "utilisateur\r\n   * @returns Le rôle déterminé\r\n   */\r\n  static determineUserRole(email: string): UserRole {\r\n    const normalizedEmail = email.toLowerCase().trim();\r\n\r\n    // Vérifier si c": "auth.utilisateurreturnsle1",
  "utilisateur AVEC Firebase Auth SANS déconnexion admin\r\n * \r\n * Cette solution utilise une instance Firebase séparée pour créer l": "auth.utilisateuravecfireb2",
  "utilisateur actuel\r\n     */\r\n    public getCurrentUser(): User | null {\r\n        return this.currentUser;\r\n    }\r\n\r\n    /**\r\n     * Vérifier si l": "admin.utilisateuractuelpub1",
  "utilisateur actuellement connecté\r\n     *": "admin.utilisateuractuellem",
  "utilisateur actuellement connecté\r\n     * Pour synchroniser TOUS les utilisateurs Firebase Auth, il faut utiliser Firebase Admin SDK côté serveur\r\n     *": "admin.utilisateuractuellem2",
  "utilisateur actuellement connecté\r\n     * Pour synchroniser TOUS les utilisateurs Firebase Auth, il faut utiliser Firebase Admin SDK côté serveur\r\n     */\r\n    async syncAllVisibleUsers(): Promise<{ success: boolean; count: number; error?: string }> {\r\n        try {\r\n            console.log(": "admin.utilisateuractuellem3",
  "utilisateur actuellement connecté\r\n     */\r\n    private async checkCurrentUser() {\r\n        console.log(": "admin.utilisateuractuellem4",
  "utilisateur actuellement connecté s": "admin.utilisateuractuellem6",
  "utilisateur admin@chinetonusine.com\r\n *": "admin.utilisateuradminchin",
  "utilisateur après inscription\r\n                const loginResult = await secureAuthService.secureLogin(email, password);\r\n                if (loginResult.success && loginResult.user) {\r\n                    setUser(loginResult.user);\r\n                }\r\n\r\n                return { user: result.user };\r\n            } else {\r\n                console.log(`❌ Inscription échouée: ${result.error}`);\r\n                return { user: null, error: result.error };\r\n            }\r\n\r\n        } catch (error: any) {\r\n            console.error(": "auth.utilisateurapresinsc",
  "utilisateur avec Firebase Auth COMPLET\r\n * qui PRÉSERVE la session admin\r\n */\r\nclass AdminUserCreationWithAuthService {\r\n    private collectionName = ": "forms.utilisateuravecfireb",
  "utilisateur connecté\r\n        // En production, cela ferait appel à votre API d": "admin.utilisateurconnectee1",
  "utilisateur connecté\r\n        await this.checkCurrentUser();\r\n\r\n        // 2. Vérifier l": "admin.utilisateurconnectea1",
  "utilisateur connecté\r\nexport interface CurrentUser {\r\n    id: string;\r\n    name: string;\r\n    email: string;\r\n    type: ": "auth.utilisateurconnectee1",
  "utilisateur connecté est dans Firestore\r\n     */\r\n    private async ensureCurrentUserInFirestore(): Promise<void> {\r\n        const currentUser = auth.currentUser;\r\n        if (!currentUser) return;\r\n\r\n        try {\r\n            // Vérifier si l": "admin.utilisateurconnectee3",
  "utilisateur connecté peut être synchronisé côté client\r\n            await this.ensureCurrentUserInFirestore();\r\n\r\n            return {\r\n                success: true,\r\n                count: 1,\r\n            };\r\n\r\n        } catch (error: any) {\r\n            console.error(": "admin.utilisateurconnectep1",
  "utilisateur connecté...": "admin.utilisateurconnecte",
  "utilisateur connecté:": "admin.utilisateurconnecte4",
  "utilisateur dans Firestore\r\n * avec toutes les informations nécessaires pour votre application\r\n *": "admin.utilisateurdansfires1",
  "utilisateur dans Firestore\r\n * avec toutes les informations nécessaires pour votre application\r\n */\r\n\r\nimport { doc, setDoc, collection, query, where, getDocs } from ": "admin.utilisateurdansfires2",
  "utilisateur dans le localStorage pour la démo\n      localStorage.setItem(": "admin.utilisateurdansleloc3",
  "utilisateur doit être créé ou synchronisé": "admin.utilisateurdoitetrec1",
  "utilisateur existe\r\n      if (result.user) {\r\n        await firebaseAuthService.signOut(); // Se déconnecter immédiatement\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      ": "admin.utilisateurexisteifr",
  "utilisateur existe\r\n      if (result.user) {\r\n        await firebaseAuthService.signOut(); // Se déconnecter immédiatement\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      // Si erreur de mot de passe incorrect, l": "auth.utilisateurexisteifr",
  "utilisateur existe déjà dans Firestore\r\n            const userDocRef = doc(db, ": "admin.utilisateurexistedej1",
  "utilisateur existe déjà dans Firestore ou le créer\n      const userDocRef = doc(db, ": "admin.utilisateurexistedej2",
  "utilisateur existe peut-être déjà\r\n          if (result.error.includes(": "admin.utilisateurexistepeu1",
  "utilisateur fournisseur connecté\r\n            const mockUser: CurrentUser = {\r\n                id: ": "admin.utilisateurfournisse1",
  "utilisateur non trouvé, il n": "admin.utilisateurnontrouve3",
  "utilisateur reste connecté malgré la déconnexion\r\nexport const emergencyLogout = () => {\r\n    if (window.confirm(": "auth.utilisateurresteconn",
  "utilisateur sans profil\r\n                return {\r\n                    success: false,\r\n                    error: ": "admin.utilisateursansprofi",
  "utilisateur temporaire\r\n\r\nCe service crée des utilisateurs SEULEMENT dans Firestore pour éviter\r\nla déconnexion de l": "auth.utilisateurtemporair2",
  "utilisateurs\r\n     * Cette méthode surveille les changements d": "admin.utilisateurscettemet2",
  "utilisateurs\r\n     */\r\n    private initializeSecondaryApp() {\r\n        if (!this.secondaryApp) {\r\n            // Créer une instance séparée avec un nom unique\r\n            this.secondaryApp = initializeApp(firebaseConfig, `userCreationApp_${Date.now()}`);\r\n            this.secondaryAuth = getAuth(this.secondaryApp);\r\n            this.secondaryDb = getFirestore(this.secondaryApp);\r\n\r\n            console.log(": "forms.utilisateursprivatei",
  "utilisateurs\r\nexport interface CreateUserData {\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  role: UserRole;\r\n  isActive?: boolean;\r\n}\r\n\r\nexport interface User {\r\n  uid?: string; ": "auth.utilisateursexportin",
  "utilisateurs SANS mise à jour\r\n * \r\n * Ce service récupère les utilisateurs SANS déclencher de mise à jour\r\n * de l": "admin.utilisateurssansmise2",
  "utilisateurs de test...": "admin.utilisateursdetest2",
  "utilisation et notre politique de confidentialité.": "common.utilisationetnotrepo",
  "utilisation et notre politique de confidentialité.\",\n    \"termsOfUse\": \"conditions d": "common.utilisationetnotrepo1",
  "utilisation</p>\r\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400\">Partager les données d": "forms.utilisationppclassna",
  "utilise PAS createUserWithEmailAndPassword pour éviter la déconnexion\r\n     *": "auth.utilisepascreateuser",
  "utilise QUE Firestore\r\n * Évite les erreurs Auth et les déconnexions automatiques\r\n */\r\nclass SafeInitializationService {\r\n    private isInitialized = false;\r\n\r\n    /**\r\n     * Initialise les utilisateurs de test SEULEMENT dans Firestore\r\n     * (pas dans Firebase Auth pour éviter les déconnexions)\r\n     *": "auth.utilisequefirestoree",
  "utilise cette crème depuis 3 semaines et je vois déjà des résultats. Ma peau est plus hydratée et plus ferme.": "common.utilisecettecremedep1",
  "y aura AUCUN appel à Firebase Auth\r\n *": "common.yauraaucunappelafire",
  "y aura AUCUN appel à Firebase Auth\r\n */\r\n\r\nimport { doc, setDoc } from ": "common.yauraaucunappelafire1",
  "}\n      `}\n    >\n      {isPopular && (\n        <div className=\"bg-blue-500 text-white text-center py-1 font-medium\">\n          Recommandé\n        </div>\n      )}\n      \n      {isCurrentPlan && (\n        <div className=\"bg-green-100 text-green-800 text-center py-1 font-medium\">\n          Votre forfait actuel\n        </div>\n      )}\n      \n      <div className=\"p-6\">\n        <h3 className=\"text-xl font-bold text-gray-900 dark:text-gray-100 mb-4\">{name}</h3>\n        \n        <div className=\"mb-6\">\n          <span className=\"text-4xl font-bold text-gray-900 dark:text-gray-100\">{currencySymbol}{price}</span>\n          {price > 0 && <span className=\"text-gray-500 ml-2\">/mois</span>}\n        </div>\n        \n        <ul className=\"space-y-3 mb-8\">\n          {features.map((feature, index) => (\n            <li key={index} className=\"flex items-start\">\n              <Check className=\"h-5 w-5 text-green-500 mr-2 flex-shrink-0\" />\n              <span className=\"text-gray-600 text-sm\">{feature}</span>\n            </li>\n          ))}\n        </ul>\n        \n        <Button\n          onClick={() => onSelectPlan(id)}\n          variant={isCurrentPlan ? ": "forms.ispopulardivclassnam",
  "}\r\n\r\n🎯 Connexion:\r\n1. Allez sur ": "auth.connexion1allezsur",
  "}\r\n\r\n🎯 Prochaines étapes:\r\n1. Déconnectez-vous de votre session actuelle\r\n2. Connectez-vous avec ces identifiants\r\n3. Vous devriez être redirigé vers ": "common.prochainesetapes1dec",
  "}\r\n\r\n🎯 Prochaines étapes:\r\n1. Déconnectez-vous de votre session actuelle\r\n2. Connectez-vous avec ces identifiants\r\n3. Vous devriez être redirigé vers /admin/dashboard`);\r\n            } else {\r\n                setResults(`❌ Erreur: ${result.message}`);\r\n            }\r\n        } catch (error: any) {\r\n            setResults(`💥 Exception: ${error.message}`);\r\n        } finally {\r\n            setIsCreating(false);\r\n        }\r\n    };\r\n\r\n    const createDefaultAdmin = async () => {\r\n        setIsCreating(true);\r\n        setResults(": "admin.prochainesetapes1dec",
  "}\r\n                                                onChange={(e) => updateCardData({ backgroundImage: e.target.value })}\r\n                                                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white mb-2\"\r\n                                            />\r\n                                            <button className=\"flex items-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\">\r\n                                                <Upload className=\"h-4 w-4\" />\r\n                                                <span>Télécharger une image</span>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Footer */}\r\n                    <div className=\"p-6 border-t border-gray-200 dark:border-gray-700\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                            <div className=\"flex items-center space-x-3\">\r\n                                <button\r\n                                    onClick={() => setPreviewMode(!previewMode)}\r\n                                    className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-colors ${previewMode\r\n                                            ? ": "navigation.onchangeeupdatecardd",
  "}\r\n                                            </span>\r\n                                        </td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                                            <div className=\"flex items-center justify-end gap-2\">\r\n                                                <button\r\n                                                    onClick={() => downloadBackup(backup)}\r\n                                                    className=\"text-blue-600 hover:text-blue-900\"\r\n                                                    title=\"Télécharger\"\r\n                                                >\r\n                                                    <Download className=\"w-4 h-4\" />\r\n                                                </button>\r\n                                                <button\r\n                                                    onClick={() => deleteBackup(backup.id)}\r\n                                                    className=\"text-red-600 hover:text-red-900\"\r\n                                                    title=\"Supprimer\"\r\n                                                >\r\n                                                    <Trash2 className=\"w-4 h-4\" />\r\n                                                </button>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* État des tables */}\r\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\r\n                    <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\r\n                        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                            État des Tables\r\n                        </h2>\r\n                    </div>\r\n\r\n                    <div className=\"overflow-x-auto\">\r\n                        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n                            <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n                                <tr>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Table\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Enregistrements\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Taille\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Dernière mise à jour\r\n                                    </th>\r\n                                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                                        Statut\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                                {tables.map((table) => (\r\n                                    <tr key={table.name} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\r\n                                            {table.name}\r\n                                        </td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                                            {table.records.toLocaleString()}\r\n                                        </td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                                            {table.size}\r\n                                        </td>\r\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\r\n                                            {table.lastUpdated.toLocaleString(": "navigation.spantdtdclassnamepx6",
  "}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Description détaillée *": "common.buttondivdivdivdivde",
  "}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Description détaillée */}\r\n                <div className=\"mt-16 bg-white dark:bg-gray-800 rounded-2xl p-8 border border-gray-200 dark:border-gray-700\">\r\n                    <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">\r\n                        Description détaillée\r\n                    </h2>\r\n                    <div className=\"prose dark:prose-invert max-w-none\">\r\n                        {product.longDescription.split(": "forms.buttondivdivdivdivde",
  "}\r\n                            </button>\r\n\r\n                            <div className=\"grid grid-cols-2 gap-3\">\r\n                                <button\r\n                                    onClick={() => setShowContactForm(true)}\r\n                                    className=\"bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-3 rounded-xl font-semibold border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 transition-all duration-300 flex items-center justify-center gap-2\"\r\n                                >\r\n                                    <MessageCircle size={18} />\r\n                                    Contacter\r\n                                </button>\r\n\r\n                                <button\r\n                                    onClick={() => {\r\n                                        toggleFavorite(product.id!);\r\n                                        const isFav = isFavorite(product.id!);\r\n                                        showToast(\r\n                                            isFav ? `${product.name} retiré des favoris` : `${product.name} ajouté aux favoris`,\r\n                                            ": "forms.buttondivclassnamegr",
  "}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {showCreateForm && (\r\n                        <div className=\"p-6\">\r\n                            <form onSubmit={handleCreateUser} className=\"space-y-4\">\r\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                                            Email *\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"email\"\r\n                                            required\r\n                                            value={newUser.email}\r\n                                            onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                                            placeholder=\"utilisateur@exemple.com\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                                            Mot de passe *\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            required\r\n                                            value={newUser.password}\r\n                                            onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                                            placeholder=\"Minimum 8 caractères\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                                            Nom complet *\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            required\r\n                                            value={newUser.name}\r\n                                            onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                                            placeholder=\"Nom Prénom\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                                            Rôle *\r\n                                        </label>\r\n                                        <select\r\n                                            value={newUser.role}\r\n                                            onChange={(e) => setNewUser({ ...newUser, role: e.target.value as any })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                                        >\r\n                                            <option value=\"customer\">Client</option>\r\n                                            <option value=\"supplier\">Fournisseur</option>\r\n                                            <option value=\"admin\">Administrateur</option>\r\n                                            <option value=\"sourcer\">Sourceur</option>\r\n                                            <option value=\"influencer\">Influenceur</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                                            Entreprise\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={newUser.company}\r\n                                            onChange={(e) => setNewUser({ ...newUser, company: e.target.value })}\r\n                                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                                            placeholder=\"Nom de l": "auth.buttondivdivshowcrea",
  "}\r\n                    </span>\r\n                  </div>\r\n\r\n                  {/* Contact Info *": "common.spandivcontactinfo",
  "}\r\n                    </span>\r\n                  </div>\r\n\r\n                  {/* Contact Info */}\r\n                  <div className=\"space-y-2 mb-4\">\r\n                    <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400\">\r\n                      <Mail size={14} className=\"mr-2\" />\r\n                      {customer.email}\r\n                    </div>\r\n                    {customer.phone && (\r\n                      <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400\">\r\n                        <Phone size={14} className=\"mr-2\" />\r\n                        {customer.phone}\r\n                      </div>\r\n                    )}\r\n                    <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400\">\r\n                      <MapPin size={14} className=\"mr-2\" />\r\n                      {customer.location}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Stats */}\r\n                  <div className=\"grid grid-cols-2 gap-4 mb-4\">\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">{customer.totalOrders}</p>\r\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">Commandes</p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                        {formatPrice(customer.totalSpent)}\r\n                      </p>\r\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">Total dépensé</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Footer */}\r\n                  <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\r\n                    <div className=\"flex items-center justify-between mb-3\">\r\n                      <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <Calendar size={12} />\r\n                          Client depuis {formatDate(customer.joinedDate)}\r\n                        </div>\r\n                        {customer.lastOrderDate && (\r\n                          <div className=\"flex items-center gap-1 mt-1\">\r\n                            <ShoppingBag size={12} />\r\n                            Dernière commande: {formatDate(customer.lastOrderDate)}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Button\r\n                        onClick={() => console.log(": "auth.spandivcontactinfodi",
  "}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center space-x-2\">\r\n            <button\r\n              onClick={handleRefresh}\r\n              disabled={loading}\r\n              className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg transition-colors\"\r\n              title=\"Rafraîchir\"\r\n            >\r\n              <RotateCcw className={`h-4 w-4 ${loading ? ": "forms.pdivdivdivclassnamef1",
  "}\r\n            </Button>\r\n            {users.length === 0 && (\r\n              <Button\r\n                onClick={handleCreateTestUsers}\r\n                variant=\"outline\"\r\n                className=\"flex items-center gap-2\"\r\n                disabled={loading}\r\n              >\r\n                <Users size={16} />\r\n                Créer des utilisateurs de test\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Users className=\"h-8 w-8 text-blue-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">{userStats.total}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Shield className=\"h-8 w-8 text-red-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Admins</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {userStats.byRole.admin}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Users className=\"h-8 w-8 text-orange-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Fournisseurs</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {userStats.byRole.supplier}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Eye className=\"h-8 w-8 text-blue-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Clients</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {userStats.byRole.customer}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n            <div className=\"flex items-center\">\r\n              <Activity className=\"h-8 w-8 text-green-500\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Actifs</p>\r\n                <p className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n                  {userStats.active}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>        {/* Filters */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Rechercher par nom ou email...\"\r\n                  value={searchTerm}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\r\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white placeholder-gray-600 dark:placeholder-gray-400\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"w-full sm:w-48\">\r\n              <select\r\n                value={roleFilter}\r\n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setRoleFilter(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\r\n              >\r\n                <option value=\"\">Tous les rôles</option>\r\n                <option value=\"admin\">Admin</option>\r\n                <option value=\"supplier\">Fournisseur</option>\r\n                <option value=\"customer\">Client</option>\r\n                <option value=\"sourcer\">Sourcer</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Users Table */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden\">\r\n          {loading ? (\r\n            <div className=\"p-8 text-center\">\r\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto\"></div>\r\n              <p className=\"mt-2 text-gray-500 dark:text-gray-400\">Chargement...</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n                <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n                  <tr>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Utilisateur\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Rôle\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Statut\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Dernière connexion\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Date création\r\n                    </th>\r\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\r\n                      Actions\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                  {filteredUsers.map((user) => (\r\n                    <tr key={user.uid} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <div className=\"flex items-center\">\r\n                          <div className=\"h-10 w-10 rounded-full bg-gradient-to-r from-red-400 to-red-600 flex items-center justify-center\">\r\n                            <span className=\"text-white font-medium text-sm\">\r\n                              {user.name.charAt(0).toUpperCase()}\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"ml-4\">\r\n                            <div className=\"text-sm font-medium text-gray-900 dark:text-white\">{user.name}</div>\r\n                            <div className=\"text-sm text-gray-500 dark:text-gray-400 flex items-center gap-1\">\r\n                              <Mail size={12} />\r\n                              {user.email}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <span className={`inline-flex items-center gap-1 px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleColor(user.role)}`}>\r\n                          {getRoleIcon(user.role)}\r\n                          {user.role}\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${user.isActive\r\n                          ? ": "auth.buttonuserslength0bu",
  "}\r\n            </h3>\r\n            \r\n            <form onSubmit={handleSubmitForm} className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Nom du conteneur\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={formData.name}\r\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                    required\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Lieu de départ\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={formData.departureLocation}\r\n                    onChange={(e) => setFormData({ ...formData, departureLocation: e.target.value })}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white\"\r\n                    required\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Lieu d": "forms.h3formonsubmithandle",
  "}\r\n      />\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <AdminLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n              Gestion des Fournisseurs\r\n            </h1>\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Gérez tous les fournisseurs de la plateforme\r\n            </p>\r\n          </div>\r\n          <Button onClick={() => console.log(": "forms.returnadminlayoutdiv",
  "} \r\n          alt={productName} \r\n          className=\"absolute inset-0 w-full h-full object-cover transform hover:scale-105 transition-transform duration-300\"\r\n        />\r\n        \r\n        {/* Badges */}\r\n        <div className=\"absolute top-2 left-2 flex flex-col gap-1\">\r\n          {product.isNew && (\r\n            <span className=\"bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full\">\r\n              NOUVEAU\r\n            </span>\r\n          )}\r\n          {product.isPopular && (\r\n            <span className=\"bg-orange-500 text-white text-xs font-bold px-2 py-1 rounded-full\">\r\n              POPULAIRE\r\n            </span>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"absolute top-2 right-2 flex flex-col gap-1\">\r\n          {product.certifiedCE && (\r\n            <span className=\"bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded-full\">\r\n              CE\r\n            </span>\r\n          )}\r\n          {product.discount && product.discount > 0 && (\r\n            <span className=\"bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full\">\r\n              -{product.discount}%\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"p-4\">\r\n        <div className=\"flex flex-col h-full\">\r\n          {/* Marque */}\r\n          {product.brand && (\r\n            <div className=\"text-xs text-gray-500 dark:text-gray-400 font-medium mb-1\">\r\n              {product.brand}\r\n            </div>\r\n          )}\r\n          \r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors font-display\">\r\n            {productName}\r\n          </h3>\r\n          \r\n          <p className=\"text-sm text-gray-600 mb-3 line-clamp-2 flex-grow font-reading text-readable\">\r\n            {productDescription}\r\n          </p>\r\n          \r\n          {/* Fonctionnalités principales */}\r\n          {product.featured && product.featured.length > 0 && (\r\n            <div className=\"mb-3\">\r\n              <div className=\"flex flex-wrap gap-1\">\r\n                {product.featured.slice(0, 3).map((feature, index) => (\r\n                  <span \r\n                    key={index}\r\n                    className=\"text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 px-2 py-1 rounded-full\"\r\n                  >\r\n                    {feature}\r\n                  </span>\r\n                ))}\r\n                {product.featured.length > 3 && (\r\n                  <span className=\"text-xs text-gray-500\">\r\n                    +{product.featured.length - 3}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex items-center justify-between text-sm text-gray-500\">\r\n              <span>MOQ: {product.moq} unités</span>\r\n              <span className=\"px-2 py-1 bg-gray-100 rounded-full text-xs\">\r\n                {product.category}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className=\"border-t pt-2 mt-2\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <div className=\"text-xs text-gray-500 font-reading\">\r\n                    {formatPrice(unitPriceConverted, currency)}/unité\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {product.discount && product.discount > 0 ? (\r\n                      <>\r\n                        <div className=\"text-lg font-bold text-red-600 font-display\">\r\n                          {formatPrice(discountedPrice, currency)}\r\n                        </div>\r\n                        <div className=\"text-sm line-through text-gray-400 font-display\">\r\n                          {formatPrice(priceConverted, currency)}\r\n                        </div>\r\n                      </>\r\n                    ) : (\r\n                      <div className=\"text-lg font-bold text-blue-700 font-display\">\r\n                        {formatPrice(priceConverted, currency)}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-500 font-reading\">\r\n                    pour {product.moq} unités\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"text-xs text-gray-500 mb-1 font-reading\">\r\n                    Fournisseur\r\n                  </div>\r\n                  <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100 font-display\">\r\n                    {product.supplier.name}\r\n                  </div>\r\n                  <div className=\"flex items-center mt-1\">\r\n                    <div className=\"flex text-yellow-400 text-xs\">\r\n                      {": "forms.altproductnameclassn",
  "} \r\n          alt={productName} \r\n          className=\"absolute inset-0 w-full h-full object-cover transform hover:scale-105 transition-transform duration-300\"\r\n        />\r\n        {product.certifiedCE && (\r\n          <span className=\"absolute top-2 right-2 bg-green-500 text-white text-xs font-bold px-2 py-1 rounded-full\">\r\n            CE\r\n          </span>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"p-4\">\r\n        <div className=\"flex flex-col h-full\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors\">\r\n            {productName}\r\n          </h3>\r\n          \r\n          <p className=\"text-sm text-gray-600 mb-3 line-clamp-2 flex-grow\">\r\n            {productDescription}\r\n          </p>\r\n          \r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex items-center justify-between text-sm text-gray-500\">\r\n              <span>MOQ: {product.moq} unités</span>\r\n              <span className=\"px-2 py-1 bg-gray-100 rounded-full text-xs\">\r\n                {product.category}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className=\"border-t pt-2 mt-2\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <div className=\"text-xs text-gray-500\">\r\n                    {formatPrice(unitPriceConverted, currency)}/unité\r\n                  </div>\r\n                  <div className=\"text-lg font-bold text-blue-700\">\r\n                    {formatPrice(priceConverted, currency)}\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-500\">\r\n                    pour {product.moq} unités\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"text-xs text-gray-500 mb-1\">\r\n                    Fournisseur\r\n                  </div>\r\n                  <div className=\"text-sm font-medium text-gray-900\">\r\n                    {product.supplier.name}\r\n                  </div>\r\n                  <div className=\"flex items-center mt-1\">\r\n                    <div className=\"flex text-yellow-400 text-xs\">\r\n                      {": "forms.altproductnameclassn1",
  "} />\r\n                                        </button>\r\n\r\n                                        <button\r\n                                            onClick={() => openQuickView(product)}\r\n                                            className=\"p-2 bg-white text-gray-600 rounded-full hover:bg-blue-50 hover:text-blue-500 transition-all duration-300\"\r\n                                        >\r\n                                            <Eye size={18} />\r\n                                        </button>\r\n                                    </div>\r\n\r\n                                    {/* Badge de réduction */}\r\n                                    {hasDiscount && (\r\n                                        <div className=\"absolute top-4 left-4 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-semibold\">\r\n                                            -{product.discount!.percentage}%\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {/* Badge vérifié */}\r\n                                    {product.supplier.verified && (\r\n                                        <div className=\"absolute bottom-4 left-4 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold flex items-center gap-1\">\r\n                                            <Shield size={12} />\r\n                                            Vérifié\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                {/* Contenu de la carte */}\r\n                                <div className=\"p-6\">\r\n                                    {/* Titre et prix */}\r\n                                    <div className=\"mb-4\">\r\n                                        <Link\r\n                                            to={`/product/${product.id}`}\r\n                                            className=\"block hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\r\n                                        >\r\n                                            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2 hover:text-blue-600 dark:hover:text-blue-400 transition-colors\">\r\n                                                {product.name}\r\n                                            </h3>\r\n                                        </Link>\r\n\r\n                                        <div className=\"flex items-center justify-between\">\r\n                                            <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n                                                {product.price.toFixed(2)}€\r\n                                            </div>\r\n                                            <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                                                MOQ: {product.moq}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Informations fournisseur */}\r\n                                    <div className=\"mb-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                                        <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                                            {product.supplier.name}\r\n                                        </div>\r\n                                        <div className=\"flex items-center gap-2 mt-1\">\r\n                                            <MapPin size={12} className=\"text-gray-400\" />\r\n                                            <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                                                {product.supplier.location}\r\n                                            </span>\r\n                                            <div className=\"flex items-center gap-1 ml-auto\">\r\n                                                <Star size={12} className=\"text-yellow-400 fill-current\" />\r\n                                                <span className=\"text-xs text-gray-600 dark:text-gray-300\">\r\n                                                    {product.supplier.rating}\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Sélecteur de quantité */}\r\n                                    <div className=\"mb-4\">\r\n                                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                            Quantité\r\n                                        </label>\r\n                                        <div className=\"flex items-center gap-2\">\r\n                                            <button\r\n                                                onClick={() => updateQuantity(product.id!, Math.max(product.moq, quantity - 10))}\r\n                                                className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300\"\r\n                                            >\r\n                                                <Minus size={16} />\r\n                                            </button>\r\n\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                value={quantity}\r\n                                                onChange={(e) => updateQuantity(product.id!, Math.max(product.moq, Number(e.target.value)))}\r\n                                                min={product.moq}\r\n                                                className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-center focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white font-medium\"\r\n                                            />\r\n\r\n                                            <button\r\n                                                onClick={() => updateQuantity(product.id!, quantity + 10)}\r\n                                                className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300\"\r\n                                            >\r\n                                                <Plus size={16} />\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Prix total */}\r\n                                    <div className=\"mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\r\n                                        <div className=\"flex items-center justify-between\">\r\n                                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Total</span>\r\n                                            <div className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">\r\n                                                {total.toFixed(2)}€\r\n                                            </div>\r\n                                        </div>\r\n                                        {hasDiscount && (\r\n                                            <div className=\"text-xs text-green-600 dark:text-green-400 mt-1\">\r\n                                                Réduction de {product.discount!.percentage}% appliquée\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    {/* Boutons d": "forms.buttonbuttononclicko1",
  "} />\r\n                                        </button>\r\n\r\n                                        <button\r\n                                            onClick={() => openQuickView(product)}\r\n                                            className=\"p-2 bg-white text-gray-600 rounded-full hover:bg-blue-50 hover:text-blue-500 transition-all duration-300\"\r\n                                        >\r\n                                            <Eye size={18} />\r\n                                        </button>\r\n                                    </div>\r\n\r\n                                    {/* Badge de réduction */}\r\n                                    {hasDiscount && (\r\n                                        <div className=\"absolute top-4 left-4 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-semibold\">\r\n                                            -{product.discount!.percentage}%\r\n                                        </div>\r\n                                    )}\r\n\r\n                                    {/* Badge vérifié */}\r\n                                    {product.supplier.verified && (\r\n                                        <div className=\"absolute bottom-4 left-4 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold flex items-center gap-1\">\r\n                                            <Shield size={12} />\r\n                                            Vérifié\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                {/* Contenu de la carte */}\r\n                                <div className=\"p-6\">\r\n                                    {/* Titre et prix */}\r\n                                    <div className=\"mb-4\">\r\n                                        <Link\r\n                                            to={`/product/${product.id}`}\r\n                                            className=\"block hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\r\n                                        >\r\n                                            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2 hover:text-blue-600 dark:hover:text-blue-400 transition-colors\">\r\n                                                {product.name}\r\n                                            </h3>\r\n                                        </Link>\r\n\r\n                                        <div className=\"flex items-center justify-between\">\r\n                                            <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n                                                {product.price.toFixed(2)}€\r\n                                            </div>\r\n                                            <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                                                MOQ: {product.moq}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Informations fournisseur */}\r\n                                    <div className=\"mb-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n                                        <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n                                            {product.supplier.name}\r\n                                        </div>\r\n                                        <div className=\"flex items-center gap-2 mt-1\">\r\n                                            <MapPin size={12} className=\"text-gray-400\" />\r\n                                            <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                                                {product.supplier.location}\r\n                                            </span>\r\n                                            <div className=\"flex items-center gap-1 ml-auto\">\r\n                                                <Star size={12} className=\"text-yellow-400 fill-current\" />\r\n                                                <span className=\"text-xs text-gray-600 dark:text-gray-300\">\r\n                                                    {product.supplier.rating}\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Sélecteur de quantité */}\r\n                                    <div className=\"mb-4\">\r\n                                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                                            Quantité\r\n                                        </label>\r\n                                        <div className=\"flex items-center gap-2\">\r\n                                            <button\r\n                                                onClick={() => updateQuantity(product.id, Math.max(product.moq, quantity - 10))}\r\n                                                className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300\"\r\n                                            >\r\n                                                <Minus size={16} />\r\n                                            </button>\r\n\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                value={quantity}\r\n                                                onChange={(e) => updateQuantity(product.id, Math.max(product.moq, Number(e.target.value)))}\r\n                                                min={product.moq}\r\n                                                className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-center focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white font-medium\"\r\n                                            />\r\n\r\n                                            <button\r\n                                                onClick={() => updateQuantity(product.id, quantity + 10)}\r\n                                                className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300\"\r\n                                            >\r\n                                                <Plus size={16} />\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Prix total */}\r\n                                    <div className=\"mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\r\n                                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">Prix total</div>\r\n                                        <div className=\"text-xl font-bold text-blue-600 dark:text-blue-400\">\r\n                                            {total.toFixed(2)}€\r\n                                        </div>\r\n                                        {hasDiscount && (\r\n                                            <div className=\"text-xs text-green-600 dark:text-green-400\">\r\n                                                Réduction de {product.discount!.percentage}% appliquée\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    {/* Boutons d": "forms.buttonbuttononclicko2",
  "} block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 w-full text-left hover:bg-gray-100 dark:hover:bg-gray-600`}\n                    >\n                      {name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Notifications - Affiché uniquement pour les utilisateurs connectés *": "forms.blockpx4py2textsmtex7",
  "} block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 w-full text-left hover:bg-gray-100 dark:hover:bg-gray-600`}\n                    >\n                      {name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Notifications - Affiché uniquement pour les utilisateurs connectés */}\n            {user && (\n              <>\n                <div\n                  className=\"flex items-center space-x-2 text-white hover:text-orange-200 transition-colors cursor-pointer relative\"\n                  onClick={toggleNotificationCenter}\n                >\n                  <Bell className=\"h-5 w-5\" />\n                  {unreadCount > 0 && (\n                    <span className=\"bg-orange-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold animate-pulse absolute -top-2 -right-2\">\n                      {unreadCount > 99 ? ": "forms.blockpx4py2textsmtex8",
  "}`);\r\n        console.log(`   Email vérifié: ${currentUser.emailVerified}`);\r\n        console.log(`   Dernière connexion: ${currentUser.metadata.lastSignInTime}`);\r\n    }\r\n\r\n    ": "auth.consolelogemailverif",
  "}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-6 bg-white rounded-lg shadow-md\">\r\n            <h3 className=\"text-lg font-semibold mb-4\">Tests de débogage Firebase</h3>\r\n\r\n            <div className=\"flex gap-2 mb-4\">\r\n                <Button\r\n                    onClick={testFirebaseConnection}\r\n                    disabled={loading}\r\n                    variant=\"outline\"\r\n                >\r\n                    {loading ? ": "forms.finallysetloadingfal",
  "}`,\r\n                createdAccounts\r\n            };\r\n        } else {\r\n            return {\r\n                success: false,\r\n                message: `Aucun compte créé. Erreurs: ${errors.join(": "common.createdaccountselser1",
  "}`}\r\n                            />\r\n                        </div>\r\n                        {errors.email && (\r\n                            <p className=\"mt-1 text-sm text-red-600\">{errors.email}</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Role */}\r\n                    <div>\r\n                        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                            Rôle\r\n                        </label>\r\n                        <div className=\"relative\">\r\n                            <Shield className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 z-10\" size={16} />\r\n                            <Select\r\n                                value={formData.role}\r\n                                onChange={(e) => handleInputChange(": "auth.diverrorsemailpclass",
  "}`} />\r\n                                Actualiser\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Messages *": "common.actualiserbuttondivd",
  "}`} />\r\n                    Réinitialisation Complète\r\n                <": "common.reinitialisationcomp",
  "}`} />\r\n                    Réinitialisation Complète\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={handleCreateEssentials}\r\n                    disabled={isResetting || isDeleting || isCreating}\r\n                    className=\"flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white\"\r\n                >\r\n                    <Users className=\"h-4 w-4\" />\r\n                    Créer Comptes Essentiels\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={deleteAllUsers}\r\n                    disabled={isResetting || isDeleting || isCreating}\r\n                    className=\"flex items-center gap-2 bg-gray-500 hover:bg-gray-600 text-white\"\r\n                >\r\n                    <Trash2 className=\"h-4 w-4\" />\r\n                    Supprimer Tous\r\n                </Button>\r\n            </div>\r\n\r\n            {/* Avertissement */}\r\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-4 mb-6\">\r\n                <div className=\"flex items-start gap-3\">\r\n                    <AlertTriangle className=\"h-5 w-5 text-yellow-500 mt-0.5\" />\r\n                    <div>\r\n                        <h3 className=\"font-semibold text-yellow-800\">Attention</h3>\r\n                        <p className=\"text-yellow-700 text-sm\">\r\n                            La réinitialisation complète supprimera définitivement tous les utilisateurs existants\r\n                            et créera de nouveaux comptes avec des mots de passe par défaut.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Zone de résultats */}\r\n            {results && (\r\n                <div className=\"bg-gray-50 border rounded-md p-4 mb-6\">\r\n                    <h3 className=\"font-semibold text-gray-900 mb-2\">Résultats :</h3>\r\n                    <pre className=\"text-sm text-gray-700 whitespace-pre-wrap font-mono\">\r\n                        {results}\r\n                    </pre>\r\n                </div>\r\n            )}\r\n\r\n            {/* Affichage des comptes créés */}\r\n            {createdAccounts.length > 0 && (\r\n                <div className=\"bg-green-50 border border-green-200 rounded-md p-4\">\r\n                    <div className=\"flex items-start gap-3\">\r\n                        <CheckCircle className=\"h-5 w-5 text-green-500 mt-0.5\" />\r\n                        <div className=\"flex-1\">\r\n                            <h3 className=\"font-semibold text-green-800 mb-2\">\r\n                                Comptes créés ({createdAccounts.length})\r\n                            </h3>\r\n                            <div className=\"space-y-2\">\r\n                                {createdAccounts.map((account, index) => (\r\n                                    <div key={index} className=\"bg-white rounded p-3 border\">\r\n                                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-sm\">\r\n                                            <div>\r\n                                                <span className=\"font-semibold\">Email:</span>\r\n                                                <br />\r\n                                                {account.email}\r\n                                            </div>\r\n                                            <div>\r\n                                                <span className=\"font-semibold\">Mot de passe:</span>\r\n                                                <br />\r\n                                                <code className=\"bg-gray-100 px-1 rounded\">\r\n                                                    {account.password}\r\n                                                </code>\r\n                                            </div>\r\n                                            <div>\r\n                                                <span className=\"font-semibold\">Nom:</span>\r\n                                                <br />\r\n                                                {account.name}\r\n                                            </div>\r\n                                            <div>\r\n                                                <span className=\"font-semibold\">Rôle:</span>\r\n                                                <br />\r\n                                                <span className={`px-2 py-1 rounded text-xs ${account.role === ": "auth.reinitialisationcomp",
  "}`} />\r\n                    Système Complet\r\n                    <span className=": "forms.systemecompletspancl",
  "}`} />\r\n                    Système Complet\r\n                    <span className=\"text-xs bg-white/20 px-2 py-1 rounded-full\">Recommandé</span>\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={createAdminOnly}\r\n                    disabled={isRunning}\r\n                    className=\"flex items-center gap-3 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white py-3 px-6 rounded-lg font-semibold shadow-lg transform transition-all duration-200 hover:scale-105\"\r\n                >\r\n                    <Crown className=\"h-5 w-5\" />\r\n                    Admin Seulement\r\n                    <span className=\"text-xs bg-white/20 px-2 py-1 rounded-full\">Rapide</span>\r\n                </Button>\r\n            </div>\r\n\r\n            {/* Fonctionnalités */}\r\n            <div className=\"bg-white/70 rounded-lg p-4 mb-6\">\r\n                <h3 className=\"font-semibold text-gray-800 mb-3 flex items-center gap-2\">\r\n                    <Zap className=\"h-4 w-4 text-yellow-500\" />\r\n                    Le système complet configure automatiquement :\r\n                </h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                        <CheckCircle className=\"h-3 w-3 text-green-500\" />\r\n                        <span>2 comptes administrateur</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                        <CheckCircle className=\"h-3 w-3 text-green-500\" />\r\n                        <span>Compte fournisseur test</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                        <CheckCircle className=\"h-3 w-3 text-green-500\" />\r\n                        <span>Compte client test</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                        <CheckCircle className=\"h-3 w-3 text-green-500\" />\r\n                        <span>Synchronisation Firebase</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Zone de résultats */}\r\n            {results && (\r\n                <div className=\"bg-gray-900 text-green-400 rounded-lg p-4 mb-6 font-mono text-sm\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                        <RefreshCw className={`h-4 w-4 ${isRunning ? ": "forms.systemecompletspancl1",
  "}`}>\r\n                        {data.contactPerson}\r\n                    </h2>\r\n                    <p className={`opacity-80 ${getFontSize()}`}>\r\n                        {data.position}\r\n                    </p>\r\n                </div>\r\n\r\n                {/* Contact Info *": "forms.datacontactpersonh2p",
  "}`}>\r\n        {/* Footer compact - Style LinkedIn/GitHub */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-8 mb-8\">\r\n\r\n          {/* Colonne 1: Entreprise */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-white mb-4 font-display\">Chine ton usine</h4>\r\n            <ul className=\"space-y-2\">\r\n              <li><Link to=\"/about\" className=\"text-orange-100 dark:text-gray-300 hover:text-white transition-colors text-sm\">À propos</Link></li>\r\n              <li><Link to=\"/careers\" className=\"text-orange-100 dark:text-gray-300 hover:text-white transition-colors text-sm\">Carrières</Link></li>\r\n              <li><Link to=\"/news\" className=\"text-orange-100 dark:text-gray-300 hover:text-white transition-colors text-sm\">Actualités</Link></li>\r\n            </ul>\r\n          </div>\r\n\r\n          {/* Colonne 2: Services */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-white mb-4 font-display\">Solutions</h4>\r\n            <ul className=\"space-y-2\">\r\n              <li><Link to=\"/sourcing\" className=\"text-orange-100 dark:text-gray-300 hover:text-white transition-colors text-sm\">Sourcing</Link></li>\r\n              <li><Link to=\"/quality\" className=\"text-orange-100 dark:text-gray-300 hover:text-white transition-colors text-sm\">Qualité</Link></li>\r\n              <li><Link to=\"/logistics\" className=\"text-orange-100 dark:text-gray-300 hover:text-white transition-colors text-sm\">Logistique</Link></li>\r\n            </ul>\r\n          </div>\r\n\r\n          {/* Colonne 3: Ressources */}\r\n          <div>\r\n            <h4 className=\"text-lg font-semibold text-white mb-4 font-display\">Ressources</h4>\r\n            <ul className=\"space-y-2\">\r\n              <li><Link to=\"/help\" className=\"text-orange-100 dark:text-gray-300 hover:text-white transition-colors text-sm\">Centre d": "forms.footercompactstyleli",
  "}`}>\r\n      {/* Header avec barre de recherche *": "common.headeravecbarrederec1",
  "¡Tu preorden ha sido registrada con éxito!": "common.tupreordenhasidoregi1",
  "À l": "common.al",
  "À l'instant": "common.alinstant",
  "À l\\": "common.al2",
  "ÇA VA VOUS": "common.cavavous3",
  "Ça va vous plaire": "common.cavavousplaire7",
  "ÉDUCATIF & LUDIQUE": "common.educatifludique5",
  "ÉLECTRONIQUE": "common.electronique5",
  "ÉQUIPEMENT INDUSTRIEL": "common.equipementindustriel5",
  "Échangez directement avec les fournisseurs pour négocier les prix et demander des échantillons.": "ecommerce.echangezdirectementa2",
  "Échantillons à prix réduits": "ecommerce.echantillonsaprixred1",
  "Échec": "common.echec1",
  "Échec de la connexion": "auth.echecdelaconnexion2",
  "Échec de la suppression: ": "common.echecdelasuppression1",
  "Échec de paiement critique": "common.echecdepaiementcriti1",
  "Échec de synchronisation avec l\\": "common.echecdesynchronisati1",
  "Écouteurs Bluetooth": "common.ecouteursbluetooth9",
  "Écouteurs Bluetooth 5.0 TWS Pro": "common.ecouteursbluetooth501",
  "Écouteurs Bluetooth Premium": "common.ecouteursbluetoothpr1",
  "Écouteurs Bluetooth Sans Fil": "common.ecouteursbluetoothsa1",
  "Écouteurs Bluetooth dans leur boîtier": "common.ecouteursbluetoothda1",
  "Écouteurs bluetooth": "common.ecouteursbluetooth11",
  "Écouteurs en cours d\\": "common.ecouteursencoursd1",
  "Écouteurs sans fil avec réduction de bruit active et autonomie 24h.": "forms.ecouteurssansfilavec1",
  "Écouteurs sans fil avec réduction de bruit active et autonomie de 30h": "forms.ecouteurssansfilavec3",
  "Écouteurs true wireless avec réduction de bruit active, boîtier de charge rapide et autonomie 24h. Qualité audio HD.": "forms.ecouteurstruewireles1",
  "Écran": "common.ecran3",
  "Électronique": "common.electronique63",
  "Électronique et gadgets.": "common.electroniqueetgadget1",
  "Électronique grand public": "common.electroniquegrandpub3",
  "Élevé": "common.eleve1",
  "Épaisseur": "common.epaisseur1",
  "Épices du Monde": "common.epicesdumonde1",
  "Épices et condiments": "common.epicesetcondiments1",
  "Équipe Support": "common.equipesupport2",
  "Équipe Ventes": "common.equipeventes1",
  "Équipement de sécurité": "admin.equipementdesecurite2",
  "Équipements audio": "common.equipementsaudio1",
  "Équipements culinaires": "common.equipementsculinaire1",
  "Équipements de soudage": "common.equipementsdesoudage1",
  "Équipements garage": "common.equipementsgarage1",
  "Étagères industrielles": "common.etageresindustrielle1",
  "Étanche": "common.etanche1",
  "Étanche IP68": "common.etancheip681",
  "Étanchéité": "common.etancheite1",
  "États-Unis": "common.etatsunis11",
  "Évaluez les prix, la qualité, les certifications et les avis pour choisir le meilleur fournisseur.": "ecommerce.evaluezlesprixlaqual1",
  "Évolution des ventes": "common.evolutiondesventes1",
  "Êtes-vous sûr de vouloir restaurer les produits par défaut ? Tous vos produits ajoutés seront perdus.": "ecommerce.etesvoussurdevouloir8",
  "Êtes-vous sûr de vouloir supprimer ce conteneur ?": "forms.etesvoussurdevouloir8",
  "Êtes-vous sûr de vouloir supprimer ce document ?": "forms.etesvoussurdevouloir11",
  "Êtes-vous sûr de vouloir supprimer ce fichier ?": "forms.etesvoussurdevouloir14",
  "Êtes-vous sûr de vouloir supprimer ce produit ?": "forms.etesvoussurdevouloir20",
  "Êtes-vous sûr de vouloir supprimer cette carte ?": "forms.etesvoussurdevouloir22",
  "à 15.6 pouces, il offre une protection optimale grâce à son rembourrage haute densité. Le port USB intégré permet de charger vos appareils en déplacement.\r\n\r\nFabriqué en tissu imperméable haute qualité, il résiste aux intempéries et à l": "common.a156poucesiloffreune",
  "à 8 images. Formats acceptés: JPG, PNG, GIF. Taille max par image.": "common.a8imagesformatsaccep",
  "éblouissement et améliorent le contraste pour une vision claire en toutes circonstances. La monture en alliage ultra-léger garantit un confort de port exceptionnel même lors d": "common.eblouissementetameli1",
  "échouée": "common.echouee3",
  "écoute.": "common.ecoute1",
  "écouteur\n    };\n  }, []);\n\n  const login = async (email: string, password: string): Promise<User> => {\n    try {\n      console.log(": "auth.ecouteurconstloginas1",
  "écouteur mis en place\n        if (mounted) {\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error(": "common.ecouteurmisenplaceif1",
  "écouteur onAuthStateChanged s": "common.ecouteuronauthstatec3",
  "écran\r\n  const getVisibleCount = () => {\r\n    if (typeof window === ": "common.ecranconstgetvisible",
  "écrire dans Firestore et RIEN d": "common.ecriredansfirestoree1",
  "édition *": "common.edition",
  "édition */}\r\n                  <div className=\"hidden sm:flex items-center gap-2\">\r\n                    {isEditing ? (\r\n                      <>\r\n                        <button\r\n                          onClick={handleSaveProfile}\r\n                          className=\"flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors duration-200\"\r\n                        >\r\n                          <Save size={16} className=\"mr-2\" />\r\n                          Sauvegarder\r\n                        </button>\r\n                        <button\r\n                          onClick={handleCancelEdit}\r\n                          className=\"flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-200\"\r\n                        >\r\n                          <X size={16} className=\"mr-2\" />\r\n                          Annuler\r\n                        </button>\r\n                      </>\r\n                    ) : (\r\n                      <button\r\n                        onClick={() => setIsEditing(true)}\r\n                        className=\"flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200\"\r\n                      >\r\n                        <Edit3 size={16} className=\"mr-2\" />\r\n                        Modifier\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Stats rapides */}\r\n                <div className=\"flex justify-center sm:justify-start gap-6 mt-4\">\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\r\n                      {user.favorites?.length || 0}\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-500\">Favoris</div>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\r\n                      {fakeOrders.length}\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-500\">Commandes</div>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-lg font-bold text-gray-900 dark:text-white\">\r\n                      {fakeMessages.length}\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-500\">Messages</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Navigation Tabs avec animations */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 mb-8 overflow-hidden\">\r\n          <div className=\"flex\">\r\n            {[\r\n              { id: ": "navigation.editiondivclassnameh",
  "édition mobiles *": "common.editionmobiles",
  "édition mobiles */}\r\n                <div className=\"flex sm:hidden justify-center gap-3 mt-6\">\r\n                  {isEditing ? (\r\n                    <>\r\n                      <button\r\n                        onClick={handleSaveProfile}\r\n                        className=\"flex-1 flex items-center justify-center px-4 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-all duration-200 hover-lift\"\r\n                      >\r\n                        <Save size={16} className=\"mr-2\" />\r\n                        Sauvegarder\r\n                      </button>\r\n                      <button\r\n                        onClick={handleCancelEdit}\r\n                        className=\"flex-1 flex items-center justify-center px-4 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-all duration-200 hover-lift\"\r\n                      >\r\n                        <X size={16} className=\"mr-2\" />\r\n                        Annuler\r\n                      </button>\r\n                    </>\r\n                  ) : (\r\n                    <button\r\n                      onClick={() => setIsEditing(true)}\r\n                      className=\"flex items-center justify-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-all duration-200 hover-lift\"\r\n                    >\r\n                      <Edit3 size={16} className=\"mr-2\" />\r\n                      Modifier\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </Section>\r\n\r\n              {/* Statistiques du profil */}\r\n              <Section icon={<Package className=\"w-5 h-5\" />} title=\"Statistiques du compte\">\r\n                <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\r\n                  {[\r\n                    { label: ": "forms.editionmobilesdivcla",
  "électronique": "common.electronique67",
  "élément existant\r\n            setItems(prev => prev.map((item, index) =>\r\n                index === existingItemIndex\r\n                    ? {\r\n                        ...item,\r\n                        quantity,\r\n                        variants,\r\n                        unitPrice,\r\n                        totalPrice,\r\n                        addedAt: new Date()\r\n                    }\r\n                    : item\r\n            ));\r\n        } else {\r\n            // Ajouter un nouvel élément\r\n            const newItem: QuoteItem = {\r\n                productId: product.id!,\r\n                product,\r\n                quantity,\r\n                variants,\r\n                unitPrice,\r\n                totalPrice,\r\n                addedAt: new Date()\r\n            };\r\n            setItems(prev => [...prev, newItem]);\r\n        }\r\n    };\r\n\r\n    const removeFromQuote = (productId: string) => {\r\n        setItems(prev => prev.filter(item => item.productId !== productId));\r\n    };\r\n\r\n    const updateQuantity = (productId: string, quantity: number) => {\r\n        setItems(prev => prev.map(item => {\r\n            if (item.productId === productId) {\r\n                const { unitPrice, totalPrice } = calculateItemPrice(item.product, quantity, item.variants);\r\n                return {\r\n                    ...item,\r\n                    quantity,\r\n                    unitPrice,\r\n                    totalPrice\r\n                };\r\n            }\r\n            return item;\r\n        }));\r\n    };\r\n\r\n    const updateVariants = (productId: string, variants: Record<string, string>) => {\r\n        setItems(prev => prev.map(item => {\r\n            if (item.productId === productId) {\r\n                const { unitPrice, totalPrice } = calculateItemPrice(item.product, item.quantity, variants);\r\n                return {\r\n                    ...item,\r\n                    variants,\r\n                    unitPrice,\r\n                    totalPrice\r\n                };\r\n            }\r\n            return item;\r\n        }));\r\n    };\r\n\r\n    const getItemQuantity = (productId: string) => {\r\n        const item = items.find(item => item.productId === productId);\r\n        return item ? item.quantity : 0;\r\n    };\r\n\r\n    const getTotalItems = () => {\r\n        return items.reduce((total, item) => total + item.quantity, 0);\r\n    };\r\n\r\n    const getTotalPrice = () => {\r\n        return items.reduce((total, item) => total + item.totalPrice, 0);\r\n    };\r\n\r\n    const clearQuote = () => {\r\n        setItems([]);\r\n    };\r\n\r\n    const isInQuote = (productId: string) => {\r\n        return items.some(item => item.productId === productId);\r\n    };\r\n\r\n    const value: QuoteContextType = {\r\n        items,\r\n        addToQuote,\r\n        removeFromQuote,\r\n        updateQuantity,\r\n        updateVariants,\r\n        getItemQuantity,\r\n        getTotalItems,\r\n        getTotalPrice,\r\n        clearQuote,\r\n        isInQuote\r\n    };\r\n\r\n    return (\r\n        <QuoteContext.Provider value={value}>\r\n            {children}\r\n        <": "forms.elementexistantsetit1",
  "élément existant\r\n            setItems(prev => prev.map((item, index) =>\r\n                index === existingItemIndex\r\n                    ? {\r\n                        ...item,\r\n                        quantity,\r\n                        variants,\r\n                        unitPrice,\r\n                        totalPrice,\r\n                        addedAt: new Date()\r\n                    }\r\n                    : item\r\n            ));\r\n        } else {\r\n            // Ajouter un nouvel élément\r\n            const newItem: QuoteItem = {\r\n                productId: product.id!,\r\n                product,\r\n                quantity,\r\n                variants,\r\n                unitPrice,\r\n                totalPrice,\r\n                addedAt: new Date()\r\n            };\r\n            setItems(prev => [...prev, newItem]);\r\n        }\r\n    };\r\n\r\n    const removeFromQuote = (productId: string) => {\r\n        setItems(prev => prev.filter(item => item.productId !== productId));\r\n    };\r\n\r\n    const updateQuantity = (productId: string, quantity: number) => {\r\n        setItems(prev => prev.map(item => {\r\n            if (item.productId === productId) {\r\n                const { unitPrice, totalPrice } = calculateItemPrice(item.product, quantity, item.variants);\r\n                return {\r\n                    ...item,\r\n                    quantity,\r\n                    unitPrice,\r\n                    totalPrice\r\n                };\r\n            }\r\n            return item;\r\n        }));\r\n    };\r\n\r\n    const updateVariants = (productId: string, variants: Record<string, string>) => {\r\n        setItems(prev => prev.map(item => {\r\n            if (item.productId === productId) {\r\n                const { unitPrice, totalPrice } = calculateItemPrice(item.product, item.quantity, variants);\r\n                return {\r\n                    ...item,\r\n                    variants,\r\n                    unitPrice,\r\n                    totalPrice\r\n                };\r\n            }\r\n            return item;\r\n        }));\r\n    };\r\n\r\n    const getItemQuantity = (productId: string) => {\r\n        const item = items.find(item => item.productId === productId);\r\n        return item ? item.quantity : 0;\r\n    };\r\n\r\n    const getTotalItems = () => {\r\n        return items.reduce((total, item) => total + item.quantity, 0);\r\n    };\r\n\r\n    const getTotalPrice = () => {\r\n        return items.reduce((total, item) => total + item.totalPrice, 0);\r\n    };\r\n\r\n    const clearQuote = () => {\r\n        setItems([]);\r\n    };\r\n\r\n    const isInQuote = (productId: string) => {\r\n        return items.some(item => item.productId === productId);\r\n    };\r\n\r\n    const value: QuoteContextType = {\r\n        items,\r\n        addToQuote,\r\n        removeFromQuote,\r\n        updateQuantity,\r\n        updateVariants,\r\n        getItemQuantity,\r\n        getTotalItems,\r\n        getTotalPrice,\r\n        clearQuote,\r\n        isInQuote\r\n    };\r\n\r\n    return (\r\n        <QuoteContext.Provider value={value}>\r\n            {children}\r\n        </QuoteContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useQuote = () => {\r\n    const context = useContext(QuoteContext);\r\n    if (!context) {\r\n        throw new Error(": "forms.elementexistantsetit2",
  "énergie *": "common.energie1",
  "équipe du Portugal": "common.equipeduportugal2",
  "équipement": "common.equipement1",
  "équipements électroniques de haute qualité depuis plus de 15 ans. Nous nous spécialisons dans les smartphones, ordinateurs portables et accessoires technologiques avec une expertise reconnue mondialement.": "forms.equipementselectroni1",
  "équipements électroniques et de composants high-tech": "common.equipementselectroni1",
  "étanchéité IP68, cette montre vous accompagne dans toutes vos aventures. Compatible avec iOS et Android, elle synchronise automatiquement vos données de santé et notifications.\r\n\r\nParfaite pour les professionnels actifs et les sportifs exigeants, cette montre connectée redéfinit les standards de l": "common.etancheiteip68cettem1",
  "état ": "common.etat3",
  "état Firebase détecté:": "common.etatfirebasedetecte1",
  "état d": "common.etatd4",
  "état de vos commandes en temps réel depuis votre tableau de bord": "admin.etatdevoscommandesen1",
  "état de vos commandes en temps réel depuis votre tableau de bord\",\n\n    \"homepage.final.title\": \"Prêt à développer votre business ?\",\n    \"homepage.final.subtitle\": \"Commencez à importer depuis la Chine dès aujourd": "navigation.etatdevoscommandesen",
  "état des conteneurs sans recharger la page.\r\nconst currentContainers = new Map<string, Container>(mockContainers.map(c => [c.id, { ...c }]));\r\nconst currentContainerItems = new Map<string, ContainerItem>(mockContainerItems.map(ci => [ci.id, { ...ci }]));\r\n\r\nexport const containerService = {\r\n  /**\r\n   * Récupère la liste de tous les conteneurs.\r\n   * Dans une application réelle, cela ferait un appel API à un backend.\r\n   */\r\n  getContainers(): Promise<Container[]> {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(Array.from(currentContainers.values()));\r\n      }, 500); // Simule un délai réseau\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Récupère les articles pour un conteneur donné.\r\n   * @param containerId L": "navigation.etatdesconteneurssan",
  "état du service\n        const health = await firebaseAuthService.checkHealth();\n        console.log(": "common.etatduserviceconsthe1",
  "état local\n      setUser(null);\n\n      console.log(": "admin.etatlocalsetusernull1",
  "état local\n      setUser(null);\n      localStorage.removeItem(": "admin.etatlocalsetusernull3",
  "état local\r\n            const updatedUser = { ...user, ...userData };\r\n            setUser(updatedUser);\r\n\r\n            // TODO: Implémenter la mise à jour en base de données\r\n            console.log(": "admin.etatlocalconstupdate1",
  "état local\r\n            this.currentUser = null;\r\n\r\n            console.log(": "admin.etatlocalthiscurrent",
  "état local\r\n      setNotifications(prev =>\r\n        prev.map(notification =>\r\n          notification.id === notificationId\r\n            ? { ...notification, isRead: true }\r\n            : notification\r\n        )\r\n      );\r\n      \r\n      ": "common.etatlocalsetnotifica",
  "état local\r\n      setNotifications(prev =>\r\n        prev.map(notification => ({ ...notification, isRead: true }))\r\n      );\r\n      \r\n      setUnreadCount(0);\r\n      return true;\r\n    } catch (err) {\r\n      console.error(": "common.etatlocalsetnotifica1",
  "être créé pour éviter la confusion\r\n            if (auth.currentUser?.uid === firebaseUser.uid) {\r\n                await signOut(auth);\r\n                console.log(": "admin.etrecreepoureviterla1",
  "ℹ️ Aucun utilisateur à supprimer\\n": "forms.aucunutilisateurasup",
  "ℹ️ Commandes de test déjà existantes ou erreur:": "ecommerce.commandesdetestdejae2",
  "ℹ️ Fournisseurs de test déjà existants ou erreur:": "ecommerce.fournisseursdetestde2",
  "ℹ️ Messages de test déjà existants ou erreur:": "common.messagesdetestdejaex2",
  "ℹ️ Note: Les utilisateurs Firebase Auth ne peuvent être supprimés que côté serveur": "admin.notelesutilisateursf2",
  "ℹ️ Produits de test déjà existants ou erreur:": "ecommerce.produitsdetestdejaex2",
  "⚠️ ATTENTION : Cette action va supprimer TOUS les utilisateurs existants et en créer de nouveaux. Êtes-vous sûr ?": "forms.attentioncetteaction",
  "⚠️ ATTENTION: Suppression de TOUS les utilisateurs existants": "admin.attentionsuppression",
  "⚠️ Aucun utilisateur connecté pour mise à jour": "admin.aucunutilisateurconn1",
  "⚠️ Certains utilisateurs n\\": "admin.certainsutilisateurs",
  "⚠️ DÉCONNEXION D\\": "auth.deconnexiond1",
  "⚠️ Erreur mise à jour activité:": "common.erreurmiseajouractiv1",
  "⚠️ Erreur mise à jour dernière connexion:": "auth.erreurmiseajourderni2",
  "✅ === DIAGNOSTIC TERMINÉ ===": "common.diagnostictermine1",
  "✅ Admin toujours connecté:": "admin.admintoujoursconnect1",
  "✅ Base de données réinitialisée avec succès !": "common.basededonneesreiniti1",
  "✅ Commandes de test créées": "ecommerce.commandesdetestcreee2",
  "✅ Connexion admin réussie": "auth.connexionadminreussi1",
  "✅ Connexion réussie ! Vous pouvez maintenant créer des utilisateurs.": "auth.connexionreussievous2",
  "✅ Connexion universelle réussie:": "auth.connexionuniverselle5",
  "✅ Correction automatique terminée - Reconnectez-vous": "common.correctionautomatiqu",
  "✅ Document utilisateur créé (Firebase Auth requis séparément)": "admin.documentutilisateurc1",
  "✅ Données de démonstration initialisées": "common.donneesdedemonstrati1",
  "✅ Données de test créées avec succès": "common.donneesdetestcreeesa1",
  "✅ Données de test nettoyées": "common.donneesdetestnettoye1",
  "✅ Données influenceur de test créées avec succès !": "common.donneesinfluenceurde1",
  "✅ Déconnexion complète effectuée": "auth.deconnexioncompletee",
  "✅ Déconnexion réussie": "auth.deconnexionreussie6",
  "✅ Fournisseurs de test créés": "ecommerce.fournisseursdetestcr2",
  "✅ Liste rechargée avec succès": "common.listerechargeeavecsu1",
  "✅ Messages de test créés": "common.messagesdetestcrees1",
  "✅ Mot de passe réinitialisé avec succès": "auth.motdepassereinitiali1",
  "✅ Produits de test créés": "ecommerce.produitsdetestcrees2",
  "✅ Profil admin créé dans Firestore": "admin.profiladmincreedansf1",
  "✅ Rôle admin correctement défini": "admin.roleadmincorrectemen1",
  "✅ Rôle admin déjà correct": "admin.roleadmindejacorrect1",
  "✅ Rôle mis à jour vers admin": "admin.rolemisajourversadmi1",
  "✅ Services Firebase détectés\\n": "common.servicesfirebasedete1",
  "✅ TEST ULTIME: Document créé avec API pure": "common.testultimedocumentcr1",
  "✅ TEST ULTIME: Succès - Document créé": "common.testultimesuccesdocu1",
  "✅ Toutes les données utilisateur ont été nettoyées": "admin.touteslesdonneesutil1",
  "✅ ULTRA-SAFE: Utilisateur créé avec succès dans Firestore": "admin.ultrasafeutilisateur1",
  "✅ Utilisateur Auth créé sur instance secondaire:": "admin.utilisateurauthcrees1",
  "✅ Utilisateur Firebase Auth créé:": "admin.utilisateurfirebasea1",
  "✅ Utilisateur activé": "admin.utilisateuractive1",
  "✅ Utilisateur admin créé": "admin.utilisateuradmincree1",
  "✅ Utilisateur admin créé en Firestore": "admin.utilisateuradmincree3",
  "✅ Utilisateur admin mis à jour": "admin.utilisateuradminmisa1",
  "✅ Utilisateur créé avec succès:": "admin.utilisateurcreeavecs3",
  "✅ Utilisateur créé dans Firestore avec succès": "admin.utilisateurcreedansf6",
  "✅ Utilisateur créé directement sans AuthContext": "admin.utilisateurcreedirec1",
  "✅ Utilisateur de test chargé:": "admin.utilisateurdetestcha1",
  "✅ Utilisateur mis à jour avec succès": "admin.utilisateurmisajoura9",
  "✅ Utilisateur supprimé avec succès": "admin.utilisateursupprimea3",
  "✅ Utilisateur temporaire créé avec succès:": "admin.utilisateurtemporair1",
  "✅ Utilisateurs de test déjà initialisés": "admin.utilisateursdetestde2",
  "❌ Aucun utilisateur connecté": "admin.aucunutilisateurconn3",
  "❌ Erreur création directe:": "common.erreurcreationdirect1",
  "❌ Erreur création utilisateur:": "admin.erreurcreationutilis4",
  "❌ Erreur de connexion universelle:": "auth.erreurdeconnexionuni",
  "❌ Erreur déconnexion:": "auth.erreurdeconnexion14",
  "❌ Erreur lors de la création de l\\": "common.erreurlorsdelacreati45",
  "❌ Erreur lors de la création des données de test:": "common.erreurlorsdelacreati47",
  "❌ Erreur lors de la création des données test:": "common.erreurlorsdelacreati49",
  "❌ Erreur lors de la création directe:": "common.erreurlorsdelacreati51",
  "❌ Erreur lors de la création du compte admin:": "admin.erreurlorsdelacreati18",
  "❌ Erreur lors de la création via Cloud Functions:": "common.erreurlorsdelacreati53",
  "❌ Erreur lors de la création:": "common.erreurlorsdelacreati55",
  "❌ Erreur lors de la déconnexion:": "auth.erreurlorsdeladeconn5",
  "❌ Erreur lors de la mise à jour:": "common.erreurlorsdelamiseaj35",
  "❌ Erreur lors de la récupération des statistiques:": "common.erreurlorsdelarecupe25",
  "❌ Erreur lors de la récupération des utilisateurs:": "admin.erreurlorsdelarecupe16",
  "❌ Erreur lors de la réinitialisation:": "common.erreurlorsdelareinit5",
  "❌ Erreur lors de la suppression du profil:": "common.erreurlorsdelasuppre",
  "❌ Erreur lors de la vérification Firestore:": "common.erreurlorsdelaverifi7",
  "❌ Erreur lors de la vérification du rôle:": "common.erreurlorsdelaverifi9",
  "❌ Erreur lors de la vérification:": "common.erreurlorsdelaverifi11",
  "❌ Erreur lors du nettoyage des données:": "common.erreurlorsdunettoyag1",
  "❌ Erreur mise à jour utilisateur:": "admin.erreurmiseajourutili1",
  "❌ Erreur obtention résumé:": "common.erreurobtentionresum1",
  "❌ Erreur récupération utilisateurs:": "admin.erreurrecuperationut8",
  "❌ Erreur vérification email:": "auth.erreurverificationem7",
  "❌ Impossible de créer l\\": "common.impossibledecreerl5",
  "❌ Impossible de vérifier le rôle - utilisateur non trouvé": "admin.impossibledeverifier1",
  "❌ Utilisateur admin non trouvé en Firestore": "admin.utilisateuradminnont1",
  "❌ Vous devez être connecté en tant qu\\": "common.vousdevezetreconnect12",
  "🎉 Migration terminée avec succès !": "common.migrationtermineeave1",
  "🎉 Processus terminé - Admin toujours connecté !": "admin.processustermineadmi",
  "🏭 === CRÉATION DES UTILISATEURS ESSENTIELS POUR LA PRODUCTION ===": "admin.creationdesutilisate3",
  "👋 Aucun utilisateur connecté": "admin.aucunutilisateurconn5",
  "👋 Déconnexion en cours...": "auth.deconnexionencours1",
  "👋 Déconnexion...": "auth.deconnexion7",
  "👤 Admin connecté (instance principale):": "admin.adminconnecteinstanc1",
  "👤 Admin connecté après:": "admin.adminconnecteapres1",
  "👤 Admin connecté avant:": "admin.adminconnecteavant1",
  "👤 Admin connecté:": "admin.adminconnecte3",
  "👤 Admin toujours connecté:": "admin.admintoujoursconnect3",
  "👤 Nouvelle connexion détectée:": "auth.nouvelleconnexiondet2",
  "👤 Utilisateur Firebase détecté:": "admin.utilisateurfirebased1",
  "👤 Utilisateur connecté détecté:": "admin.utilisateurconnected1",
  "📄 Document Firestore créé avec succès": "common.documentfirestorecre1",
  "📄 Document Firestore créé sur instance principale": "common.documentfirestorecre3",
  "📊 Données sauvegardées:": "common.donneessauvegardees1",
  "📊 Données:": "common.donnees1",
  "📊 Vérification de l\\": "common.verificationdel1",
  "📊 État de la base de données:": "common.etatdelabasededonnee1",
  "📝 Ajout des nouvelles données de démonstration...": "common.ajoutdesnouvellesdon",
  "📝 Initialisation des données de démonstration...": "common.initialisationdesdon1",
  "📦 Ajout de produits de test supplémentaires...": "ecommerce.ajoutdeproduitsdetes2",
  "📦 Création des données de test...": "common.creationdesdonneesde1",
  "📦 Récupération des produits...": "ecommerce.recuperationdesprodu1",
  "🔄 Création de l\\": "common.creationdel1",
  "🔄 Dernière connexion mise à jour": "auth.derniereconnexionmis2",
  "🔄 Démarrage de la surveillance des connexions utilisateurs...": "auth.demarragedelasurveil2",
  "🔄 Instance Firebase secondaire initialisée pour création d\\": "common.instancefirebaseseco1",
  "🔄 Mise à jour de l\\": "common.miseajourdel4",
  "🔄 Mise à jour du rôle vers admin...": "admin.miseajourduroleversa1",
  "🔄 Mise à jour utilisateur...": "admin.miseajourutilisateur1",
  "🔄 ProductsService: localStorage effacé, réinitialisation forcée": "ecommerce.productsservicelocal",
  "🔄 Rechargement manuel et sécurisé de la liste utilisateurs": "admin.rechargementmanuelet1",
  "🔄 Réinitialisation de la base de données produits...": "ecommerce.reinitialisationdela1",
  "🔄 Surveillance de session démarrée": "common.surveillancedesessio1",
  "🔄 Synchronisation des utilisateurs visibles...": "admin.synchronisationdesut",
  "🔍 Connexion Google non implémentée en production": "auth.connexiongooglenonim2",
  "🔍 Navbar - État utilisateur:": "admin.navbaretatutilisateu1",
  "🔍 ProductsService: Produits chargés depuis localStorage:": "ecommerce.productsserviceprodu2",
  "🔍 Récupération de tous les utilisateurs...": "admin.recuperationdetousle9",
  "🔍 SAFE: Récupération lecture seule des utilisateurs...": "admin.saferecuperationlect1",
  "🔍 TEST ULTIME: Si déconnexion maintenant, problème est dans Firestore": "auth.testultimesideconnex1",
  "🔍 TEST ULTIME: Si déconnexion maintenant, problème est dans Firestore/React": "auth.testultimesideconnex2",
  "🔍 Test de connexion Firebase...": "auth.testdeconnexionfireb",
  "🔐 Création Firebase Auth sur instance secondaire...": "common.creationfirebaseauth1",
  "🔑 Réinitialisation du mot de passe pour:": "auth.reinitialisationdumo1",
  "🔒 GARANTIE: Aucun appel Firebase Auth effectué": "common.garantieaucunappelfi1",
  "🔓 Déconnexion de l\\": "auth.deconnexiondel2",
  "🔥 Création d\\": "common.creationd7",
  "🔥 Création directe d\\": "common.creationdirected1",
  "🔥 Création utilisateur complet (Auth + Firestore) sans déconnexion admin:": "auth.creationutilisateurc1",
  "🔥 Initialisation des utilisateurs de test (Firestore seulement)...": "admin.initialisationdesuti",
  "🗑️ === PURGE COMPLÈTE DES UTILISATEURS ===": "admin.purgecompletedesutil2",
  "🗑️ Suppression de tous les utilisateurs...\\n": "admin.suppressiondetousles",
  "🚀 Début de la migration des produits vers Firebase...": "ecommerce.debutdelamigrationde",
  "🚀 Début de la réinitialisation complète...\\n\\n": "common.debutdelareinitialis1",
  "🚀 Démarrage de la correction rapide admin...": "admin.demarragedelacorrect1",
  "🚀 Démarrage du système ultime...\\n": "common.demarragedusystemeul1",
  "🚀 Initialisation de la base de données Firebase...": "common.initialisationdelaba1",
  "🚧 Nouvelle interface en cours de développement...": "common.nouvelleinterfaceenc1",
  "🛑 Surveillance automatique des utilisateurs désactivée": "admin.surveillanceautomati2",
  "🛑 Surveillance de session arrêtée": "common.surveillancedesessio3",
  "🛡️ Initialisation sécurisée des utilisateurs de test (Firestore seulement)": "admin.initialisationsecuri",
  "🛡️ SOLUTION: Création utilisateur Firestore SEULEMENT - pas de Firebase Auth": "admin.solutioncreationutil1",
  "🛡️ ULTRA-SAFE: Création utilisateur Firestore ONLY": "admin.ultrasafecreationuti",
  "🧪 APRÈS - Admin connecté:": "admin.apresadminconnecte1",
  "🧪 AVANT - Admin connecté:": "admin.avantadminconnecte1",
  "🧪 Création d\\": "common.creationd11",
  "🧪 TEST ULTIME: Début - Écriture Firestore pure": "common.testultimedebutecrit1",
  "🧪 Test de création d\\": "common.testdecreationd1",
  "🧹 Instance Firebase secondaire nettoyée": "common.instancefirebaseseco3",
  "🧹 Nettoyage des données corrompues...": "common.nettoyagedesdonneesc1",
  "🧹 Nettoyage: déconnexion instance secondaire": "auth.nettoyagedeconnexion2",
  "� Chargement des utilisateurs depuis la base de données": "admin.chargementdesutilisa3",
  "� Utilisateurs récupérés:": "admin.utilisateursrecupere2"
}