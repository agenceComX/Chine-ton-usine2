import { adminUserServiceFixed } from '../services/adminUserServiceFixed';
import { auth, db } from '../lib/firebaseClient';
import { doc, setDoc, updateDoc } from 'firebase/firestore';

/**
 * Script de diagnostic pour le probl√®me de redirection admin
 * Ce script v√©rifie et corrige la configuration de l'utilisateur admin@chinetonusine.com
 */
export class AdminRedirectionDiagnostic {
    private adminEmail = 'admin@chinetonusine.com';

    /**
     * Diagnostic complet de l'utilisateur admin
     */
    async runFullDiagnostic() {
        console.log('üîç === DIAGNOSTIC REDIRECTION ADMIN ===');
        console.log(`V√©rification de l'utilisateur: ${this.adminEmail}`);

        // 1. V√©rifier l'utilisateur connect√©
        await this.checkCurrentUser();

        // 2. V√©rifier l'existence en Firestore
        await this.checkFirestoreUser();

        // 3. V√©rifier le r√¥le dans Firestore
        await this.checkUserRole();

        // 4. Corriger automatiquement si n√©cessaire
        await this.fixAdminUser();

        // 5. Test de synchronisation
        await this.testSynchronization();

        console.log('‚úÖ === DIAGNOSTIC TERMIN√â ===');
    }

    /**
     * V√©rifier l'utilisateur actuellement connect√©
     */
    private async checkCurrentUser() {
        console.log('\nüì± V√©rification de l\'utilisateur connect√©...');

        const currentUser = auth.currentUser;
        if (!currentUser) {
            console.log('‚ùå Aucun utilisateur connect√©');
            return;
        }

        console.log(`‚úÖ Utilisateur connect√©: ${currentUser.email}`);
        console.log(`   UID: ${currentUser.uid}`);
        console.log(`   Nom: ${currentUser.displayName || 'Non d√©fini'}`);
        console.log(`   Email v√©rifi√©: ${currentUser.emailVerified}`);
        console.log(`   Derni√®re connexion: ${currentUser.metadata.lastSignInTime}`);
    }

    /**
     * V√©rifier l'existence de l'utilisateur en Firestore
     */
    private async checkFirestoreUser() {
        console.log('\nüíæ V√©rification en Firestore...');

        try {
            // Rechercher par email
            const users = await adminUserServiceFixed.getAllUsers();
            const adminUser = users.find(user => user.email === this.adminEmail);

            if (adminUser) {
                console.log(`‚úÖ Utilisateur trouv√© en Firestore:`);
                console.log(`   UID: ${adminUser.uid}`);
                console.log(`   Email: ${adminUser.email}`);
                console.log(`   Nom: ${adminUser.name}`);
                console.log(`   R√¥le: ${adminUser.role}`);
                console.log(`   Actif: ${adminUser.isActive}`);
                console.log(`   Derni√®re connexion: ${adminUser.lastLogin || 'Jamais'}`);
            } else {
                console.log('‚ùå Utilisateur admin non trouv√© en Firestore');
                console.log('   L\'utilisateur doit √™tre cr√©√© ou synchronis√©');
            }
        } catch (error) {
            console.error('‚ùå Erreur lors de la v√©rification Firestore:', error);
        }
    }

    /**
     * V√©rifier sp√©cifiquement le r√¥le admin
     */
    private async checkUserRole() {
        console.log('\nüîê V√©rification du r√¥le admin...');

        try {
            const users = await adminUserServiceFixed.getAllUsers();
            const adminUser = users.find(user => user.email === this.adminEmail);

            if (adminUser) {
                if (adminUser.role === 'admin') {
                    console.log('‚úÖ R√¥le admin correctement d√©fini');
                } else {
                    console.log(`‚ùå R√¥le incorrect: ${adminUser.role} (devrait √™tre 'admin')`);
                }
            } else {
                console.log('‚ùå Impossible de v√©rifier le r√¥le - utilisateur non trouv√©');
            }
        } catch (error) {
            console.error('‚ùå Erreur lors de la v√©rification du r√¥le:', error);
        }
    }

    /**
     * Corriger automatiquement l'utilisateur admin
     */
    private async fixAdminUser() {
        console.log('\nüîß Correction automatique de l\'utilisateur admin...');

        try {
            const users = await adminUserServiceFixed.getAllUsers();
            const adminUser = users.find(user => user.email === this.adminEmail);

            if (adminUser) {
                // Mettre √† jour le r√¥le si n√©cessaire
                if (adminUser.role !== 'admin') {
                    console.log('üîÑ Mise √† jour du r√¥le vers admin...');

                    const userRef = doc(db, 'users', adminUser.uid);
                    await updateDoc(userRef, {
                        role: 'admin',
                        updated_at: new Date().toISOString()
                    });

                    console.log('‚úÖ R√¥le mis √† jour vers admin');
                } else {
                    console.log('‚úÖ R√¥le admin d√©j√† correct');
                }

                // S'assurer que l'utilisateur est actif
                if (!adminUser.isActive) {
                    console.log('üîÑ Activation de l\'utilisateur...');

                    const userRef = doc(db, 'users', adminUser.uid);
                    await updateDoc(userRef, {
                        isActive: true,
                        updated_at: new Date().toISOString()
                    });

                    console.log('‚úÖ Utilisateur activ√©');
                }
            } else {
                console.log('üîÑ Cr√©ation de l\'utilisateur admin...');

                // Cr√©er l'utilisateur admin s'il n'existe pas
                const currentUser = auth.currentUser;
                if (currentUser && currentUser.email === this.adminEmail) {
                    const adminUserData = {
                        uid: currentUser.uid,
                        id: currentUser.uid,
                        email: this.adminEmail,
                        name: 'Admin Principal',
                        role: 'admin' as const,
                        isActive: true,
                        language: 'fr',
                        currency: 'EUR',
                        favorites: [],
                        browsingHistory: [],
                        messages: [],
                        subscription: 'premium',
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString(),
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString(),
                        lastLogin: new Date().toISOString()
                    };

                    const userRef = doc(db, 'users', currentUser.uid);
                    await setDoc(userRef, adminUserData);

                    console.log('‚úÖ Utilisateur admin cr√©√© en Firestore');
                } else {
                    console.log('‚ùå Impossible de cr√©er l\'utilisateur - non connect√© avec le bon email');
                }
            }
        } catch (error) {
            console.error('‚ùå Erreur lors de la correction:', error);
        }
    }

    /**
     * Tester la synchronisation
     */
    private async testSynchronization() {
        console.log('\nüîÑ Test de synchronisation...');

        try {
            const result = await adminUserServiceFixed.syncAllVisibleUsers();

            if (result.success) {
                console.log(`‚úÖ Synchronisation r√©ussie: ${result.count} utilisateur(s) synchronis√©(s)`);
            } else {
                console.log(`‚ùå √âchec de la synchronisation: ${result.error}`);
            }
        } catch (error) {
            console.error('‚ùå Erreur lors du test de synchronisation:', error);
        }
    }

    /**
     * Afficher les statistiques utilisateurs
     */
    async showUserStats() {
        console.log('\nüìä Statistiques des utilisateurs...');

        try {
            const stats = await adminUserServiceFixed.getUserStats();

            console.log(`Total: ${stats.total}`);
            console.log(`Admins: ${stats.byRole.admin}`);
            console.log(`Fournisseurs: ${stats.byRole.supplier}`);
            console.log(`Clients: ${stats.byRole.customer}`);
            console.log(`Actifs: ${stats.active}`);
            console.log(`Inactifs: ${stats.inactive}`);
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
        }
    }

    /**
     * Lancer un diagnostic rapide depuis la console
     */
    static async quickDiagnostic() {
        const diagnostic = new AdminRedirectionDiagnostic();
        await diagnostic.runFullDiagnostic();
        await diagnostic.showUserStats();
    }
}

// Exporter pour utilisation dans la console
(window as any).AdminDiagnostic = AdminRedirectionDiagnostic;
