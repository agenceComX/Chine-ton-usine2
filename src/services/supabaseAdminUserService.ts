// Note: Utilisons Supabase pour la gestion des utilisateurs au lieu de Firebase
// Ce service remplace adminUserService.ts qui utilisait Firebase

export interface CreateUserData {
    email: string;
    password: string;
    name: string;
    role: 'admin' | 'supplier' | 'customer' | 'sourcer';
    isActive?: boolean;
}

export interface SupabaseAdminUser {
    id: string;
    email: string;
    name: string;
    role: string;
    created_at: string;
    updated_at: string;
    last_login?: string;
}

class SupabaseAdminUserService {
    /**
     * Cr√©er un nouvel utilisateur directement dans la table users
     * Note: En production, il faudrait utiliser Supabase Auth avec les bonnes permissions
     */
    async createUser(userFormData: CreateUserData): Promise<{ success: boolean; user?: SupabaseAdminUser; error?: string }> {
        try {
            console.log('üî• Cr√©ation d\'un nouvel utilisateur:', userFormData.email);

            // Pour l'instant, cr√©ons directement dans la table users
            // En production, il faudrait d'abord cr√©er dans Supabase Auth
            const { data, error } = await fetch('/api/admin/create-user', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(userFormData)
            }).then(res => res.json());

            if (error) {
                console.error('‚ùå Erreur lors de la cr√©ation:', error);
                return {
                    success: false,
                    error: this.getErrorMessage(error)
                };
            }

            console.log('‚úÖ Utilisateur cr√©√© avec succ√®s:', userFormData.email);
            return {
                success: true,
                user: data as SupabaseAdminUser
            };

        } catch (error: any) {
            console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur:', error);
            return {
                success: false,
                error: this.getErrorMessage(error.message)
            };
        }
    }

    /**
     * R√©cup√©rer tous les utilisateurs
     */
    async getAllUsers(): Promise<SupabaseAdminUser[]> {
        try {
            console.log('üîç R√©cup√©ration de tous les utilisateurs...');

            const { data, error } = await supabase
                .from('users')
                .select('*')
                .order('created_at', { ascending: false });

            if (error) {
                console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', error);
                return [];
            }

            console.log(`‚úÖ ${data.length} utilisateurs r√©cup√©r√©s`);
            return data as SupabaseAdminUser[];

        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', error);
            return [];
        }
    }

    /**
     * Mettre √† jour un utilisateur
     */
    async updateUser(userId: string, updateData: Partial<CreateUserData>): Promise<{ success: boolean; user?: SupabaseAdminUser; error?: string }> {
        try {
            console.log('üîÑ Mise √† jour de l\'utilisateur:', userId);

            const { data, error } = await supabase
                .from('users')
                .update({
                    ...updateData,
                    updated_at: new Date().toISOString()
                })
                .eq('id', userId)
                .select()
                .single();

            if (error) {
                console.error('‚ùå Erreur lors de la mise √† jour:', error);
                return {
                    success: false,
                    error: 'Erreur lors de la mise √† jour de l\'utilisateur'
                };
            }

            console.log('‚úÖ Utilisateur mis √† jour avec succ√®s');
            return {
                success: true,
                user: data as SupabaseAdminUser
            };

        } catch (error: any) {
            console.error('‚ùå Erreur lors de la mise √† jour:', error);
            return {
                success: false,
                error: this.getErrorMessage(error.message)
            };
        }
    }

    /**
     * Supprimer un utilisateur
     */
    async deleteUser(userId: string): Promise<{ success: boolean; error?: string }> {
        try {
            console.log('üóëÔ∏è Suppression de l\'utilisateur:', userId);

            // Supprimer d'abord de la table users
            const { error: deleteError } = await supabase
                .from('users')
                .delete()
                .eq('id', userId);

            if (deleteError) {
                console.error('‚ùå Erreur lors de la suppression du profil:', deleteError);
                return {
                    success: false,
                    error: 'Erreur lors de la suppression du profil utilisateur'
                };
            }

            // Ensuite supprimer de Supabase Auth
            const { error: authError } = await supabase.auth.admin.deleteUser(userId);

            if (authError) {
                console.error('‚ùå Erreur lors de la suppression auth:', authError);
                return {
                    success: false,
                    error: 'Erreur lors de la suppression de l\'authentification'
                };
            }

            console.log('‚úÖ Utilisateur supprim√© avec succ√®s');
            return { success: true };

        } catch (error: any) {
            console.error('‚ùå Erreur lors de la suppression:', error);
            return {
                success: false,
                error: this.getErrorMessage(error.message)
            };
        }
    }

    /**
     * R√©initialiser le mot de passe d'un utilisateur
     */
    async resetPassword(userId: string, newPassword: string): Promise<{ success: boolean; error?: string }> {
        try {
            console.log('üîë R√©initialisation du mot de passe pour:', userId);

            const { error } = await supabase.auth.admin.updateUserById(userId, {
                password: newPassword
            });

            if (error) {
                console.error('‚ùå Erreur lors de la r√©initialisation:', error);
                return {
                    success: false,
                    error: 'Erreur lors de la r√©initialisation du mot de passe'
                };
            }

            console.log('‚úÖ Mot de passe r√©initialis√© avec succ√®s');
            return { success: true };

        } catch (error: any) {
            console.error('‚ùå Erreur lors de la r√©initialisation:', error);
            return {
                success: false,
                error: this.getErrorMessage(error.message)
            };
        }
    }

    /**
     * Cr√©er des utilisateurs de test pour le d√©veloppement
     */
    async createTestUsers(): Promise<{ success: boolean; count: number; error?: string }> {
        try {
            console.log('üß™ Cr√©ation d\'utilisateurs de test...');

            const testUsers = [
                {
                    email: 'admin@chinetousine.com',
                    password: 'admin123456',
                    name: 'Admin Principal',
                    role: 'admin' as const
                },
                {
                    email: 'supplier1@example.com',
                    password: 'supplier123456',
                    name: 'Shanghai Electronics Co.',
                    role: 'supplier' as const
                },
                {
                    email: 'client1@example.com',
                    password: 'client123456',
                    name: 'Marie Dubois',
                    role: 'customer' as const
                }
            ];

            let createdCount = 0;
            for (const user of testUsers) {
                try {
                    const result = await this.createUser(user);
                    if (result.success) {
                        createdCount++;
                        console.log(`‚úÖ Utilisateur de test cr√©√©: ${user.email}`);
                    } else {
                        console.error(`‚ùå Erreur lors de la cr√©ation de ${user.email}:`, result.error);
                    }
                } catch (error) {
                    console.error(`‚ùå Erreur lors de la cr√©ation de ${user.email}:`, error);
                }
            }

            console.log(`‚úÖ ${createdCount} utilisateurs de test cr√©√©s`);
            return { success: true, count: createdCount };

        } catch (error: any) {
            console.error('‚ùå Erreur lors de la cr√©ation des utilisateurs de test:', error);
            return {
                success: false,
                count: 0,
                error: 'Erreur lors de la cr√©ation des utilisateurs de test'
            };
        }
    }

    /**
     * Convertir les messages d'erreur en fran√ßais
     */
    private getErrorMessage(errorMessage: string): string {
        const errorMap: Record<string, string> = {
            'User already registered': 'Cet email est d√©j√† utilis√©',
            'Invalid email': 'Format d\'email invalide',
            'Password should be at least 6 characters': 'Le mot de passe doit contenir au moins 6 caract√®res',
            'Email not confirmed': 'Email non confirm√©',
            'Invalid credentials': 'Identifiants invalides',
            'User not found': 'Utilisateur introuvable',
            'Email already exists': 'Cet email est d√©j√† utilis√©'
        };

        return errorMap[errorMessage] || 'Une erreur s\'est produite lors de l\'op√©ration';
    }
}

export const supabaseAdminUserService = new SupabaseAdminUserService();
