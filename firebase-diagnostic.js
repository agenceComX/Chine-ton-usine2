/**
 * Script de diagnostic Firebase
 * √Ä coller dans la console du navigateur pour diagnostiquer les probl√®mes
 */

(function firebaseDiagnostic() {
    console.log('üîç === DIAGNOSTIC FIREBASE ===');

    // 1. V√©rifier les variables globales
    console.log('1Ô∏è‚É£ V√©rification des variables globales...');
    console.log('- window.firebase:', !!window.firebase);
    console.log('- window.AdminCreationService:', !!window.AdminCreationService);
    console.log('- window.AdminRedirectionDiagnostic:', !!window.AdminRedirectionDiagnostic);

    // 2. V√©rifier les modules Firebase
    console.log('\n2Ô∏è‚É£ V√©rification des modules Firebase...');
    try {
        const { auth, db } = window.firebaseModules || {};
        console.log('- auth module:', !!auth);
        console.log('- db module:', !!db);

        if (auth) {
            console.log('- Current user:', auth.currentUser?.email || 'None');
        }
    } catch (e) {
        console.log('- Erreur modules:', e.message);
    }

    // 3. Tester une connexion de base
    console.log('\n3Ô∏è‚É£ Test de connexion basique...');
    if (window.AdminCreationService) {
        console.log('‚úÖ Service de cr√©ation disponible');

        // Test de validation
        try {
            const testData = {
                email: 'test@test.com',
                password: 'test123456',
                name: 'Test User'
            };
            console.log('üìù Test de validation des donn√©es...');
            // Note: Nous ne pouvons pas appeler la m√©thode priv√©e validateAdminData directement
        } catch (e) {
            console.error('‚ùå Erreur validation:', e.message);
        }

    } else {
        console.log('‚ùå Service de cr√©ation NON disponible');
        console.log('üí° Suggestion: Rechargez la page et r√©essayez');
    }

    // 4. Instructions de r√©solution
    console.log('\nüîß === INSTRUCTIONS DE R√âSOLUTION ===');
    console.log('Si les services ne sont pas disponibles :');
    console.log('1. Rechargez la page (Ctrl+F5)');
    console.log('2. Attendez le chargement complet');
    console.log('3. R√©ex√©cutez ce diagnostic');
    console.log('');
    console.log('Si les services sont disponibles :');
    console.log('1. Ex√©cutez: createDefaultAdmin()');
    console.log('2. Ou utilisez l\'interface /admin/users');
    console.log('');
    console.log('üÜò En cas de probl√®me persistant :');
    console.log('1. V√©rifiez la console pour des erreurs');
    console.log('2. V√©rifiez la configuration Firebase');
    console.log('3. Testez avec un autre navigateur');

})();

// Fonction d'attente pour les services
async function waitForServices() {
    console.log('‚è≥ Attente du chargement des services...');

    let attempts = 0;
    const maxAttempts = 20;

    while (attempts < maxAttempts) {
        if (window.AdminCreationService && window.AdminRedirectionDiagnostic) {
            console.log('‚úÖ Services charg√©s apr√®s', attempts, 'tentatives');
            console.log('üöÄ Vous pouvez maintenant ex√©cuter : createDefaultAdmin()');
            return true;
        }

        await new Promise(resolve => setTimeout(resolve, 500));
        attempts++;

        if (attempts % 5 === 0) {
            console.log(`‚è≥ Tentative ${attempts}/${maxAttempts}...`);
        }
    }

    console.log('‚ùå Timeout: Services non charg√©s apr√®s', maxAttempts, 'tentatives');
    console.log('üí° Essayez de recharger la page');
    return false;
}

// Exposer la fonction d'attente
window.waitForServices = waitForServices;
