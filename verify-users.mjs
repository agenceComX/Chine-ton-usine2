import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, query, orderBy } from 'firebase/firestore';

// Configuration Firebase - Correction du project ID
const firebaseConfig = {
    apiKey: "AIzaSyAPg7G0QumifGQmMJGTlToNUrw0epPL4X8",
    authDomain: "chine-ton-usine.firebaseapp.com",
    projectId: "chine-ton-usine",
    storageBucket: "chine-ton-usine.firebasestorage.app",
    messagingSenderId: "528021984213",
    appId: "1:528021984213:web:9d5e249e7c6c2ddcd1635c",
    measurementId: "G-23BQZPXP86"
};

async function verifyUsers() {
    console.log('üîç V√âRIFICATION DES UTILISATEURS CR√â√âS');
    console.log('='.repeat(60));

    try {
        // Initialisation Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        // R√©cup√©ration des utilisateurs
        console.log('üìä R√©cup√©ration des utilisateurs depuis Firestore...');
        const usersCollection = collection(db, 'users');
        const q = query(usersCollection, orderBy('createdAt', 'desc'));
        const snapshot = await getDocs(q);

        if (snapshot.empty) {
            console.log('‚ùå Aucun utilisateur trouv√© dans Firestore');
            return;
        }

        const users = [];
        snapshot.forEach((doc) => {
            users.push({
                id: doc.id,
                ...doc.data()
            });
        });

        console.log(`\n‚úÖ ${users.length} utilisateur(s) trouv√©(s)\n`);

        // Affichage d√©taill√© des utilisateurs
        console.log('üìã LISTE DES UTILISATEURS');
        console.log('='.repeat(50));

        const roleColors = {
            admin: 'üî¥',
            supplier: 'üü¢',
            customer: 'üîµ',
            influencer: 'üü£'
        };

        const roleCounts = {
            admin: 0,
            supplier: 0,
            customer: 0,
            influencer: 0
        };

        users.forEach((user, index) => {
            const roleIcon = roleColors[user.role] || '‚ö™';
            roleCounts[user.role] = (roleCounts[user.role] || 0) + 1;

            console.log(`\n${index + 1}. ${roleIcon} ${user.role.toUpperCase()}`);
            console.log(`   üìß Email: ${user.email}`);
            console.log(`   üë§ Nom: ${user.name}`);
            console.log(`   üè¢ Entreprise: ${user.company || 'Non sp√©cifi√©e'}`);
            console.log(`   üÜî UID: ${user.uid || user.id}`);
            console.log(`   üìÖ Cr√©√©: ${user.createdAt ? new Date(user.createdAt).toLocaleString('fr-FR') : 'Non sp√©cifi√©'}`);
            console.log(`   üîì Actif: ${user.isActive ? '‚úÖ Oui' : '‚ùå Non'}`);
            console.log(`   üí≥ Abonnement: ${user.subscription || 'Non sp√©cifi√©'}`);
        });

        // R√©sum√© par r√¥le
        console.log('\nüìä R√âSUM√â PAR R√îLE');
        console.log('='.repeat(30));
        Object.entries(roleCounts).forEach(([role, count]) => {
            const icon = roleColors[role] || '‚ö™';
            console.log(`${icon} ${role.toUpperCase()}: ${count} utilisateur(s)`);
        });

        // V√©rification des donn√©es requises
        console.log('\nüîç V√âRIFICATION DES DONN√âES');
        console.log('='.repeat(35));

        let allValid = true;
        users.forEach((user, index) => {
            const requiredFields = ['email', 'role', 'name', 'uid'];
            const missingFields = requiredFields.filter(field => !user[field]);

            if (missingFields.length > 0) {
                console.log(`‚ùå Utilisateur ${index + 1} (${user.email}): Champs manquants: ${missingFields.join(', ')}`);
                allValid = false;
            }
        });

        if (allValid) {
            console.log('‚úÖ Toutes les donn√©es sont valides');
        }

        // Informations de connexion
        console.log('\nüîê INFORMATIONS DE CONNEXION');
        console.log('='.repeat(40));

        const credentials = {
            admin: 'Admin2024!Secure',
            supplier: 'Supplier2024!Secure',
            customer: 'Client2024!Secure',
            influencer: 'Influencer2024!Secure'
        };

        users.forEach(user => {
            const password = credentials[user.role] || 'Mot de passe non trouv√©';
            console.log(`${roleColors[user.role]} ${user.role.toUpperCase()}: ${user.email} | ${password}`);
        });

        // Recommandations
        console.log('\nüí° RECOMMANDATIONS');
        console.log('='.repeat(25));

        if (roleCounts.admin === 0) {
            console.log('‚ö†Ô∏è Aucun administrateur trouv√© - Cr√©ez un compte admin');
        }

        if (users.length < 4) {
            console.log('‚ö†Ô∏è Moins de 4 utilisateurs - Il manque certains r√¥les');
        }

        console.log('‚úÖ Testez la connexion avec chaque compte');
        console.log('‚úÖ V√©rifiez les redirections selon le r√¥le');
        console.log('‚úÖ Changez les mots de passe par d√©faut en production');

        console.log('\nüéâ V√©rification termin√©e avec succ√®s !');

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error.message);
        console.error('\nüîß Actions sugg√©r√©es:');
        console.error('1. V√©rifiez votre connexion Firebase');
        console.error('2. Assurez-vous que les r√®gles Firestore permettent la lecture');
        console.error('3. Ex√©cutez: npm run firebase:check');
    }
}

// Ex√©cution
verifyUsers()
    .then(() => {
        console.log('\nüëã V√©rification termin√©e');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Erreur fatale:', error.message);
        process.exit(1);
    });
